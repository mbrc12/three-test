shadow$provide.module$node_modules$three$three=function(global,require,module,exports){var THREE={REVISION:"77"};"function"===typeof define&&define.amd?define("three",THREE):"undefined"!==typeof exports&&"undefined"!==typeof module&&(module.exports=THREE);void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Math.sign&&(Math.sign=function(x){return 0>x?-1:0<x?1:+x});void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}});
void 0===Object.assign&&function(){Object.assign=function(target){if(void 0===target||null===target)throw new TypeError("Cannot convert undefined or null to object");for(var output=Object(target),index=1;index<arguments.length;index++){var source=arguments[index];if(void 0!==source&&null!==source)for(var nextKey in source)Object.prototype.hasOwnProperty.call(source,nextKey)&&(output[nextKey]=source[nextKey])}return output}}();Object.assign(THREE,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,
CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,MaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,
SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,CineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,
EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,ByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,
FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:THREE.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,RGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,
LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3E3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,RGBADepthPacking:3201});THREE.Color=function(r,g,b){return void 0===g&&void 0===b?this.set(r):
this.setRGB(r,g,b)};THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(value){value instanceof THREE.Color?this.copy(value):"number"===typeof value?this.setHex(value):"string"===typeof value&&this.setStyle(value);return this},setScalar:function(scalar){this.b=this.g=this.r=scalar},setHex:function(hex){hex=Math.floor(hex);this.r=(hex>>16&255)/255;this.g=(hex>>8&255)/255;this.b=(hex&255)/255;return this},setRGB:function(r,g,b){this.r=r;this.g=g;this.b=b;return this},setHSL:function(){function hue2rgb(p,
q,t){0>t&&(t+=1);1<t&&--t;return t<1/6?p+6*(q-p)*t:.5>t?q:t<2/3?p+6*(q-p)*(2/3-t):p}return function(h,s,l){h=THREE.Math.euclideanModulo(h,1);s=THREE.Math.clamp(s,0,1);l=THREE.Math.clamp(l,0,1);0===s?this.r=this.g=this.b=l:(s=.5>=l?l*(1+s):l+s-l*s,l=2*l-s,this.r=hue2rgb(l,s,h+1/3),this.g=hue2rgb(l,s,h),this.b=hue2rgb(l,s,h-1/3));return this}}(),setStyle:function(style){function handleAlpha(string){void 0!==string&&1>parseFloat(string)&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}
var m;if(m=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)){var components=m[2];switch(m[1]){case "rgb":case "rgba":if(m=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components))return this.r=Math.min(255,parseInt(m[1],10))/255,this.g=Math.min(255,parseInt(m[2],10))/255,this.b=Math.min(255,parseInt(m[3],10))/255,handleAlpha(m[5]),this;if(m=/^(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components))return this.r=Math.min(100,parseInt(m[1],10))/100,this.g=
Math.min(100,parseInt(m[2],10))/100,this.b=Math.min(100,parseInt(m[3],10))/100,handleAlpha(m[5]),this;break;case "hsl":case "hsla":if(m=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){components=parseFloat(m[1])/360;var s=parseInt(m[2],10)/100,l=parseInt(m[3],10)/100;handleAlpha(m[5]);return this.setHSL(components,s,l)}}}else if(m=/^#([A-Fa-f0-9]+)$/.exec(style)){m=m[1];components=m.length;if(3===components)return this.r=parseInt(m.charAt(0)+m.charAt(0),
16)/255,this.g=parseInt(m.charAt(1)+m.charAt(1),16)/255,this.b=parseInt(m.charAt(2)+m.charAt(2),16)/255,this;if(6===components)return this.r=parseInt(m.charAt(0)+m.charAt(1),16)/255,this.g=parseInt(m.charAt(2)+m.charAt(3),16)/255,this.b=parseInt(m.charAt(4)+m.charAt(5),16)/255,this}style&&0<style.length&&(m=THREE.ColorKeywords[style],void 0!==m?this.setHex(m):console.warn("THREE.Color: Unknown color "+style));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(color){this.r=
color.r;this.g=color.g;this.b=color.b;return this},copyGammaToLinear:function(color,gammaFactor){void 0===gammaFactor&&(gammaFactor=2);this.r=Math.pow(color.r,gammaFactor);this.g=Math.pow(color.g,gammaFactor);this.b=Math.pow(color.b,gammaFactor);return this},copyLinearToGamma:function(color,gammaFactor){void 0===gammaFactor&&(gammaFactor=2);gammaFactor=0<gammaFactor?1/gammaFactor:1;this.r=Math.pow(color.r,gammaFactor);this.g=Math.pow(color.g,gammaFactor);this.b=Math.pow(color.b,gammaFactor);return this},
convertGammaToLinear:function(){var r=this.r,g=this.g,b=this.b;this.r=r*r;this.g=g*g;this.b=b*b;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(optionalTarget){optionalTarget=optionalTarget||{h:0,s:0,l:0};var r=this.r,g=this.g,b=this.b,max=Math.max(r,g,
b),min=Math.min(r,g,b),hue,lightness=(min+max)/2;if(min===max)min=hue=0;else{var delta=max-min;min=.5>=lightness?delta/(max+min):delta/(2-max-min);switch(max){case r:hue=(g-b)/delta+(g<b?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4}hue/=6}optionalTarget.h=hue;optionalTarget.s=min;optionalTarget.l=lightness;return optionalTarget},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(h,s,l){var hsl=this.getHSL();hsl.h+=h;
hsl.s+=s;hsl.l+=l;this.setHSL(hsl.h,hsl.s,hsl.l);return this},add:function(color){this.r+=color.r;this.g+=color.g;this.b+=color.b;return this},addColors:function(color1,color2){this.r=color1.r+color2.r;this.g=color1.g+color2.g;this.b=color1.b+color2.b;return this},addScalar:function(s){this.r+=s;this.g+=s;this.b+=s;return this},multiply:function(color){this.r*=color.r;this.g*=color.g;this.b*=color.b;return this},multiplyScalar:function(s){this.r*=s;this.g*=s;this.b*=s;return this},lerp:function(color,
alpha){this.r+=(color.r-this.r)*alpha;this.g+=(color.g-this.g)*alpha;this.b+=(color.b-this.b)*alpha;return this},equals:function(c){return c.r===this.r&&c.g===this.g&&c.b===this.b},fromArray:function(array,offset){void 0===offset&&(offset=0);this.r=array[offset];this.g=array[offset+1];this.b=array[offset+2];return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);array[offset]=this.r;array[offset+1]=this.g;array[offset+2]=this.b;return array}};THREE.ColorKeywords=
{aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,
darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,
hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,
linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,
palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,
violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(x,y,z,w){this._x=x||0;this._y=y||0;this._z=z||0;this._w=void 0!==w?w:1};THREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(value){this._x=value;this.onChangeCallback()},get y(){return this._y},set y(value){this._y=value;this.onChangeCallback()},get z(){return this._z},set z(value){this._z=value;this.onChangeCallback()},get w(){return this._w},
set w(value){this._w=value;this.onChangeCallback()},set:function(x,y,z,w){this._x=x;this._y=y;this._z=z;this._w=w;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(quaternion){this._x=quaternion.x;this._y=quaternion.y;this._z=quaternion.z;this._w=quaternion.w;this.onChangeCallback();return this},setFromEuler:function(euler,update){if(!1===euler instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
var c1=Math.cos(euler._x/2),c2=Math.cos(euler._y/2),c3=Math.cos(euler._z/2),s1=Math.sin(euler._x/2),s2=Math.sin(euler._y/2),s3=Math.sin(euler._z/2);euler=euler.order;"XYZ"===euler?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3):"YXZ"===euler?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3):"ZXY"===euler?(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=
c1*c2*c3-s1*s2*s3):"ZYX"===euler?(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3):"YZX"===euler?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3):"XZY"===euler&&(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3);if(!1!==update)this.onChangeCallback();return this},setFromAxisAngle:function(axis,angle){angle/=2;var s=Math.sin(angle);
this._x=axis.x*s;this._y=axis.y*s;this._z=axis.z*s;this._w=Math.cos(angle);this.onChangeCallback();return this},setFromRotationMatrix:function(m){var te=m.elements,m11=te[0];m=te[4];var m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6];te=te[10];var trace=m11+m22+te;0<trace?(m11=.5/Math.sqrt(trace+1),this._w=.25/m11,this._x=(m32-m23)*m11,this._y=(m13-m31)*m11,this._z=(m21-m)*m11):m11>m22&&m11>te?(m11=2*Math.sqrt(1+m11-m22-te),this._w=(m32-m23)/m11,this._x=.25*m11,this._y=(m+m21)/m11,this._z=
(m13+m31)/m11):m22>te?(m11=2*Math.sqrt(1+m22-m11-te),this._w=(m13-m31)/m11,this._x=(m+m21)/m11,this._y=.25*m11,this._z=(m23+m32)/m11):(m11=2*Math.sqrt(1+te-m11-m22),this._w=(m21-m)/m11,this._x=(m13+m31)/m11,this._y=(m23+m32)/m11,this._z=.25*m11);this.onChangeCallback();return this},setFromUnitVectors:function(){var v1,r;return function(vFrom,vTo){void 0===v1&&(v1=new THREE.Vector3);r=vFrom.dot(vTo)+1;1E-6>r?(r=0,Math.abs(vFrom.x)>Math.abs(vFrom.z)?v1.set(-vFrom.y,vFrom.x,0):v1.set(0,-vFrom.z,vFrom.y)):
v1.crossVectors(vFrom,vTo);this._x=v1.x;this._y=v1.y;this._z=v1.z;this._w=r;return this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){this._x*=-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+
this._w*this._w)},normalize:function(){var l=this.length();0===l?(this._z=this._y=this._x=0,this._w=1):(l=1/l,this._x*=l,this._y*=l,this._z*=l,this._w*=l);this.onChangeCallback();return this},multiply:function(q,p){return void 0!==p?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(q,p)):this.multiplyQuaternions(this,q)},premultiply:function(q){return this.multiplyQuaternions(q,this)},multiplyQuaternions:function(a,
b){var qax=a._x,qay=a._y,qaz=a._z;a=a._w;var qbx=b._x,qby=b._y,qbz=b._z;b=b._w;this._x=qax*b+a*qbx+qay*qbz-qaz*qby;this._y=qay*b+a*qby+qaz*qbx-qax*qbz;this._z=qaz*b+a*qbz+qax*qby-qay*qbx;this._w=a*b-qax*qbx-qay*qby-qaz*qbz;this.onChangeCallback();return this},slerp:function(qb,t){if(0===t)return this;if(1===t)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w,cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;0>cosHalfTheta?(this._w=-qb._w,this._x=-qb._x,this._y=-qb._y,this._z=-qb._z,cosHalfTheta=
-cosHalfTheta):this.copy(qb);if(1<=cosHalfTheta)return this._w=w,this._x=x,this._y=y,this._z=z,this;qb=Math.sqrt(1-cosHalfTheta*cosHalfTheta);if(.001>Math.abs(qb))return this._w=.5*(w+this._w),this._x=.5*(x+this._x),this._y=.5*(y+this._y),this._z=.5*(z+this._z),this;var halfTheta=Math.atan2(qb,cosHalfTheta);cosHalfTheta=Math.sin((1-t)*halfTheta)/qb;t=Math.sin(t*halfTheta)/qb;this._w=w*cosHalfTheta+this._w*t;this._x=x*cosHalfTheta+this._x*t;this._y=y*cosHalfTheta+this._y*t;this._z=z*cosHalfTheta+this._z*
t;this.onChangeCallback();return this},equals:function(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w},fromArray:function(array,offset){void 0===offset&&(offset=0);this._x=array[offset];this._y=array[offset+1];this._z=array[offset+2];this._w=array[offset+3];this.onChangeCallback();return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);array[offset]=this._x;array[offset+1]=this._y;array[offset+
2]=this._z;array[offset+3]=this._w;return array},onChange:function(callback){this.onChangeCallback=callback;return this},onChangeCallback:function(){}};Object.assign(THREE.Quaternion,{slerp:function(qa,qb,qm,t){return qm.copy(qa).slerp(qb,t)},slerpFlat:function(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2];src0=src0[srcOffset0+3];srcOffset0=src1[srcOffset1+0];var y1=src1[srcOffset1+1],z1=src1[srcOffset1+2];src1=src1[srcOffset1+
3];if(src0!==src1||x0!==srcOffset0||y0!==y1||z0!==z1){srcOffset1=1-t;var cos=x0*srcOffset0+y0*y1+z0*z1+src0*src1,dir=0<=cos?1:-1,sqrSin=1-cos*cos;sqrSin>Number.EPSILON&&(sqrSin=Math.sqrt(sqrSin),cos=Math.atan2(sqrSin,cos*dir),srcOffset1=Math.sin(srcOffset1*cos)/sqrSin,t=Math.sin(t*cos)/sqrSin);dir*=t;x0=x0*srcOffset1+srcOffset0*dir;y0=y0*srcOffset1+y1*dir;z0=z0*srcOffset1+z1*dir;src0=src0*srcOffset1+src1*dir;srcOffset1===1-t&&(t=1/Math.sqrt(x0*x0+y0*y0+z0*z0+src0*src0),x0*=t,y0*=t,z0*=t,src0*=t)}dst[dstOffset]=
x0;dst[dstOffset+1]=y0;dst[dstOffset+2]=z0;dst[dstOffset+3]=src0}});THREE.Vector2=function(x,y){this.x=x||0;this.y=y||0};THREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(value){this.x=value},get height(){return this.y},set height(value){this.y=value},set:function(x,y){this.x=x;this.y=y;return this},setScalar:function(scalar){this.y=this.x=scalar;return this},setX:function(x){this.x=x;return this},setY:function(y){this.y=y;return this},setComponent:function(index,
value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw Error("index is out of range: "+index);}},getComponent:function(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+index);}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(v){this.x=v.x;this.y=v.y;return this},add:function(v,w){if(void 0!==w)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
this.addVectors(v,w);this.x+=v.x;this.y+=v.y;return this},addScalar:function(s){this.x+=s;this.y+=s;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScaledVector:function(v,s){this.x+=v.x*s;this.y+=v.y*s;return this},sub:function(v,w){if(void 0!==w)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w);this.x-=v.x;this.y-=v.y;return this},subScalar:function(s){this.x-=s;this.y-=s;return this},
subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(v){this.x*=v.x;this.y*=v.y;return this},multiplyScalar:function(scalar){isFinite(scalar)?(this.x*=scalar,this.y*=scalar):this.y=this.x=0;return this},divide:function(v){this.x/=v.x;this.y/=v.y;return this},divideScalar:function(scalar){return this.multiplyScalar(1/scalar)},min:function(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);return this},max:function(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,
v.y);return this},clamp:function(min,max){this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));return this},clampScalar:function(){var min,max;return function(minVal,maxVal){void 0===min&&(min=new THREE.Vector2,max=new THREE.Vector2);min.set(minVal,minVal);max.set(maxVal,maxVal);return this.clamp(min,max)}}(),clampLength:function(min,max){var length=this.length();return this.multiplyScalar(Math.max(min,Math.min(max,length))/length)},floor:function(){this.x=Math.floor(this.x);
this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(v){return this.x*v.x+this.y*v.y},lengthSq:function(){return this.x*this.x+this.y*this.y},
length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var angle=Math.atan2(this.y,this.x);0>angle&&(angle+=2*Math.PI);return angle},distanceTo:function(v){return Math.sqrt(this.distanceToSquared(v))},distanceToSquared:function(v){var dx=this.x-v.x;v=this.y-v.y;return dx*dx+v*v},setLength:function(length){return this.multiplyScalar(length/this.length())},
lerp:function(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;return this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},equals:function(v){return v.x===this.x&&v.y===this.y},fromArray:function(array,offset){void 0===offset&&(offset=0);this.x=array[offset];this.y=array[offset+1];return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);array[offset]=this.x;array[offset+1]=this.y;return array},
fromAttribute:function(attribute,index,offset){void 0===offset&&(offset=0);index=index*attribute.itemSize+offset;this.x=attribute.array[index];this.y=attribute.array[index+1];return this},rotateAround:function(center,angle){var c=Math.cos(angle);angle=Math.sin(angle);var x=this.x-center.x,y=this.y-center.y;this.x=x*c-y*angle+center.x;this.y=x*angle+y*c+center.y;return this}};THREE.Vector3=function(x,y,z){this.x=x||0;this.y=y||0;this.z=z||0};THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(x,
y,z){this.x=x;this.y=y;this.z=z;return this},setScalar:function(scalar){this.z=this.y=this.x=scalar;return this},setX:function(x){this.x=x;return this},setY:function(y){this.y=y;return this},setZ:function(z){this.z=z;return this},setComponent:function(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw Error("index is out of range: "+index);}},getComponent:function(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;
default:throw Error("index is out of range: "+index);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(v){this.x=v.x;this.y=v.y;this.z=v.z;return this},add:function(v,w){if(void 0!==w)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(v,w);this.x+=v.x;this.y+=v.y;this.z+=v.z;return this},addScalar:function(s){this.x+=s;this.y+=s;this.z+=s;return this},addVectors:function(a,b){this.x=a.x+b.x;
this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;return this},sub:function(v,w){if(void 0!==w)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w);this.x-=v.x;this.y-=v.y;this.z-=v.z;return this},subScalar:function(s){this.x-=s;this.y-=s;this.z-=s;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(v,
w){if(void 0!==w)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(v,w);this.x*=v.x;this.y*=v.y;this.z*=v.z;return this},multiplyScalar:function(scalar){isFinite(scalar)?(this.x*=scalar,this.y*=scalar,this.z*=scalar):this.z=this.y=this.x=0;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var quaternion;return function(euler){!1===euler instanceof
THREE.Euler&&console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");void 0===quaternion&&(quaternion=new THREE.Quaternion);return this.applyQuaternion(quaternion.setFromEuler(euler))}}(),applyAxisAngle:function(){var quaternion;return function(axis,angle){void 0===quaternion&&(quaternion=new THREE.Quaternion);return this.applyQuaternion(quaternion.setFromAxisAngle(axis,angle))}}(),applyMatrix3:function(m){var x=this.x,y=this.y,z=this.z;m=m.elements;
this.x=m[0]*x+m[3]*y+m[6]*z;this.y=m[1]*x+m[4]*y+m[7]*z;this.z=m[2]*x+m[5]*y+m[8]*z;return this},applyMatrix4:function(m){var x=this.x,y=this.y,z=this.z;m=m.elements;this.x=m[0]*x+m[4]*y+m[8]*z+m[12];this.y=m[1]*x+m[5]*y+m[9]*z+m[13];this.z=m[2]*x+m[6]*y+m[10]*z+m[14];return this},applyProjection:function(m){var x=this.x,y=this.y,z=this.z;m=m.elements;var d=1/(m[3]*x+m[7]*y+m[11]*z+m[15]);this.x=(m[0]*x+m[4]*y+m[8]*z+m[12])*d;this.y=(m[1]*x+m[5]*y+m[9]*z+m[13])*d;this.z=(m[2]*x+m[6]*y+m[10]*z+m[14])*
d;return this},applyQuaternion:function(q){var x=this.x,y=this.y,z=this.z,qx=q.x,qy=q.y,qz=q.z;q=q.w;var ix=q*x+qy*z-qz*y,iy=q*y+qz*x-qx*z,iz=q*z+qx*y-qy*x;x=-qx*x-qy*y-qz*z;this.x=ix*q+x*-qx+iy*-qz-iz*-qy;this.y=iy*q+x*-qy+iz*-qx-ix*-qz;this.z=iz*q+x*-qz+ix*-qy-iy*-qx;return this},project:function(){var matrix;return function(camera){void 0===matrix&&(matrix=new THREE.Matrix4);matrix.multiplyMatrices(camera.projectionMatrix,matrix.getInverse(camera.matrixWorld));return this.applyProjection(matrix)}}(),
unproject:function(){var matrix;return function(camera){void 0===matrix&&(matrix=new THREE.Matrix4);matrix.multiplyMatrices(camera.matrixWorld,matrix.getInverse(camera.projectionMatrix));return this.applyProjection(matrix)}}(),transformDirection:function(m){var x=this.x,y=this.y,z=this.z;m=m.elements;this.x=m[0]*x+m[4]*y+m[8]*z;this.y=m[1]*x+m[5]*y+m[9]*z;this.z=m[2]*x+m[6]*y+m[10]*z;return this.normalize()},divide:function(v){this.x/=v.x;this.y/=v.y;this.z/=v.z;return this},divideScalar:function(scalar){return this.multiplyScalar(1/
scalar)},min:function(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);return this},max:function(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);return this},clamp:function(min,max){this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));return this},clampScalar:function(){var min,max;return function(minVal,maxVal){void 0===min&&(min=new THREE.Vector3,
max=new THREE.Vector3);min.set(minVal,minVal,minVal);max.set(maxVal,maxVal,maxVal);return this.clamp(min,max)}}(),clampLength:function(min,max){var length=this.length();return this.multiplyScalar(Math.max(min,Math.min(max,length))/length)},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=
Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(v){return this.x*v.x+this.y*v.y+this.z*v.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+
this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(length){return this.multiplyScalar(length/this.length())},lerp:function(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;return this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},cross:function(v,w){if(void 0!==w)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
this.crossVectors(v,w);w=this.x;var y=this.y,z=this.z;this.x=y*v.z-z*v.y;this.y=z*v.x-w*v.z;this.z=w*v.y-y*v.x;return this},crossVectors:function(a,b){var ax=a.x,ay=a.y;a=a.z;var bx=b.x,by=b.y;b=b.z;this.x=ay*b-a*by;this.y=a*bx-ax*b;this.z=ax*by-ay*bx;return this},projectOnVector:function(){var v1,dot;return function(vector){void 0===v1&&(v1=new THREE.Vector3);v1.copy(vector).normalize();dot=this.dot(v1);return this.copy(v1).multiplyScalar(dot)}}(),projectOnPlane:function(){var v1;return function(planeNormal){void 0===
v1&&(v1=new THREE.Vector3);v1.copy(this).projectOnVector(planeNormal);return this.sub(v1)}}(),reflect:function(){var v1;return function(normal){void 0===v1&&(v1=new THREE.Vector3);return this.sub(v1.copy(normal).multiplyScalar(2*this.dot(normal)))}}(),angleTo:function(v){v=this.dot(v)/Math.sqrt(this.lengthSq()*v.lengthSq());return Math.acos(THREE.Math.clamp(v,-1,1))},distanceTo:function(v){return Math.sqrt(this.distanceToSquared(v))},distanceToSquared:function(v){var dx=this.x-v.x,dy=this.y-v.y;v=
this.z-v.z;return dx*dx+dy*dy+v*v},setFromSpherical:function(s){var sinPhiRadius=Math.sin(s.phi)*s.radius;this.x=sinPhiRadius*Math.sin(s.theta);this.y=Math.cos(s.phi)*s.radius;this.z=sinPhiRadius*Math.cos(s.theta);return this},setFromMatrixPosition:function(m){return this.setFromMatrixColumn(m,3)},setFromMatrixScale:function(m){var sx=this.setFromMatrixColumn(m,0).length(),sy=this.setFromMatrixColumn(m,1).length();m=this.setFromMatrixColumn(m,2).length();this.x=sx;this.y=sy;this.z=m;return this},
setFromMatrixColumn:function(m,index){if("number"===typeof m){console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");var temp=m;m=index;index=temp}return this.fromArray(m.elements,4*index)},equals:function(v){return v.x===this.x&&v.y===this.y&&v.z===this.z},fromArray:function(array,offset){void 0===offset&&(offset=0);this.x=array[offset];this.y=array[offset+1];this.z=array[offset+2];return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&
(offset=0);array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;return array},fromAttribute:function(attribute,index,offset){void 0===offset&&(offset=0);index=index*attribute.itemSize+offset;this.x=attribute.array[index];this.y=attribute.array[index+1];this.z=attribute.array[index+2];return this}};THREE.Vector4=function(x,y,z,w){this.x=x||0;this.y=y||0;this.z=z||0;this.w=void 0!==w?w:1};THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(x,y,z,w){this.x=x;this.y=y;this.z=
z;this.w=w;return this},setScalar:function(scalar){this.w=this.z=this.y=this.x=scalar;return this},setX:function(x){this.x=x;return this},setY:function(y){this.y=y;return this},setZ:function(z){this.z=z;return this},setW:function(w){this.w=w;return this},setComponent:function(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw Error("index is out of range: "+index);}},getComponent:function(index){switch(index){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+index);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(v){this.x=v.x;this.y=v.y;this.z=v.z;this.w=void 0!==v.w?v.w:1;return this},add:function(v,w){if(void 0!==w)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(v,w);this.x+=v.x;this.y+=v.y;this.z+=v.z;this.w+=v.w;return this},
addScalar:function(s){this.x+=s;this.y+=s;this.z+=s;this.w+=s;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(v,s){this.x+=v.x*s;this.y+=v.y*s;this.z+=v.z*s;this.w+=v.w*s;return this},sub:function(v,w){if(void 0!==w)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w);this.x-=v.x;this.y-=v.y;this.z-=v.z;this.w-=v.w;return this},subScalar:function(s){this.x-=
s;this.y-=s;this.z-=s;this.w-=s;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(scalar){isFinite(scalar)?(this.x*=scalar,this.y*=scalar,this.z*=scalar,this.w*=scalar):this.w=this.z=this.y=this.x=0;return this},applyMatrix4:function(m){var x=this.x,y=this.y,z=this.z,w=this.w;m=m.elements;this.x=m[0]*x+m[4]*y+m[8]*z+m[12]*w;this.y=m[1]*x+m[5]*y+m[9]*z+m[13]*w;this.z=m[2]*x+m[6]*y+m[10]*z+m[14]*w;this.w=m[3]*x+m[7]*
y+m[11]*z+m[15]*w;return this},divideScalar:function(scalar){return this.multiplyScalar(1/scalar)},setAxisAngleFromQuaternion:function(q){this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);1E-4>s?(this.x=1,this.z=this.y=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s);return this},setAxisAngleFromRotationMatrix:function(m){m=m.elements;var m11=m[0];var z=m[4];var m13=m[8],m21=m[1],m22=m[5],m23=m[9];var y=m[2];var x=m[6];var m33=m[10];if(.01>Math.abs(z-m21)&&.01>Math.abs(m13-y)&&.01>Math.abs(m23-x)){if(.1>
Math.abs(z+m21)&&.1>Math.abs(m13+y)&&.1>Math.abs(m23+x)&&.1>Math.abs(m11+m22+m33-3))return this.set(1,0,0,0),this;m=Math.PI;m11=(m11+1)/2;m22=(m22+1)/2;m33=(m33+1)/2;z=(z+m21)/4;m13=(m13+y)/4;m23=(m23+x)/4;m11>m22&&m11>m33?.01>m11?(x=0,z=y=.707106781):(x=Math.sqrt(m11),y=z/x,z=m13/x):m22>m33?.01>m22?(x=.707106781,y=0,z=.707106781):(y=Math.sqrt(m22),x=z/y,z=m23/y):.01>m33?(y=x=.707106781,z=0):(z=Math.sqrt(m33),x=m13/z,y=m23/z);this.set(x,y,z,m);return this}m=Math.sqrt((x-m23)*(x-m23)+(m13-y)*(m13-
y)+(m21-z)*(m21-z));.001>Math.abs(m)&&(m=1);this.x=(x-m23)/m;this.y=(m13-y)/m;this.z=(m21-z)/m;this.w=Math.acos((m11+m22+m33-1)/2);return this},min:function(v){this.x=Math.min(this.x,v.x);this.y=Math.min(this.y,v.y);this.z=Math.min(this.z,v.z);this.w=Math.min(this.w,v.w);return this},max:function(v){this.x=Math.max(this.x,v.x);this.y=Math.max(this.y,v.y);this.z=Math.max(this.z,v.z);this.w=Math.max(this.w,v.w);return this},clamp:function(min,max){this.x=Math.max(min.x,Math.min(max.x,this.x));this.y=
Math.max(min.y,Math.min(max.y,this.y));this.z=Math.max(min.z,Math.min(max.z,this.z));this.w=Math.max(min.w,Math.min(max.w,this.w));return this},clampScalar:function(){var min,max;return function(minVal,maxVal){void 0===min&&(min=new THREE.Vector4,max=new THREE.Vector4);min.set(minVal,minVal,minVal,minVal);max.set(maxVal,maxVal,maxVal,maxVal);return this.clamp(min,max)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},
ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},
negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(length){return this.multiplyScalar(length/this.length())},lerp:function(v,alpha){this.x+=(v.x-this.x)*alpha;this.y+=(v.y-this.y)*alpha;this.z+=(v.z-this.z)*alpha;this.w+=(v.w-this.w)*alpha;return this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},equals:function(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w},fromArray:function(array,offset){void 0===offset&&(offset=0);this.x=array[offset];this.y=array[offset+1];
this.z=array[offset+2];this.w=array[offset+3];return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);array[offset]=this.x;array[offset+1]=this.y;array[offset+2]=this.z;array[offset+3]=this.w;return array},fromAttribute:function(attribute,index,offset){void 0===offset&&(offset=0);index=index*attribute.itemSize+offset;this.x=attribute.array[index];this.y=attribute.array[index+1];this.z=attribute.array[index+2];this.w=attribute.array[index+3];return this}};
THREE.Euler=function(x,y,z,order){this._x=x||0;this._y=y||0;this._z=z||0;this._order=order||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";THREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(value){this._x=value;this.onChangeCallback()},get y(){return this._y},set y(value){this._y=value;this.onChangeCallback()},get z(){return this._z},set z(value){this._z=value;this.onChangeCallback()},get order(){return this._order},
set order(value){this._order=value;this.onChangeCallback()},set:function(x,y,z,order){this._x=x;this._y=y;this._z=z;this._order=order||this._order;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(euler){this._x=euler._x;this._y=euler._y;this._z=euler._z;this._order=euler._order;this.onChangeCallback();return this},setFromRotationMatrix:function(m,order,update){var clamp=THREE.Math.clamp,te=m.elements;m=te[0];var m12=
te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6];te=te[10];order=order||this._order;"XYZ"===order?(this._y=Math.asin(clamp(m13,-1,1)),.99999>Math.abs(m13)?(this._x=Math.atan2(-m23,te),this._z=Math.atan2(-m12,m)):(this._x=Math.atan2(m32,m22),this._z=0)):"YXZ"===order?(this._x=Math.asin(-clamp(m23,-1,1)),.99999>Math.abs(m23)?(this._y=Math.atan2(m13,te),this._z=Math.atan2(m21,m22)):(this._y=Math.atan2(-m31,m),this._z=0)):"ZXY"===order?(this._x=Math.asin(clamp(m32,-1,1)),.99999>Math.abs(m32)?
(this._y=Math.atan2(-m31,te),this._z=Math.atan2(-m12,m22)):(this._y=0,this._z=Math.atan2(m21,m))):"ZYX"===order?(this._y=Math.asin(-clamp(m31,-1,1)),.99999>Math.abs(m31)?(this._x=Math.atan2(m32,te),this._z=Math.atan2(m21,m)):(this._x=0,this._z=Math.atan2(-m12,m22))):"YZX"===order?(this._z=Math.asin(clamp(m21,-1,1)),.99999>Math.abs(m21)?(this._x=Math.atan2(-m23,m22),this._y=Math.atan2(-m31,m)):(this._x=0,this._y=Math.atan2(m13,te))):"XZY"===order?(this._z=Math.asin(-clamp(m12,-1,1)),.99999>Math.abs(m12)?
(this._x=Math.atan2(m32,m22),this._y=Math.atan2(m13,m)):(this._x=Math.atan2(-m23,te),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+order);this._order=order;if(!1!==update)this.onChangeCallback();return this},setFromQuaternion:function(){var matrix;return function(q,order,update){void 0===matrix&&(matrix=new THREE.Matrix4);matrix.makeRotationFromQuaternion(q);return this.setFromRotationMatrix(matrix,order,update)}}(),setFromVector3:function(v,order){return this.set(v.x,
v.y,v.z,order||this._order)},reorder:function(){var q=new THREE.Quaternion;return function(newOrder){q.setFromEuler(this);return this.setFromQuaternion(q,newOrder)}}(),equals:function(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order},fromArray:function(array){this._x=array[0];this._y=array[1];this._z=array[2];void 0!==array[3]&&(this._order=array[3]);this.onChangeCallback();return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===
offset&&(offset=0);array[offset]=this._x;array[offset+1]=this._y;array[offset+2]=this._z;array[offset+3]=this._order;return array},toVector3:function(optionalResult){return optionalResult?optionalResult.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(callback){this.onChangeCallback=callback;return this},onChangeCallback:function(){}};THREE.Line3=function(start,end){this.start=void 0!==start?start:new THREE.Vector3;this.end=void 0!==end?end:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(start,end){this.start.copy(start);this.end.copy(end);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(line){this.start.copy(line.start);this.end.copy(line.end);return this},center:function(optionalTarget){return(optionalTarget||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(optionalTarget){return(optionalTarget||new THREE.Vector3).subVectors(this.end,this.start)},
distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;return this.delta(optionalTarget).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(){var startP=new THREE.Vector3,startEnd=new THREE.Vector3;return function(point,clampToLine){startP.subVectors(point,this.start);startEnd.subVectors(this.end,this.start);point=startEnd.dot(startEnd);
point=startEnd.dot(startP)/point;clampToLine&&(point=THREE.Math.clamp(point,0,1));return point}}(),closestPointToPoint:function(point,clampToLine,optionalTarget){point=this.closestPointToPointParameter(point,clampToLine);optionalTarget=optionalTarget||new THREE.Vector3;return this.delta(optionalTarget).multiplyScalar(point).add(this.start)},applyMatrix4:function(matrix){this.start.applyMatrix4(matrix);this.end.applyMatrix4(matrix);return this},equals:function(line){return line.start.equals(this.start)&&
line.end.equals(this.end)}};THREE.Box2=function(min,max){this.min=void 0!==min?min:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==max?max:new THREE.Vector2(-Infinity,-Infinity)};THREE.Box2.prototype={constructor:THREE.Box2,set:function(min,max){this.min.copy(min);this.max.copy(max);return this},setFromPoints:function(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++)this.expandByPoint(points[i]);return this},setFromCenterAndSize:function(){var v1=new THREE.Vector2;return function(center,
size){size=v1.copy(size).multiplyScalar(.5);this.min.copy(center).sub(size);this.max.copy(center).add(size);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(box){this.min.copy(box.min);this.max.copy(box.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(optionalTarget){return(optionalTarget||new THREE.Vector2).addVectors(this.min,
this.max).multiplyScalar(.5)},size:function(optionalTarget){return(optionalTarget||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(point){this.min.min(point);this.max.max(point);return this},expandByVector:function(vector){this.min.sub(vector);this.max.add(vector);return this},expandByScalar:function(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this},containsPoint:function(point){return point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>
this.max.y?!1:!0},containsBox:function(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y?!0:!1},getParameter:function(point,optionalTarget){return(optionalTarget||new THREE.Vector2).set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(box){return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y?!1:!0},clampPoint:function(point,optionalTarget){return(optionalTarget||
new THREE.Vector2).copy(point).clamp(this.min,this.max)},distanceToPoint:function(){var v1=new THREE.Vector2;return function(point){return v1.copy(point).clamp(this.min,this.max).sub(point).length()}}(),intersect:function(box){this.min.max(box.min);this.max.min(box.max);return this},union:function(box){this.min.min(box.min);this.max.max(box.max);return this},translate:function(offset){this.min.add(offset);this.max.add(offset);return this},equals:function(box){return box.min.equals(this.min)&&box.max.equals(this.max)}};
THREE.Box3=function(min,max){this.min=void 0!==min?min:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==max?max:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};THREE.Box3.prototype={constructor:THREE.Box3,set:function(min,max){this.min.copy(min);this.max.copy(max);return this},setFromArray:function(array){for(var minX=Infinity,minY=Infinity,minZ=Infinity,maxX=-Infinity,maxY=-Infinity,maxZ=-Infinity,i=0,l=array.length;i<l;i+=3){var x=array[i],y=array[i+1],z=array[i+2];x<minX&&(minX=
x);y<minY&&(minY=y);z<minZ&&(minZ=z);x>maxX&&(maxX=x);y>maxY&&(maxY=y);z>maxZ&&(maxZ=z)}this.min.set(minX,minY,minZ);this.max.set(maxX,maxY,maxZ)},setFromPoints:function(points){this.makeEmpty();for(var i=0,il=points.length;i<il;i++)this.expandByPoint(points[i]);return this},setFromCenterAndSize:function(){var v1=new THREE.Vector3;return function(center,size){size=v1.copy(size).multiplyScalar(.5);this.min.copy(center).sub(size);this.max.copy(center).add(size);return this}}(),setFromObject:function(){var v1=
new THREE.Vector3;return function(object){var scope=this;object.updateMatrixWorld(!0);this.makeEmpty();object.traverse(function(node){var geometry=node.geometry;if(void 0!==geometry)if(geometry instanceof THREE.Geometry){var vertices=geometry.vertices;geometry=0;for(var il=vertices.length;geometry<il;geometry++)v1.copy(vertices[geometry]),v1.applyMatrix4(node.matrixWorld),scope.expandByPoint(v1)}else if(geometry instanceof THREE.BufferGeometry&&void 0!==geometry.attributes.position)for(vertices=geometry.attributes.position.array,
geometry=0,il=vertices.length;geometry<il;geometry+=3)v1.fromArray(vertices,geometry),v1.applyMatrix4(node.matrixWorld),scope.expandByPoint(v1)});return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(box){this.min.copy(box.min);this.max.copy(box.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},
center:function(optionalTarget){return(optionalTarget||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(optionalTarget){return(optionalTarget||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(point){this.min.min(point);this.max.max(point);return this},expandByVector:function(vector){this.min.sub(vector);this.max.add(vector);return this},expandByScalar:function(scalar){this.min.addScalar(-scalar);this.max.addScalar(scalar);return this},containsPoint:function(point){return point.x<
this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z?!1:!0},containsBox:function(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z?!0:!1},getParameter:function(point,optionalTarget){return(optionalTarget||new THREE.Vector3).set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-
this.min.z))},intersectsBox:function(box){return box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z?!1:!0},intersectsSphere:function(){var closestPoint;return function(sphere){void 0===closestPoint&&(closestPoint=new THREE.Vector3);this.clampPoint(sphere.center,closestPoint);return closestPoint.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius}}(),intersectsPlane:function(plane){if(0<plane.normal.x){var min=
plane.normal.x*this.min.x;var max=plane.normal.x*this.max.x}else min=plane.normal.x*this.max.x,max=plane.normal.x*this.min.x;0<plane.normal.y?(min+=plane.normal.y*this.min.y,max+=plane.normal.y*this.max.y):(min+=plane.normal.y*this.max.y,max+=plane.normal.y*this.min.y);0<plane.normal.z?(min+=plane.normal.z*this.min.z,max+=plane.normal.z*this.max.z):(min+=plane.normal.z*this.max.z,max+=plane.normal.z*this.min.z);return min<=plane.constant&&max>=plane.constant},clampPoint:function(point,optionalTarget){return(optionalTarget||
new THREE.Vector3).copy(point).clamp(this.min,this.max)},distanceToPoint:function(){var v1=new THREE.Vector3;return function(point){return v1.copy(point).clamp(this.min,this.max).sub(point).length()}}(),getBoundingSphere:function(){var v1=new THREE.Vector3;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Sphere;optionalTarget.center=this.center();optionalTarget.radius=.5*this.size(v1).length();return optionalTarget}}(),intersect:function(box){this.min.max(box.min);this.max.min(box.max);
this.isEmpty()&&this.makeEmpty();return this},union:function(box){this.min.min(box.min);this.max.max(box.max);return this},applyMatrix4:function(){var points=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(matrix){if(this.isEmpty())return this;points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix);points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix);points[2].set(this.min.x,
this.max.y,this.min.z).applyMatrix4(matrix);points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix);points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix);points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix);points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix);points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix);this.setFromPoints(points);return this}}(),translate:function(offset){this.min.add(offset);this.max.add(offset);
return this},equals:function(box){return box.min.equals(this.min)&&box.max.equals(this.max)}};THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]);0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")};THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;te[0]=n11;te[1]=n21;te[2]=n31;te[3]=n12;te[4]=n22;te[5]=n32;te[6]=n13;te[7]=n23;te[8]=n33;return this},
identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(m){m=m.elements;this.set(m[0],m[3],m[6],m[1],m[4],m[7],m[2],m[5],m[8]);return this},setFromMatrix4:function(m){m=m.elements;this.set(m[0],m[4],m[8],m[1],m[5],m[9],m[2],m[6],m[10]);return this},applyToVector3Array:function(){var v1;return function(array,offset,length){void 0===v1&&(v1=new THREE.Vector3);void 0===offset&&(offset=0);void 0===length&&(length=
array.length);for(var i=0;i<length;i+=3,offset+=3)v1.fromArray(array,offset),v1.applyMatrix3(this),v1.toArray(array,offset);return array}}(),applyToBuffer:function(){var v1;return function(buffer,offset,length){void 0===v1&&(v1=new THREE.Vector3);void 0===offset&&(offset=0);void 0===length&&(length=buffer.length/buffer.itemSize);for(var i=0;i<length;i++,offset++)v1.x=buffer.getX(offset),v1.y=buffer.getY(offset),v1.z=buffer.getZ(offset),v1.applyMatrix3(this),buffer.setXYZ(v1.x,v1.y,v1.z);return buffer}}(),
multiplyScalar:function(s){var te=this.elements;te[0]*=s;te[3]*=s;te[6]*=s;te[1]*=s;te[4]*=s;te[7]*=s;te[2]*=s;te[5]*=s;te[8]*=s;return this},determinant:function(){var te=this.elements,a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7];te=te[8];return a*e*te-a*f*h-b*d*te+b*f*g+c*d*h-c*e*g},getInverse:function(matrix,throwOnDegenerate){matrix instanceof THREE.Matrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var me=matrix.elements;matrix=this.elements;
var n11=me[0],n21=me[1],n31=me[2],n12=me[3],n22=me[4],n32=me[5],n13=me[6],n23=me[7];me=me[8];var t11=me*n22-n32*n23,t12=n32*n13-me*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(0===det){if(throwOnDegenerate)throw Error("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0");return this.identity()}throwOnDegenerate=1/det;matrix[0]=t11*throwOnDegenerate;matrix[1]=(n31*n23-me*n21)*throwOnDegenerate;
matrix[2]=(n32*n21-n31*n22)*throwOnDegenerate;matrix[3]=t12*throwOnDegenerate;matrix[4]=(me*n11-n31*n13)*throwOnDegenerate;matrix[5]=(n31*n12-n32*n11)*throwOnDegenerate;matrix[6]=t13*throwOnDegenerate;matrix[7]=(n21*n13-n23*n11)*throwOnDegenerate;matrix[8]=(n22*n11-n21*n12)*throwOnDegenerate;return this},transpose:function(){var m=this.elements;var tmp=m[1];m[1]=m[3];m[3]=tmp;tmp=m[2];m[2]=m[6];m[6]=tmp;tmp=m[5];m[5]=m[7];m[7]=tmp;return this},flattenToArrayOffset:function(array,offset){console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.");
return this.toArray(array,offset)},getNormalMatrix:function(matrix4){return this.setFromMatrix4(matrix4).getInverse(this).transpose()},transposeIntoArray:function(r){var m=this.elements;r[0]=m[0];r[1]=m[3];r[2]=m[6];r[3]=m[1];r[4]=m[4];r[5]=m[7];r[6]=m[2];r[7]=m[5];r[8]=m[8];return this},fromArray:function(array){this.elements.set(array);return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];
array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];return array}};THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")};THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=
this.elements;te[0]=n11;te[4]=n12;te[8]=n13;te[12]=n14;te[1]=n21;te[5]=n22;te[9]=n23;te[13]=n24;te[2]=n31;te[6]=n32;te[10]=n33;te[14]=n34;te[3]=n41;te[7]=n42;te[11]=n43;te[15]=n44;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(m){this.elements.set(m.elements);return this},copyPosition:function(m){var te=this.elements;m=m.elements;te[12]=m[12];te[13]=m[13];te[14]=m[14];return this},
extractBasis:function(xAxis,yAxis,zAxis){xAxis.setFromMatrixColumn(this,0);yAxis.setFromMatrixColumn(this,1);zAxis.setFromMatrixColumn(this,2);return this},makeBasis:function(xAxis,yAxis,zAxis){this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1);return this},extractRotation:function(){var v1;return function(m){void 0===v1&&(v1=new THREE.Vector3);var te=this.elements,me=m.elements,scaleX=1/v1.setFromMatrixColumn(m,0).length(),scaleY=1/v1.setFromMatrixColumn(m,
1).length();m=1/v1.setFromMatrixColumn(m,2).length();te[0]=me[0]*scaleX;te[1]=me[1]*scaleX;te[2]=me[2]*scaleX;te[4]=me[4]*scaleY;te[5]=me[5]*scaleY;te[6]=me[6]*scaleY;te[8]=me[8]*m;te[9]=me[9]*m;te[10]=me[10]*m;return this}}(),makeRotationFromEuler:function(euler){!1===euler instanceof THREE.Euler&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var te=this.elements,x=euler.x,y=euler.y,z=euler.z,a=Math.cos(x);x=Math.sin(x);var c=
Math.cos(y);y=Math.sin(y);var e=Math.cos(z);z=Math.sin(z);if("XYZ"===euler.order){euler=a*e;var af=a*z,be=x*e,bf=x*z;te[0]=c*e;te[4]=-c*z;te[8]=y;te[1]=af+be*y;te[5]=euler-bf*y;te[9]=-x*c;te[2]=bf-euler*y;te[6]=be+af*y;te[10]=a*c}else"YXZ"===euler.order?(euler=c*e,af=c*z,be=y*e,bf=y*z,te[0]=euler+bf*x,te[4]=be*x-af,te[8]=a*y,te[1]=a*z,te[5]=a*e,te[9]=-x,te[2]=af*x-be,te[6]=bf+euler*x,te[10]=a*c):"ZXY"===euler.order?(euler=c*e,af=c*z,be=y*e,bf=y*z,te[0]=euler-bf*x,te[4]=-a*z,te[8]=be+af*x,te[1]=af+
be*x,te[5]=a*e,te[9]=bf-euler*x,te[2]=-a*y,te[6]=x,te[10]=a*c):"ZYX"===euler.order?(euler=a*e,af=a*z,be=x*e,bf=x*z,te[0]=c*e,te[4]=be*y-af,te[8]=euler*y+bf,te[1]=c*z,te[5]=bf*y+euler,te[9]=af*y-be,te[2]=-y,te[6]=x*c,te[10]=a*c):"YZX"===euler.order?(euler=a*c,af=a*y,be=x*c,bf=x*y,te[0]=c*e,te[4]=bf-euler*z,te[8]=be*z+af,te[1]=z,te[5]=a*e,te[9]=-x*e,te[2]=-y*e,te[6]=af*z+be,te[10]=euler-bf*z):"XZY"===euler.order&&(euler=a*c,af=a*y,be=x*c,bf=x*y,te[0]=c*e,te[4]=-z,te[8]=y*e,te[1]=euler*z+bf,te[5]=a*
e,te[9]=af*z-be,te[2]=be*z-af,te[6]=x*e,te[10]=bf*z+euler);te[3]=0;te[7]=0;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this},makeRotationFromQuaternion:function(q){var te=this.elements,x=q.x,y=q.y,z=q.z,w=q.w,x2=x+x,y2=y+y,z2=z+z;q=x*x2;var xy=x*y2;x*=z2;var yy=y*y2;y*=z2;z*=z2;x2*=w;y2*=w;w*=z2;te[0]=1-(yy+z);te[4]=xy-w;te[8]=x+y2;te[1]=xy+w;te[5]=1-(q+z);te[9]=y-x2;te[2]=x-y2;te[6]=y+x2;te[10]=1-(q+yy);te[3]=0;te[7]=0;te[11]=0;te[12]=0;te[13]=0;te[14]=0;te[15]=1;return this},lookAt:function(){var x,
y,z;return function(eye,target,up){void 0===x&&(x=new THREE.Vector3,y=new THREE.Vector3,z=new THREE.Vector3);var te=this.elements;z.subVectors(eye,target).normalize();0===z.lengthSq()&&(z.z=1);x.crossVectors(up,z).normalize();0===x.lengthSq()&&(z.z+=1E-4,x.crossVectors(up,z).normalize());y.crossVectors(z,x);te[0]=x.x;te[4]=y.x;te[8]=z.x;te[1]=x.y;te[5]=y.y;te[9]=z.y;te[2]=x.z;te[6]=y.z;te[10]=z.z;return this}}(),multiply:function(m,n){return void 0!==n?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
this.multiplyMatrices(m,n)):this.multiplyMatrices(this,m)},premultiply:function(m){return this.multiplyMatrices(m,this)},multiplyMatrices:function(a,b){var ae=a.elements,be=b.elements;b=this.elements;a=ae[0];var a12=ae[4],a13=ae[8],a14=ae[12],a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13],a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14],a41=ae[3],a42=ae[7],a43=ae[11];ae=ae[15];var b11=be[0],b12=be[4],b13=be[8],b14=be[12],b21=be[1],b22=be[5],b23=be[9],b24=be[13],b31=be[2],b32=be[6],b33=be[10],b34=be[14],b41=be[3],
b42=be[7],b43=be[11];be=be[15];b[0]=a*b11+a12*b21+a13*b31+a14*b41;b[4]=a*b12+a12*b22+a13*b32+a14*b42;b[8]=a*b13+a12*b23+a13*b33+a14*b43;b[12]=a*b14+a12*b24+a13*b34+a14*be;b[1]=a21*b11+a22*b21+a23*b31+a24*b41;b[5]=a21*b12+a22*b22+a23*b32+a24*b42;b[9]=a21*b13+a22*b23+a23*b33+a24*b43;b[13]=a21*b14+a22*b24+a23*b34+a24*be;b[2]=a31*b11+a32*b21+a33*b31+a34*b41;b[6]=a31*b12+a32*b22+a33*b32+a34*b42;b[10]=a31*b13+a32*b23+a33*b33+a34*b43;b[14]=a31*b14+a32*b24+a33*b34+a34*be;b[3]=a41*b11+a42*b21+a43*b31+ae*b41;
b[7]=a41*b12+a42*b22+a43*b32+ae*b42;b[11]=a41*b13+a42*b23+a43*b33+ae*b43;b[15]=a41*b14+a42*b24+a43*b34+ae*be;return this},multiplyToArray:function(a,b,r){var te=this.elements;this.multiplyMatrices(a,b);r[0]=te[0];r[1]=te[1];r[2]=te[2];r[3]=te[3];r[4]=te[4];r[5]=te[5];r[6]=te[6];r[7]=te[7];r[8]=te[8];r[9]=te[9];r[10]=te[10];r[11]=te[11];r[12]=te[12];r[13]=te[13];r[14]=te[14];r[15]=te[15];return this},multiplyScalar:function(s){var te=this.elements;te[0]*=s;te[4]*=s;te[8]*=s;te[12]*=s;te[1]*=s;te[5]*=
s;te[9]*=s;te[13]*=s;te[2]*=s;te[6]*=s;te[10]*=s;te[14]*=s;te[3]*=s;te[7]*=s;te[11]*=s;te[15]*=s;return this},applyToVector3Array:function(){var v1;return function(array,offset,length){void 0===v1&&(v1=new THREE.Vector3);void 0===offset&&(offset=0);void 0===length&&(length=array.length);for(var i=0;i<length;i+=3,offset+=3)v1.fromArray(array,offset),v1.applyMatrix4(this),v1.toArray(array,offset);return array}}(),applyToBuffer:function(){var v1;return function(buffer,offset,length){void 0===v1&&(v1=
new THREE.Vector3);void 0===offset&&(offset=0);void 0===length&&(length=buffer.length/buffer.itemSize);for(var i=0;i<length;i++,offset++)v1.x=buffer.getX(offset),v1.y=buffer.getY(offset),v1.z=buffer.getZ(offset),v1.applyMatrix4(this),buffer.setXYZ(v1.x,v1.y,v1.z);return buffer}}(),determinant:function(){var te=this.elements,n11=te[0],n12=te[4],n13=te[8],n14=te[12],n21=te[1],n22=te[5],n23=te[9],n24=te[13],n31=te[2],n32=te[6],n33=te[10],n34=te[14];return te[3]*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+
n12*n24*n33+n13*n22*n34-n12*n23*n34)+te[7]*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+te[11]*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+te[15]*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31)},transpose:function(){var te=this.elements;var tmp=te[1];te[1]=te[4];te[4]=tmp;tmp=te[2];te[2]=te[8];te[8]=tmp;tmp=te[6];te[6]=te[9];te[9]=tmp;tmp=te[3];te[3]=te[12];te[12]=tmp;tmp=te[7];te[7]=te[13];te[13]=tmp;tmp=te[11];
te[11]=te[14];te[14]=tmp;return this},flattenToArrayOffset:function(array,offset){console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead.");return this.toArray(array,offset)},getPosition:function(){var v1;return function(){void 0===v1&&(v1=new THREE.Vector3);console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return v1.setFromMatrixColumn(this,3)}}(),setPosition:function(v){var te=this.elements;
te[12]=v.x;te[13]=v.y;te[14]=v.z;return this},getInverse:function(m,throwOnDegenerate){var te=this.elements,me=m.elements;m=me[0];var n21=me[1],n31=me[2],n41=me[3],n12=me[4],n22=me[5],n32=me[6],n42=me[7],n13=me[8],n23=me[9],n33=me[10],n43=me[11],n14=me[12],n24=me[13],n34=me[14];me=me[15];var t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*me+n22*n33*me,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*me-n12*n33*me,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*
me+n12*n23*me,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34,det=m*t11+n21*t12+n31*t13+n41*t14;if(0===det){if(throwOnDegenerate)throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");return this.identity()}throwOnDegenerate=1/det;te[0]=t11*throwOnDegenerate;te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*me-n21*n33*me)*throwOnDegenerate;te[2]=(n22*
n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*me+n21*n32*me)*throwOnDegenerate;te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*throwOnDegenerate;te[4]=t12*throwOnDegenerate;te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-m*n34*n43-n13*n31*me+m*n33*me)*throwOnDegenerate;te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+m*n34*n42+n12*n31*me-m*n32*me)*throwOnDegenerate;te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-m*n33*n42-n12*n31*n43+m*n32*n43)*throwOnDegenerate;te[8]=t13*throwOnDegenerate;
te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+m*n24*n43+n13*n21*me-m*n23*me)*throwOnDegenerate;te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-m*n24*n42-n12*n21*me+m*n22*me)*throwOnDegenerate;te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+m*n23*n42+n12*n21*n43-m*n22*n43)*throwOnDegenerate;te[12]=t14*throwOnDegenerate;te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-m*n24*n33-n13*n21*n34+m*n23*n34)*throwOnDegenerate;te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+m*n24*n32+n12*n21*n34-m*n22*n34)*throwOnDegenerate;te[15]=
(n12*n23*n31-n13*n22*n31+n13*n21*n32-m*n23*n32-n12*n21*n33+m*n22*n33)*throwOnDegenerate;return this},scale:function(v){var te=this.elements,x=v.x,y=v.y;v=v.z;te[0]*=x;te[4]*=y;te[8]*=v;te[1]*=x;te[5]*=y;te[9]*=v;te[2]*=x;te[6]*=y;te[10]*=v;te[3]*=x;te[7]*=y;te[11]*=v;return this},getMaxScaleOnAxis:function(){var te=this.elements;return Math.sqrt(Math.max(te[0]*te[0]+te[1]*te[1]+te[2]*te[2],te[4]*te[4]+te[5]*te[5]+te[6]*te[6],te[8]*te[8]+te[9]*te[9]+te[10]*te[10]))},makeTranslation:function(x,y,z){this.set(1,
0,0,x,0,1,0,y,0,0,1,z,0,0,0,1);return this},makeRotationX:function(theta){var c=Math.cos(theta);theta=Math.sin(theta);this.set(1,0,0,0,0,c,-theta,0,0,theta,c,0,0,0,0,1);return this},makeRotationY:function(theta){var c=Math.cos(theta);theta=Math.sin(theta);this.set(c,0,theta,0,0,1,0,0,-theta,0,c,0,0,0,0,1);return this},makeRotationZ:function(theta){var c=Math.cos(theta);theta=Math.sin(theta);this.set(c,-theta,0,0,theta,c,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(axis,angle){var c=
Math.cos(angle);angle=Math.sin(angle);var t=1-c,x=axis.x,y=axis.y;axis=axis.z;var tx=t*x,ty=t*y;this.set(tx*x+c,tx*y-angle*axis,tx*axis+angle*y,0,tx*y+angle*axis,ty*y+c,ty*axis-angle*x,0,tx*axis-angle*y,ty*axis+angle*x,t*axis*axis+c,0,0,0,0,1);return this},makeScale:function(x,y,z){this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1);return this},compose:function(position,quaternion,scale){this.makeRotationFromQuaternion(quaternion);this.scale(scale);this.setPosition(position);return this},decompose:function(){var vector,
matrix;return function(position,quaternion,scale){void 0===vector&&(vector=new THREE.Vector3,matrix=new THREE.Matrix4);var te=this.elements,sx=vector.set(te[0],te[1],te[2]).length(),sy=vector.set(te[4],te[5],te[6]).length(),sz=vector.set(te[8],te[9],te[10]).length();0>this.determinant()&&(sx=-sx);position.x=te[12];position.y=te[13];position.z=te[14];matrix.elements.set(this.elements);position=1/sx;te=1/sy;var invSZ=1/sz;matrix.elements[0]*=position;matrix.elements[1]*=position;matrix.elements[2]*=
position;matrix.elements[4]*=te;matrix.elements[5]*=te;matrix.elements[6]*=te;matrix.elements[8]*=invSZ;matrix.elements[9]*=invSZ;matrix.elements[10]*=invSZ;quaternion.setFromRotationMatrix(matrix);scale.x=sx;scale.y=sy;scale.z=sz;return this}}(),makeFrustum:function(left,right,bottom,top,near,far){var te=this.elements;te[0]=2*near/(right-left);te[4]=0;te[8]=(right+left)/(right-left);te[12]=0;te[1]=0;te[5]=2*near/(top-bottom);te[9]=(top+bottom)/(top-bottom);te[13]=0;te[2]=0;te[6]=0;te[10]=-(far+near)/
(far-near);te[14]=-2*far*near/(far-near);te[3]=0;te[7]=0;te[11]=-1;te[15]=0;return this},makePerspective:function(fov,aspect,near,far){fov=near*Math.tan(THREE.Math.DEG2RAD*fov*.5);var ymin=-fov;return this.makeFrustum(ymin*aspect,fov*aspect,ymin,fov,near,far)},makeOrthographic:function(left,right,top,bottom,near,far){var te=this.elements,w=1/(right-left),h=1/(top-bottom),p=1/(far-near);te[0]=2*w;te[4]=0;te[8]=0;te[12]=-((right+left)*w);te[1]=0;te[5]=2*h;te[9]=0;te[13]=-((top+bottom)*h);te[2]=0;te[6]=
0;te[10]=-2*p;te[14]=-((far+near)*p);te[3]=0;te[7]=0;te[11]=0;te[15]=1;return this},equals:function(matrix){var te=this.elements;matrix=matrix.elements;for(var i=0;16>i;i++)if(te[i]!==matrix[i])return!1;return!0},fromArray:function(array){this.elements.set(array);return this},toArray:function(array,offset){void 0===array&&(array=[]);void 0===offset&&(offset=0);var te=this.elements;array[offset]=te[0];array[offset+1]=te[1];array[offset+2]=te[2];array[offset+3]=te[3];array[offset+4]=te[4];array[offset+
5]=te[5];array[offset+6]=te[6];array[offset+7]=te[7];array[offset+8]=te[8];array[offset+9]=te[9];array[offset+10]=te[10];array[offset+11]=te[11];array[offset+12]=te[12];array[offset+13]=te[13];array[offset+14]=te[14];array[offset+15]=te[15];return array}};THREE.Ray=function(origin,direction){this.origin=void 0!==origin?origin:new THREE.Vector3;this.direction=void 0!==direction?direction:new THREE.Vector3};THREE.Ray.prototype={constructor:THREE.Ray,set:function(origin,direction){this.origin.copy(origin);
this.direction.copy(direction);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(ray){this.origin.copy(ray.origin);this.direction.copy(ray.direction);return this},at:function(t,optionalTarget){return(optionalTarget||new THREE.Vector3).copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(v){this.direction.copy(v).sub(this.origin).normalize();return this},recast:function(){var v1=new THREE.Vector3;return function(t){this.origin.copy(this.at(t,v1));
return this}}(),closestPointToPoint:function(point,optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;optionalTarget.subVectors(point,this.origin);point=optionalTarget.dot(this.direction);return 0>point?optionalTarget.copy(this.origin):optionalTarget.copy(this.direction).multiplyScalar(point).add(this.origin)},distanceToPoint:function(point){return Math.sqrt(this.distanceSqToPoint(point))},distanceSqToPoint:function(){var v1=new THREE.Vector3;return function(point){var directionDistance=
v1.subVectors(point,this.origin).dot(this.direction);if(0>directionDistance)return this.origin.distanceToSquared(point);v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);return v1.distanceToSquared(point)}}(),distanceSqToSegment:function(){var segCenter=new THREE.Vector3,segDir=new THREE.Vector3,diff=new THREE.Vector3;return function(v0,v1,optionalPointOnRay,optionalPointOnSegment){segCenter.copy(v0).add(v1).multiplyScalar(.5);segDir.copy(v1).sub(v0).normalize();diff.copy(this.origin).sub(segCenter);
var segExtent=.5*v0.distanceTo(v1),a01=-this.direction.dot(segDir),b0=diff.dot(this.direction),b1=-diff.dot(segDir),c=diff.lengthSq(),det=Math.abs(1-a01*a01);if(0<det){v0=a01*b1-b0;v1=a01*b0-b1;var extDet=segExtent*det;0<=v0?v1>=-extDet?v1<=extDet?(segExtent=1/det,v0*=segExtent,v1*=segExtent,a01=v0*(v0+a01*v1+2*b0)+v1*(a01*v0+v1+2*b1)+c):(v1=segExtent,v0=Math.max(0,-(a01*v1+b0)),a01=-v0*v0+v1*(v1+2*b1)+c):(v1=-segExtent,v0=Math.max(0,-(a01*v1+b0)),a01=-v0*v0+v1*(v1+2*b1)+c):v1<=-extDet?(v0=Math.max(0,
-(-a01*segExtent+b0)),v1=0<v0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),a01=-v0*v0+v1*(v1+2*b1)+c):v1<=extDet?(v0=0,v1=Math.min(Math.max(-segExtent,-b1),segExtent),a01=v1*(v1+2*b1)+c):(v0=Math.max(0,-(a01*segExtent+b0)),v1=0<v0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),a01=-v0*v0+v1*(v1+2*b1)+c)}else v1=0<a01?-segExtent:segExtent,v0=Math.max(0,-(a01*v1+b0)),a01=-v0*v0+v1*(v1+2*b1)+c;optionalPointOnRay&&optionalPointOnRay.copy(this.direction).multiplyScalar(v0).add(this.origin);
optionalPointOnSegment&&optionalPointOnSegment.copy(segDir).multiplyScalar(v1).add(segCenter);return a01}}(),intersectSphere:function(){var v1=new THREE.Vector3;return function(sphere,optionalTarget){v1.subVectors(sphere.center,this.origin);var tca=v1.dot(this.direction),d2=v1.dot(v1)-tca*tca;sphere=sphere.radius*sphere.radius;if(d2>sphere)return null;sphere=Math.sqrt(sphere-d2);d2=tca-sphere;tca+=sphere;return 0>d2&&0>tca?null:0>d2?this.at(tca,optionalTarget):this.at(d2,optionalTarget)}}(),intersectsSphere:function(sphere){return this.distanceToPoint(sphere.center)<=
sphere.radius},distanceToPlane:function(plane){var denominator=plane.normal.dot(this.direction);if(0===denominator)return 0===plane.distanceToPoint(this.origin)?0:null;plane=-(this.origin.dot(plane.normal)+plane.constant)/denominator;return 0<=plane?plane:null},intersectPlane:function(plane,optionalTarget){plane=this.distanceToPlane(plane);return null===plane?null:this.at(plane,optionalTarget)},intersectsPlane:function(plane){var distToPoint=plane.distanceToPoint(this.origin);return 0===distToPoint||
0>plane.normal.dot(this.direction)*distToPoint?!0:!1},intersectBox:function(box,optionalTarget){var tmax=1/this.direction.x;var tymax=1/this.direction.y;var invdirz=1/this.direction.z,origin=this.origin;if(0<=tmax){var tmin=(box.min.x-origin.x)*tmax;tmax*=box.max.x-origin.x}else tmin=(box.max.x-origin.x)*tmax,tmax*=box.min.x-origin.x;if(0<=tymax){var tymin=(box.min.y-origin.y)*tymax;tymax*=box.max.y-origin.y}else tymin=(box.max.y-origin.y)*tymax,tymax*=box.min.y-origin.y;if(tmin>tymax||tymin>tmax)return null;
if(tymin>tmin||tmin!==tmin)tmin=tymin;if(tymax<tmax||tmax!==tmax)tmax=tymax;0<=invdirz?(tymin=(box.min.z-origin.z)*invdirz,box=(box.max.z-origin.z)*invdirz):(tymin=(box.max.z-origin.z)*invdirz,box=(box.min.z-origin.z)*invdirz);if(tmin>box||tymin>tmax)return null;if(tymin>tmin||tmin!==tmin)tmin=tymin;if(box<tmax||tmax!==tmax)tmax=box;return 0>tmax?null:this.at(0<=tmin?tmin:tmax,optionalTarget)},intersectsBox:function(){var v=new THREE.Vector3;return function(box){return null!==this.intersectBox(box,
v)}}(),intersectTriangle:function(){var diff=new THREE.Vector3,edge1=new THREE.Vector3,edge2=new THREE.Vector3,normal=new THREE.Vector3;return function(a,b,c,backfaceCulling,optionalTarget){edge1.subVectors(b,a);edge2.subVectors(c,a);normal.crossVectors(edge1,edge2);b=this.direction.dot(normal);if(0<b){if(backfaceCulling)return null;backfaceCulling=1}else if(0>b)backfaceCulling=-1,b=-b;else return null;diff.subVectors(this.origin,a);a=backfaceCulling*this.direction.dot(edge2.crossVectors(diff,edge2));
if(0>a)return null;c=backfaceCulling*this.direction.dot(edge1.cross(diff));if(0>c||a+c>b)return null;a=-backfaceCulling*diff.dot(normal);return 0>a?null:this.at(a/b,optionalTarget)}}(),applyMatrix4:function(matrix4){this.direction.add(this.origin).applyMatrix4(matrix4);this.origin.applyMatrix4(matrix4);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction)}};THREE.Sphere=function(center,
radius){this.center=void 0!==center?center:new THREE.Vector3;this.radius=void 0!==radius?radius:0};THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(center,radius){this.center.copy(center);this.radius=radius;return this},setFromPoints:function(){var box=new THREE.Box3;return function(points,optionalCenter){var center=this.center;void 0!==optionalCenter?center.copy(optionalCenter):box.setFromPoints(points).center(center);for(var i=optionalCenter=0,il=points.length;i<il;i++)optionalCenter=
Math.max(optionalCenter,center.distanceToSquared(points[i]));this.radius=Math.sqrt(optionalCenter);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(sphere){this.center.copy(sphere.center);this.radius=sphere.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(point){return point.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(point){return point.distanceTo(this.center)-this.radius},intersectsSphere:function(sphere){var radiusSum=
this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum},intersectsBox:function(box){return box.intersectsSphere(this)},intersectsPlane:function(plane){return Math.abs(this.center.dot(plane.normal)-plane.constant)<=this.radius},clampPoint:function(point,optionalTarget){var deltaLengthSq=this.center.distanceToSquared(point);optionalTarget=optionalTarget||new THREE.Vector3;optionalTarget.copy(point);deltaLengthSq>this.radius*this.radius&&(optionalTarget.sub(this.center).normalize(),
optionalTarget.multiplyScalar(this.radius).add(this.center));return optionalTarget},getBoundingBox:function(optionalTarget){optionalTarget=optionalTarget||new THREE.Box3;optionalTarget.set(this.center,this.center);optionalTarget.expandByScalar(this.radius);return optionalTarget},applyMatrix4:function(matrix){this.center.applyMatrix4(matrix);this.radius*=matrix.getMaxScaleOnAxis();return this},translate:function(offset){this.center.add(offset);return this},equals:function(sphere){return sphere.center.equals(this.center)&&
sphere.radius===this.radius}};THREE.Frustum=function(p0,p1,p2,p3,p4,p5){this.planes=[void 0!==p0?p0:new THREE.Plane,void 0!==p1?p1:new THREE.Plane,void 0!==p2?p2:new THREE.Plane,void 0!==p3?p3:new THREE.Plane,void 0!==p4?p4:new THREE.Plane,void 0!==p5?p5:new THREE.Plane]};THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(p0,p1,p2,p3,p4,p5){var planes=this.planes;planes[0].copy(p0);planes[1].copy(p1);planes[2].copy(p2);planes[3].copy(p3);planes[4].copy(p4);planes[5].copy(p5);return this},
clone:function(){return(new this.constructor).copy(this)},copy:function(frustum){for(var planes=this.planes,i=0;6>i;i++)planes[i].copy(frustum.planes[i]);return this},setFromMatrix:function(m){var planes=this.planes,me=m.elements;m=me[0];var me1=me[1],me2=me[2],me3=me[3],me4=me[4],me5=me[5],me6=me[6],me7=me[7],me8=me[8],me9=me[9],me10=me[10],me11=me[11],me12=me[12],me13=me[13],me14=me[14];me=me[15];planes[0].setComponents(me3-m,me7-me4,me11-me8,me-me12).normalize();planes[1].setComponents(me3+m,me7+
me4,me11+me8,me+me12).normalize();planes[2].setComponents(me3+me1,me7+me5,me11+me9,me+me13).normalize();planes[3].setComponents(me3-me1,me7-me5,me11-me9,me-me13).normalize();planes[4].setComponents(me3-me2,me7-me6,me11-me10,me-me14).normalize();planes[5].setComponents(me3+me2,me7+me6,me11+me10,me+me14).normalize();return this},intersectsObject:function(){var sphere=new THREE.Sphere;return function(object){var geometry=object.geometry;null===geometry.boundingSphere&&geometry.computeBoundingSphere();
sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);return this.intersectsSphere(sphere)}}(),intersectsSprite:function(){var sphere=new THREE.Sphere;return function(sprite){sphere.center.set(0,0,0);sphere.radius=.7071067811865476;sphere.applyMatrix4(sprite.matrixWorld);return this.intersectsSphere(sphere)}}(),intersectsSphere:function(sphere){var planes=this.planes,center=sphere.center;sphere=-sphere.radius;for(var i=0;6>i;i++)if(planes[i].distanceToPoint(center)<sphere)return!1;
return!0},intersectsBox:function(){var p1=new THREE.Vector3,p2=new THREE.Vector3;return function(box){for(var planes=this.planes,i=0;6>i;i++){var plane=planes[i];p1.x=0<plane.normal.x?box.min.x:box.max.x;p2.x=0<plane.normal.x?box.max.x:box.min.x;p1.y=0<plane.normal.y?box.min.y:box.max.y;p2.y=0<plane.normal.y?box.max.y:box.min.y;p1.z=0<plane.normal.z?box.min.z:box.max.z;p2.z=0<plane.normal.z?box.max.z:box.min.z;var d1=plane.distanceToPoint(p1);plane=plane.distanceToPoint(p2);if(0>d1&&0>plane)return!1}return!0}}(),
containsPoint:function(point){for(var planes=this.planes,i=0;6>i;i++)if(0>planes[i].distanceToPoint(point))return!1;return!0}};THREE.Plane=function(normal,constant){this.normal=void 0!==normal?normal:new THREE.Vector3(1,0,0);this.constant=void 0!==constant?constant:0};THREE.Plane.prototype={constructor:THREE.Plane,set:function(normal,constant){this.normal.copy(normal);this.constant=constant;return this},setComponents:function(x,y,z,w){this.normal.set(x,y,z);this.constant=w;return this},setFromNormalAndCoplanarPoint:function(normal,
point){this.normal.copy(normal);this.constant=-point.dot(this.normal);return this},setFromCoplanarPoints:function(){var v1=new THREE.Vector3,v2=new THREE.Vector3;return function(a,b,c){b=v1.subVectors(c,b).cross(v2.subVectors(a,b)).normalize();this.setFromNormalAndCoplanarPoint(b,a);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(plane){this.normal.copy(plane.normal);this.constant=plane.constant;return this},normalize:function(){var inverseNormalLength=1/this.normal.length();
this.normal.multiplyScalar(inverseNormalLength);this.constant*=inverseNormalLength;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(point){return this.normal.dot(point)+this.constant},distanceToSphere:function(sphere){return this.distanceToPoint(sphere.center)-sphere.radius},projectPoint:function(point,optionalTarget){return this.orthoPoint(point,optionalTarget).sub(point).negate()},orthoPoint:function(point,optionalTarget){point=this.distanceToPoint(point);
return(optionalTarget||new THREE.Vector3).copy(this.normal).multiplyScalar(point)},intersectLine:function(){var v1=new THREE.Vector3;return function(line,optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;var direction=line.delta(v1),denominator=this.normal.dot(direction);if(0===denominator){if(0===this.distanceToPoint(line.start))return optionalTarget.copy(line.start)}else if(denominator=-(line.start.dot(this.normal)+this.constant)/denominator,!(0>denominator||1<denominator))return optionalTarget.copy(direction).multiplyScalar(denominator).add(line.start)}}(),
intersectsLine:function(line){var startSign=this.distanceToPoint(line.start);line=this.distanceToPoint(line.end);return 0>startSign&&0<line||0>line&&0<startSign},intersectsBox:function(box){return box.intersectsPlane(this)},intersectsSphere:function(sphere){return sphere.intersectsPlane(this)},coplanarPoint:function(optionalTarget){return(optionalTarget||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var v1=new THREE.Vector3,m1=new THREE.Matrix3;return function(matrix,
optionalNormalMatrix){var referencePoint=this.coplanarPoint(v1).applyMatrix4(matrix);matrix=optionalNormalMatrix||m1.getNormalMatrix(matrix);matrix=this.normal.applyMatrix3(matrix).normalize();this.constant=-referencePoint.dot(matrix);return this}}(),translate:function(offset){this.constant-=offset.dot(this.normal);return this},equals:function(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant}};THREE.Spherical=function(radius,phi,theta){this.radius=void 0!==radius?radius:
1;this.phi=void 0!==phi?phi:0;this.theta=void 0!==theta?theta:0;return this};THREE.Spherical.prototype={constructor:THREE.Spherical,set:function(radius,phi,theta){this.radius=radius;this.phi=phi;this.theta=theta;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(other){this.radius.copy(other.radius);this.phi.copy(other.phi);this.theta.copy(other.theta);return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(vec3){this.radius=
vec3.length();0===this.radius?this.phi=this.theta=0:(this.theta=Math.atan2(vec3.x,vec3.z),this.phi=Math.acos(THREE.Math.clamp(vec3.y/this.radius,-1,1)));return this}};THREE.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var chars="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),uuid=Array(36),rnd=0,r;return function(){for(var i=0;36>i;i++)8===i||13===i||18===i||23===i?uuid[i]="-":14===i?uuid[i]="4":(2>=rnd&&(rnd=33554432+16777216*Math.random()|0),r=
rnd&15,rnd>>=4,uuid[i]=chars[19===i?r&3|8:r]);return uuid.join("")}}(),clamp:function(value,min,max){return Math.max(min,Math.min(max,value))},euclideanModulo:function(n,m){return(n%m+m)%m},mapLinear:function(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1)},smoothstep:function(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*(3-2*x)},smootherstep:function(x,min,max){if(x<=min)return 0;if(x>=max)return 1;x=(x-min)/(max-min);return x*x*x*(x*(6*x-15)+10)},random16:function(){console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead.");
return Math.random()},randInt:function(low,high){return low+Math.floor(Math.random()*(high-low+1))},randFloat:function(low,high){return low+Math.random()*(high-low)},randFloatSpread:function(range){return range*(.5-Math.random())},degToRad:function(degrees){return degrees*THREE.Math.DEG2RAD},radToDeg:function(radians){return radians*THREE.Math.RAD2DEG},isPowerOfTwo:function(value){return 0===(value&value-1)&&0!==value},nearestPowerOfTwo:function(value){return Math.pow(2,Math.round(Math.log(value)/
Math.LN2))},nextPowerOfTwo:function(value){value--;value|=value>>1;value|=value>>2;value|=value>>4;value|=value>>8;value|=value>>16;value++;return value}};THREE.Spline=function(points){function interpolate(p0,p1,p2,p3,t,t2,t3){p0=.5*(p2-p0);p3=.5*(p3-p1);return(2*(p1-p2)+p0+p3)*t3+(-3*(p1-p2)-2*p0-p3)*t2+p0*t+p1}this.points=points;var c=[],v3={x:0,y:0,z:0},point,intPoint,weight,w2,w3,pa,pb,pc,pd;this.initFromArray=function(a){this.points=[];for(var i=0;i<a.length;i++)this.points[i]={x:a[i][0],y:a[i][1],
z:a[i][2]}};this.getPoint=function(k){point=(this.points.length-1)*k;intPoint=Math.floor(point);weight=point-intPoint;c[0]=0===intPoint?intPoint:intPoint-1;c[1]=intPoint;c[2]=intPoint>this.points.length-2?this.points.length-1:intPoint+1;c[3]=intPoint>this.points.length-3?this.points.length-1:intPoint+2;pa=this.points[c[0]];pb=this.points[c[1]];pc=this.points[c[2]];pd=this.points[c[3]];w2=weight*weight;w3=weight*w2;v3.x=interpolate(pa.x,pb.x,pc.x,pd.x,weight,w2,w3);v3.y=interpolate(pa.y,pb.y,pc.y,
pd.y,weight,w2,w3);v3.z=interpolate(pa.z,pb.z,pc.z,pd.z,weight,w2,w3);return v3};this.getControlPointsArray=function(){var i,l=this.points.length,coords=[];for(i=0;i<l;i++){var p=this.points[i];coords[i]=[p.x,p.y,p.z]}return coords};this.getLength=function(nSubDivisions){var oldIntPoint=0,oldPosition=new THREE.Vector3,tmpVec=new THREE.Vector3,chunkLengths=[],totalLength=0;chunkLengths[0]=0;nSubDivisions||(nSubDivisions=100);var nSamples=this.points.length*nSubDivisions;oldPosition.copy(this.points[0]);
for(nSubDivisions=1;nSubDivisions<nSamples;nSubDivisions++){var index=nSubDivisions/nSamples;var position=this.getPoint(index);tmpVec.copy(position);totalLength+=tmpVec.distanceTo(oldPosition);oldPosition.copy(position);index*=this.points.length-1;index=Math.floor(index);index!==oldIntPoint&&(chunkLengths[index]=totalLength,oldIntPoint=index)}chunkLengths[chunkLengths.length]=totalLength;return{chunks:chunkLengths,total:totalLength}};this.reparametrizeByArcLength=function(samplingCoef){var i,newpoints=
[],tmpVec=new THREE.Vector3,sl=this.getLength();newpoints.push(tmpVec.copy(this.points[0]).clone());for(i=1;i<this.points.length;i++){var j=sl.chunks[i]-sl.chunks[i-1];var sampling=Math.ceil(samplingCoef*j/sl.total);var indexCurrent=(i-1)/(this.points.length-1);var indexNext=i/(this.points.length-1);for(j=1;j<sampling-1;j++){var index=indexCurrent+1/sampling*j*(indexNext-indexCurrent);index=this.getPoint(index);newpoints.push(tmpVec.copy(index).clone())}newpoints.push(tmpVec.copy(this.points[i]).clone())}this.points=
newpoints}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var v0=new THREE.Vector3;return function(a,b,c,optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;optionalTarget.subVectors(c,b);v0.subVectors(a,b);optionalTarget.cross(v0);a=optionalTarget.lengthSq();return 0<a?optionalTarget.multiplyScalar(1/Math.sqrt(a)):optionalTarget.set(0,0,0)}}();THREE.Triangle.barycoordFromPoint=
function(){var v0=new THREE.Vector3,v1=new THREE.Vector3,v2=new THREE.Vector3;return function(point,a,b,c,optionalTarget){v0.subVectors(c,a);v1.subVectors(b,a);v2.subVectors(point,a);point=v0.dot(v0);a=v0.dot(v1);b=v0.dot(v2);var dot11=v1.dot(v1);c=v1.dot(v2);var denom=point*dot11-a*a;optionalTarget=optionalTarget||new THREE.Vector3;if(0===denom)return optionalTarget.set(-2,-1,-1);denom=1/denom;dot11=(dot11*b-a*c)*denom;point=(point*c-a*b)*denom;return optionalTarget.set(1-dot11-point,point,dot11)}}();
THREE.Triangle.containsPoint=function(){var v1=new THREE.Vector3;return function(point,a,b,c){point=THREE.Triangle.barycoordFromPoint(point,a,b,c,v1);return 0<=point.x&&0<=point.y&&1>=point.x+point.y}}();THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(points,i0,i1,i2){this.a.copy(points[i0]);this.b.copy(points[i1]);this.c.copy(points[i2]);return this},clone:function(){return(new this.constructor).copy(this)},
copy:function(triangle){this.a.copy(triangle.a);this.b.copy(triangle.b);this.c.copy(triangle.c);return this},area:function(){var v0=new THREE.Vector3,v1=new THREE.Vector3;return function(){v0.subVectors(this.c,this.b);v1.subVectors(this.a,this.b);return.5*v0.cross(v1).length()}}(),midpoint:function(optionalTarget){return(optionalTarget||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(optionalTarget){return THREE.Triangle.normal(this.a,this.b,this.c,optionalTarget)},
plane:function(optionalTarget){return(optionalTarget||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(point,optionalTarget){return THREE.Triangle.barycoordFromPoint(point,this.a,this.b,this.c,optionalTarget)},containsPoint:function(point){return THREE.Triangle.containsPoint(point,this.a,this.b,this.c)},closestPointToPoint:function(){var plane,edgeList,projectedPoint,closestPoint;return function(point,optionalTarget){void 0===plane&&(plane=new THREE.Plane,
edgeList=[new THREE.Line3,new THREE.Line3,new THREE.Line3],projectedPoint=new THREE.Vector3,closestPoint=new THREE.Vector3);optionalTarget=optionalTarget||new THREE.Vector3;var minDistance=Infinity;plane.setFromCoplanarPoints(this.a,this.b,this.c);plane.projectPoint(point,projectedPoint);if(!0===this.containsPoint(projectedPoint))optionalTarget.copy(projectedPoint);else for(edgeList[0].set(this.a,this.b),edgeList[1].set(this.b,this.c),edgeList[2].set(this.c,this.a),point=0;point<edgeList.length;point++){edgeList[point].closestPointToPoint(projectedPoint,
!0,closestPoint);var distance=projectedPoint.distanceToSquared(closestPoint);distance<minDistance&&(minDistance=distance,optionalTarget.copy(closestPoint))}return optionalTarget}}(),equals:function(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c)}};THREE.Interpolant=function(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions;this._cachedIndex=0;this.resultBuffer=void 0!==resultBuffer?resultBuffer:new sampleValues.constructor(sampleSize);
this.sampleValues=sampleValues;this.valueSize=sampleSize};THREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(t){var pp=this.parameterPositions,i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];a:{b:{c:{d:if(!(t<t1)){for(var giveUpAt=i1+2;;){if(void 0===t1){if(t<t0)break d;this._cachedIndex=i1=pp.length;return this.afterEnd_(i1-1,t,t0)}if(i1===giveUpAt)break;t0=t1;t1=pp[++i1];if(t<t1)break b}t1=pp.length;break c}if(t>=t0)break a;else{giveUpAt=pp[1];t<giveUpAt&&(i1=2,t0=giveUpAt);
for(giveUpAt=i1-2;;){if(void 0===t0)return this._cachedIndex=0,this.beforeStart_(0,t,t1);if(i1===giveUpAt)break;t1=t0;t0=pp[--i1-1];if(t>=t0)break b}t1=i1;i1=0}}for(;i1<t1;)t0=i1+t1>>>1,t<pp[t0]?t1=t0:i1=t0+1;t1=pp[i1];t0=pp[i1-1];if(void 0===t0)return this._cachedIndex=0,this.beforeStart_(0,t,t1);if(void 0===t1)return this._cachedIndex=i1=pp.length,this.afterEnd_(i1-1,t0,t)}this._cachedIndex=i1;this.intervalChanged_(i1,t0,t1)}return this.interpolate_(i1,t0,t,t1)},settings:null,DefaultSettings_:{},
getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(index){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize;index*=stride;for(var i=0;i!==stride;++i)result[i]=values[index+i];return result},interpolate_:function(i1,t0,t,t1){throw Error("call to abstract method");},intervalChanged_:function(i1,t0,t1){}};Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_});
THREE.CubicInterpolant=function(parameterPositions,sampleValues,sampleSize,resultBuffer){THREE.Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer);this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0};THREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(i1,t0,t1){var pp=
this.parameterPositions,iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(void 0===tPrev)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:iPrev=i1;tPrev=2*t0-t1;break;case THREE.WrapAroundEnding:iPrev=pp.length-2;tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:iPrev=i1,tPrev=t1}if(void 0===tNext)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:iNext=i1;tNext=2*t1-t0;break;case THREE.WrapAroundEnding:iNext=1;tNext=t1+pp[1]-pp[0];break;default:iNext=i1-1,tNext=
t0}i1=.5*(t1-t0);pp=this.valueSize;this._weightPrev=i1/(t0-tPrev);this._weightNext=i1/(tNext-t1);this._offsetPrev=iPrev*pp;this._offsetNext=iNext*pp},interpolate_:function(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize;i1*=stride;var o0=i1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0);t=p*p;t1=t*p;t0=-wP*t1+2*wP*t-wP*p;wP=(1+wP)*t1+(-1.5-2*wP)*t+(-.5+wP)*p+1;p=(-1-wN)*t1+(1.5+wN)*t+.5*p;wN=wN*t1-wN*
t;for(t=0;t!==stride;++t)result[t]=t0*values[oP+t]+wP*values[o0+t]+p*values[i1+t]+wN*values[oN+t];return result}});THREE.DiscreteInterpolant=function(parameterPositions,sampleValues,sampleSize,resultBuffer){THREE.Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)};THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(i1,t0,t,t1){return this.copySampleValue_(i1-1)}});THREE.LinearInterpolant=
function(parameterPositions,sampleValues,sampleSize,resultBuffer){THREE.Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)};THREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize;i1*=stride;var offset0=i1-stride;t0=(t-t0)/(t1-t0);t=1-t0;for(t1=0;t1!==stride;++t1)result[t1]=values[offset0+t1]*
t+values[i1+t1]*t0;return result}});THREE.QuaternionLinearInterpolant=function(parameterPositions,sampleValues,sampleSize,resultBuffer){THREE.Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)};THREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(i1,t0,t,t1){var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize;i1*=stride;t0=(t-t0)/
(t1-t0);for(t=i1+stride;i1!==t;i1+=4)THREE.Quaternion.slerpFlat(result,0,values,i1-stride,values,i1,t0);return result}});THREE.Clock=function(autoStart){this.autoStart=void 0!==autoStart?autoStart:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=(performance||Date).now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},
getDelta:function(){var diff=0;this.autoStart&&!this.running&&this.start();if(this.running){var newTime=(performance||Date).now();diff=(newTime-this.oldTime)/1E3;this.oldTime=newTime;this.elapsedTime+=diff}return diff}};THREE.EventDispatcher=function(){};Object.assign(THREE.EventDispatcher.prototype,{addEventListener:function(type,listener){void 0===this._listeners&&(this._listeners={});var listeners=this._listeners;void 0===listeners[type]&&(listeners[type]=[]);-1===listeners[type].indexOf(listener)&&
listeners[type].push(listener)},hasEventListener:function(type,listener){if(void 0===this._listeners)return!1;var listeners=this._listeners;return void 0!==listeners[type]&&-1!==listeners[type].indexOf(listener)?!0:!1},removeEventListener:function(type,listener){void 0!==this._listeners&&(type=this._listeners[type],void 0!==type&&(listener=type.indexOf(listener),-1!==listener&&type.splice(listener,1)))},dispatchEvent:function(event){if(void 0!==this._listeners){var listenerArray=this._listeners[event.type];
if(void 0!==listenerArray){event.target=this;var array=[],i,length=listenerArray.length;for(i=0;i<length;i++)array[i]=listenerArray[i];for(i=0;i<length;i++)array[i].call(this,event)}}}});THREE.Layers=function(){this.mask=1};THREE.Layers.prototype={constructor:THREE.Layers,set:function(channel){this.mask=1<<channel},enable:function(channel){this.mask|=1<<channel},toggle:function(channel){this.mask^=1<<channel},disable:function(channel){this.mask&=~(1<<channel)},test:function(layers){return 0!==(this.mask&
layers.mask)}};(function(THREE){function ascSort(a,b){return a.distance-b.distance}function intersectObject(object,raycaster,intersects,recursive){if(!1!==object.visible&&(object.raycast(raycaster,intersects),!0===recursive)){object=object.children;recursive=0;for(var l=object.length;recursive<l;recursive++)intersectObject(object[recursive],raycaster,intersects,!0)}}THREE.Raycaster=function(origin,direction,near,far){this.ray=new THREE.Ray(origin,direction);this.near=near||0;this.far=far||Infinity;
this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points}}})};THREE.Raycaster.prototype={constructor:THREE.Raycaster,linePrecision:1,set:function(origin,direction){this.ray.set(origin,direction)},setFromCamera:function(coords,camera){camera instanceof THREE.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(camera.matrixWorld),
this.ray.direction.set(coords.x,coords.y,.5).unproject(camera).sub(this.ray.origin).normalize()):camera instanceof THREE.OrthographicCamera?(this.ray.origin.set(coords.x,coords.y,-1).unproject(camera),this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(object,recursive){var intersects=[];intersectObject(object,this,intersects,recursive);intersects.sort(ascSort);return intersects},intersectObjects:function(objects,
recursive){var intersects=[];if(!1===Array.isArray(objects))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),intersects;for(var i=0,l=objects.length;i<l;i++)intersectObject(objects[i],this,intersects,recursive);intersects.sort(ascSort);return intersects}}})(THREE);THREE.Object3D=function(){Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=
THREE.Object3D.DefaultUp.clone();var position=new THREE.Vector3,rotation=new THREE.Euler,quaternion=new THREE.Quaternion,scale=new THREE.Vector3(1,1,1);rotation.onChange(function(){quaternion.setFromEuler(rotation,!1)});quaternion.onChange(function(){rotation.setFromQuaternion(quaternion,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:position},rotation:{enumerable:!0,value:rotation},quaternion:{enumerable:!0,value:quaternion},scale:{enumerable:!0,value:scale},modelViewMatrix:{value:new THREE.Matrix4},
normalMatrix:{value:new THREE.Matrix3}});this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new THREE.Layers;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}};THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);THREE.Object3D.DefaultMatrixAutoUpdate=!0;Object.assign(THREE.Object3D.prototype,THREE.EventDispatcher.prototype,
{applyMatrix:function(matrix){this.matrix.multiplyMatrices(matrix,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(axis,angle){this.quaternion.setFromAxisAngle(axis,angle)},setRotationFromEuler:function(euler){this.quaternion.setFromEuler(euler,!0)},setRotationFromMatrix:function(m){this.quaternion.setFromRotationMatrix(m)},setRotationFromQuaternion:function(q){this.quaternion.copy(q)},rotateOnAxis:function(){var q1=new THREE.Quaternion;
return function(axis,angle){q1.setFromAxisAngle(axis,angle);this.quaternion.multiply(q1);return this}}(),rotateX:function(){var v1=new THREE.Vector3(1,0,0);return function(angle){return this.rotateOnAxis(v1,angle)}}(),rotateY:function(){var v1=new THREE.Vector3(0,1,0);return function(angle){return this.rotateOnAxis(v1,angle)}}(),rotateZ:function(){var v1=new THREE.Vector3(0,0,1);return function(angle){return this.rotateOnAxis(v1,angle)}}(),translateOnAxis:function(){var v1=new THREE.Vector3;return function(axis,
distance){v1.copy(axis).applyQuaternion(this.quaternion);this.position.add(v1.multiplyScalar(distance));return this}}(),translateX:function(){var v1=new THREE.Vector3(1,0,0);return function(distance){return this.translateOnAxis(v1,distance)}}(),translateY:function(){var v1=new THREE.Vector3(0,1,0);return function(distance){return this.translateOnAxis(v1,distance)}}(),translateZ:function(){var v1=new THREE.Vector3(0,0,1);return function(distance){return this.translateOnAxis(v1,distance)}}(),localToWorld:function(vector){return vector.applyMatrix4(this.matrixWorld)},
worldToLocal:function(){var m1=new THREE.Matrix4;return function(vector){return vector.applyMatrix4(m1.getInverse(this.matrixWorld))}}(),lookAt:function(){var m1=new THREE.Matrix4;return function(vector){m1.lookAt(vector,this.position,this.up);this.quaternion.setFromRotationMatrix(m1)}}(),add:function(object){if(1<arguments.length){for(var i=0;i<arguments.length;i++)this.add(arguments[i]);return this}if(object===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",
object),this;object instanceof THREE.Object3D?(null!==object.parent&&object.parent.remove(object),object.parent=this,object.dispatchEvent({type:"added"}),this.children.push(object)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object);return this},remove:function(object){if(1<arguments.length)for(var i=0;i<arguments.length;i++)this.remove(arguments[i]);i=this.children.indexOf(object);-1!==i&&(object.parent=null,object.dispatchEvent({type:"removed"}),this.children.splice(i,
1))},getObjectById:function(id){return this.getObjectByProperty("id",id)},getObjectByName:function(name){return this.getObjectByProperty("name",name)},getObjectByProperty:function(name,value){if(this[name]===value)return this;for(var i=0,l=this.children.length;i<l;i++){var object=this.children[i].getObjectByProperty(name,value);if(void 0!==object)return object}},getWorldPosition:function(optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;this.updateMatrixWorld(!0);return optionalTarget.setFromMatrixPosition(this.matrixWorld)},
getWorldQuaternion:function(){var position=new THREE.Vector3,scale=new THREE.Vector3;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Quaternion;this.updateMatrixWorld(!0);this.matrixWorld.decompose(position,optionalTarget,scale);return optionalTarget}}(),getWorldRotation:function(){var quaternion=new THREE.Quaternion;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Euler;this.getWorldQuaternion(quaternion);return optionalTarget.setFromQuaternion(quaternion,
this.rotation.order,!1)}}(),getWorldScale:function(){var position=new THREE.Vector3,quaternion=new THREE.Quaternion;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;this.updateMatrixWorld(!0);this.matrixWorld.decompose(position,quaternion,optionalTarget);return optionalTarget}}(),getWorldDirection:function(){var quaternion=new THREE.Quaternion;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;this.getWorldQuaternion(quaternion);return optionalTarget.set(0,
0,1).applyQuaternion(quaternion)}}(),raycast:function(){},traverse:function(callback){callback(this);for(var children=this.children,i=0,l=children.length;i<l;i++)children[i].traverse(callback)},traverseVisible:function(callback){if(!1!==this.visible){callback(this);for(var children=this.children,i=0,l=children.length;i<l;i++)children[i].traverseVisible(callback)}},traverseAncestors:function(callback){var parent=this.parent;null!==parent&&(callback(parent),parent.traverseAncestors(callback))},updateMatrix:function(){this.matrix.compose(this.position,
this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(force){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===force)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,force=!0;for(var i=0,l=this.children.length;i<l;i++)this.children[i].updateMatrixWorld(force)},toJSON:function(meta){function extractFromCache(cache){var values=
[],key;for(key in cache){var data=cache[key];delete data.metadata;values.push(data)}return values}var isRootObject=void 0===meta||""===meta,output={};isRootObject&&(meta={geometries:{},materials:{},textures:{},images:{}},output.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var object={};object.uuid=this.uuid;object.type=this.type;""!==this.name&&(object.name=this.name);"{}"!==JSON.stringify(this.userData)&&(object.userData=this.userData);!0===this.castShadow&&(object.castShadow=
!0);!0===this.receiveShadow&&(object.receiveShadow=!0);!1===this.visible&&(object.visible=!1);object.matrix=this.matrix.toArray();void 0!==this.geometry&&(void 0===meta.geometries[this.geometry.uuid]&&(meta.geometries[this.geometry.uuid]=this.geometry.toJSON(meta)),object.geometry=this.geometry.uuid);void 0!==this.material&&(void 0===meta.materials[this.material.uuid]&&(meta.materials[this.material.uuid]=this.material.toJSON(meta)),object.material=this.material.uuid);if(0<this.children.length){object.children=
[];for(var i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(isRootObject){isRootObject=extractFromCache(meta.geometries);i=extractFromCache(meta.materials);var textures=extractFromCache(meta.textures);meta=extractFromCache(meta.images);0<isRootObject.length&&(output.geometries=isRootObject);0<i.length&&(output.materials=i);0<textures.length&&(output.textures=textures);0<meta.length&&(output.images=meta)}output.object=object;return output},clone:function(recursive){return(new this.constructor).copy(this,
recursive)},copy:function(source,recursive){void 0===recursive&&(recursive=!0);this.name=source.name;this.up.copy(source.up);this.position.copy(source.position);this.quaternion.copy(source.quaternion);this.scale.copy(source.scale);this.matrix.copy(source.matrix);this.matrixWorld.copy(source.matrixWorld);this.matrixAutoUpdate=source.matrixAutoUpdate;this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate;this.visible=source.visible;this.castShadow=source.castShadow;this.receiveShadow=source.receiveShadow;
this.frustumCulled=source.frustumCulled;this.renderOrder=source.renderOrder;this.userData=JSON.parse(JSON.stringify(source.userData));if(!0===recursive)for(recursive=0;recursive<source.children.length;recursive++)this.add(source.children[recursive].clone());return this}});THREE.Object3DIdCount=0;THREE.Face3=function(a,b,c,normal,color,materialIndex){this.a=a;this.b=b;this.c=c;this.normal=normal instanceof THREE.Vector3?normal:new THREE.Vector3;this.vertexNormals=Array.isArray(normal)?normal:[];this.color=
color instanceof THREE.Color?color:new THREE.Color;this.vertexColors=Array.isArray(color)?color:[];this.materialIndex=void 0!==materialIndex?materialIndex:0};THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.a=source.a;this.b=source.b;this.c=source.c;this.normal.copy(source.normal);this.color.copy(source.color);this.materialIndex=source.materialIndex;for(var i=0,il=source.vertexNormals.length;i<il;i++)this.vertexNormals[i]=
source.vertexNormals[i].clone();i=0;for(il=source.vertexColors.length;i<il;i++)this.vertexColors[i]=source.vertexColors[i].clone();return this}};THREE.BufferAttribute=function(array,itemSize,normalized){this.uuid=THREE.Math.generateUUID();this.array=array;this.itemSize=itemSize;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0;this.normalized=!0===normalized};THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(value){!0===
value&&this.version++},setDynamic:function(value){this.dynamic=value;return this},copy:function(source){this.array=new source.array.constructor(source.array);this.itemSize=source.itemSize;this.dynamic=source.dynamic;return this},copyAt:function(index1,attribute,index2){index1*=this.itemSize;index2*=attribute.itemSize;for(var i=0,l=this.itemSize;i<l;i++)this.array[index1+i]=attribute.array[index2+i];return this},copyArray:function(array){this.array.set(array);return this},copyColorsArray:function(colors){for(var array=
this.array,offset=0,i=0,l=colors.length;i<l;i++){var color=colors[i];void 0===color&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),color=new THREE.Color);array[offset++]=color.r;array[offset++]=color.g;array[offset++]=color.b}return this},copyIndicesArray:function(indices){for(var array=this.array,offset=0,i=0,l=indices.length;i<l;i++){var index=indices[i];array[offset++]=index.a;array[offset++]=index.b;array[offset++]=index.c}return this},copyVector2sArray:function(vectors){for(var array=
this.array,offset=0,i=0,l=vectors.length;i<l;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),vector=new THREE.Vector2);array[offset++]=vector.x;array[offset++]=vector.y}return this},copyVector3sArray:function(vectors){for(var array=this.array,offset=0,i=0,l=vectors.length;i<l;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),vector=new THREE.Vector3);
array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z}return this},copyVector4sArray:function(vectors){for(var array=this.array,offset=0,i=0,l=vectors.length;i<l;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),vector=new THREE.Vector4);array[offset++]=vector.x;array[offset++]=vector.y;array[offset++]=vector.z;array[offset++]=vector.w}return this},set:function(value,offset){void 0===offset&&(offset=0);
this.array.set(value,offset);return this},getX:function(index){return this.array[index*this.itemSize]},setX:function(index,x){this.array[index*this.itemSize]=x;return this},getY:function(index){return this.array[index*this.itemSize+1]},setY:function(index,y){this.array[index*this.itemSize+1]=y;return this},getZ:function(index){return this.array[index*this.itemSize+2]},setZ:function(index,z){this.array[index*this.itemSize+2]=z;return this},getW:function(index){return this.array[index*this.itemSize+
3]},setW:function(index,w){this.array[index*this.itemSize+3]=w;return this},setXY:function(index,x,y){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;return this},setXYZ:function(index,x,y,z){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;return this},setXYZW:function(index,x,y,z,w){index*=this.itemSize;this.array[index+0]=x;this.array[index+1]=y;this.array[index+2]=z;this.array[index+3]=w;return this},clone:function(){return(new this.constructor).copy(this)}};
THREE.Int8Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Int8Array(array),itemSize)};THREE.Uint8Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Uint8Array(array),itemSize)};THREE.Uint8ClampedAttribute=function(array,itemSize){return new THREE.BufferAttribute(new Uint8ClampedArray(array),itemSize)};THREE.Int16Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Int16Array(array),itemSize)};THREE.Uint16Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Uint16Array(array),
itemSize)};THREE.Int32Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Int32Array(array),itemSize)};THREE.Uint32Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Uint32Array(array),itemSize)};THREE.Float32Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Float32Array(array),itemSize)};THREE.Float64Attribute=function(array,itemSize){return new THREE.BufferAttribute(new Float64Array(array),itemSize)};THREE.DynamicBufferAttribute=function(array,
itemSize){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return(new THREE.BufferAttribute(array,itemSize)).setDynamic(!0)};THREE.InstancedBufferAttribute=function(array,itemSize,meshPerAttribute){THREE.BufferAttribute.call(this,array,itemSize);this.meshPerAttribute=meshPerAttribute||1};THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype);THREE.InstancedBufferAttribute.prototype.constructor=
THREE.InstancedBufferAttribute;THREE.InstancedBufferAttribute.prototype.copy=function(source){THREE.BufferAttribute.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this};THREE.InterleavedBuffer=function(array,stride){this.uuid=THREE.Math.generateUUID();this.array=array;this.stride=stride;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.version=0};THREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},
get count(){return this.array.length/this.stride},set needsUpdate(value){!0===value&&this.version++},setDynamic:function(value){this.dynamic=value;return this},copy:function(source){this.array=new source.array.constructor(source.array);this.stride=source.stride;this.dynamic=source.dynamic;return this},copyAt:function(index1,attribute,index2){index1*=this.stride;index2*=attribute.stride;for(var i=0,l=this.stride;i<l;i++)this.array[index1+i]=attribute.array[index2+i];return this},set:function(value,
offset){void 0===offset&&(offset=0);this.array.set(value,offset);return this},clone:function(){return(new this.constructor).copy(this)}};THREE.InstancedInterleavedBuffer=function(array,stride,meshPerAttribute){THREE.InterleavedBuffer.call(this,array,stride);this.meshPerAttribute=meshPerAttribute||1};THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer;THREE.InstancedInterleavedBuffer.prototype.copy=
function(source){THREE.InterleavedBuffer.prototype.copy.call(this,source);this.meshPerAttribute=source.meshPerAttribute;return this};THREE.InterleavedBufferAttribute=function(interleavedBuffer,itemSize,offset){this.uuid=THREE.Math.generateUUID();this.data=interleavedBuffer;this.itemSize=itemSize;this.offset=offset};THREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");
return this.array.length},get count(){return this.data.count},setX:function(index,x){this.data.array[index*this.data.stride+this.offset]=x;return this},setY:function(index,y){this.data.array[index*this.data.stride+this.offset+1]=y;return this},setZ:function(index,z){this.data.array[index*this.data.stride+this.offset+2]=z;return this},setW:function(index,w){this.data.array[index*this.data.stride+this.offset+3]=w;return this},getX:function(index){return this.data.array[index*this.data.stride+this.offset]},
getY:function(index){return this.data.array[index*this.data.stride+this.offset+1]},getZ:function(index){return this.data.array[index*this.data.stride+this.offset+2]},getW:function(index){return this.data.array[index*this.data.stride+this.offset+3]},setXY:function(index,x,y){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;return this},setXYZ:function(index,x,y,z){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+
1]=y;this.data.array[index+2]=z;return this},setXYZW:function(index,x,y,z,w){index=index*this.data.stride+this.offset;this.data.array[index+0]=x;this.data.array[index+1]=y;this.data.array[index+2]=z;this.data.array[index+3]=w;return this}};THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=
[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};Object.assign(THREE.Geometry.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(matrix){for(var normalMatrix=(new THREE.Matrix3).getNormalMatrix(matrix),i=0,il=this.vertices.length;i<il;i++)this.vertices[i].applyMatrix4(matrix);
i=0;for(il=this.faces.length;i<il;i++){matrix=this.faces[i];matrix.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=matrix.vertexNormals.length;j<jl;j++)matrix.vertexNormals[j].applyMatrix3(normalMatrix).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationX(angle);
this.applyMatrix(m1);return this}}(),rotateY:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationY(angle);this.applyMatrix(m1);return this}}(),rotateZ:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationZ(angle);this.applyMatrix(m1);return this}}(),translate:function(){var m1;return function(x,y,z){void 0===m1&&(m1=new THREE.Matrix4);m1.makeTranslation(x,y,z);this.applyMatrix(m1);return this}}(),scale:function(){var m1;
return function(x,y,z){void 0===m1&&(m1=new THREE.Matrix4);m1.makeScale(x,y,z);this.applyMatrix(m1);return this}}(),lookAt:function(){var obj;return function(vector){void 0===obj&&(obj=new THREE.Object3D);obj.lookAt(vector);obj.updateMatrix();this.applyMatrix(obj.matrix)}}(),fromBufferGeometry:function(geometry){function addFace(a,b,c,materialIndex){var vertexNormals=void 0!==normals?[tempNormals[a].clone(),tempNormals[b].clone(),tempNormals[c].clone()]:[],vertexColors=void 0!==colors?[scope.colors[a].clone(),
scope.colors[b].clone(),scope.colors[c].clone()]:[];materialIndex=new THREE.Face3(a,b,c,vertexNormals,vertexColors,materialIndex);scope.faces.push(materialIndex);void 0!==uvs&&scope.faceVertexUvs[0].push([tempUVs[a].clone(),tempUVs[b].clone(),tempUVs[c].clone()]);void 0!==uvs2&&scope.faceVertexUvs[1].push([tempUVs2[a].clone(),tempUVs2[b].clone(),tempUVs2[c].clone()])}var scope=this,indices=null!==geometry.index?geometry.index.array:void 0,attributes=geometry.attributes,positions=attributes.position.array,
normals=void 0!==attributes.normal?attributes.normal.array:void 0,colors=void 0!==attributes.color?attributes.color.array:void 0,uvs=void 0!==attributes.uv?attributes.uv.array:void 0,uvs2=void 0!==attributes.uv2?attributes.uv2.array:void 0;void 0!==uvs2&&(this.faceVertexUvs[1]=[]);for(var tempNormals=[],tempUVs=[],tempUVs2=[],j=attributes=0;attributes<positions.length;attributes+=3,j+=2)scope.vertices.push(new THREE.Vector3(positions[attributes],positions[attributes+1],positions[attributes+2])),void 0!==
normals&&tempNormals.push(new THREE.Vector3(normals[attributes],normals[attributes+1],normals[attributes+2])),void 0!==colors&&scope.colors.push(new THREE.Color(colors[attributes],colors[attributes+1],colors[attributes+2])),void 0!==uvs&&tempUVs.push(new THREE.Vector2(uvs[j],uvs[j+1])),void 0!==uvs2&&tempUVs2.push(new THREE.Vector2(uvs2[j],uvs2[j+1]));if(void 0!==indices)if(positions=geometry.groups,0<positions.length)for(attributes=0;attributes<positions.length;attributes++){var group=positions[attributes],
start=group.start,count=group.count;j=start;for(start+=count;j<start;j+=3)addFace(indices[j],indices[j+1],indices[j+2],group.materialIndex)}else for(attributes=0;attributes<indices.length;attributes+=3)addFace(indices[attributes],indices[attributes+1],indices[attributes+2]);else for(attributes=0;attributes<positions.length/3;attributes+=3)addFace(attributes,attributes+1,attributes+2);this.computeFaceNormals();null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone());null!==geometry.boundingSphere&&
(this.boundingSphere=geometry.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var offset=this.boundingBox.center().negate();this.translate(offset.x,offset.y,offset.z);return offset},normalize:function(){this.computeBoundingSphere();var center=this.boundingSphere.center,radius=this.boundingSphere.radius;radius=0===radius?1:1/radius;var matrix=new THREE.Matrix4;matrix.set(radius,0,0,-radius*center.x,0,radius,0,-radius*center.y,0,0,radius,-radius*center.z,0,0,0,1);this.applyMatrix(matrix);
return this},computeFaceNormals:function(){for(var cb=new THREE.Vector3,ab=new THREE.Vector3,f=0,fl=this.faces.length;f<fl;f++){var face=this.faces[f],vA=this.vertices[face.a],vB=this.vertices[face.b];cb.subVectors(this.vertices[face.c],vB);ab.subVectors(vA,vB);cb.cross(ab);cb.normalize();face.normal.copy(cb)}},computeVertexNormals:function(areaWeighted){void 0===areaWeighted&&(areaWeighted=!0);var vl;var vertices=Array(this.vertices.length);var v=0;for(vl=this.vertices.length;v<vl;v++)vertices[v]=
new THREE.Vector3;if(areaWeighted){var cb=new THREE.Vector3,ab=new THREE.Vector3;areaWeighted=0;for(v=this.faces.length;areaWeighted<v;areaWeighted++){vl=this.faces[areaWeighted];var vA=this.vertices[vl.a];var vB=this.vertices[vl.b];var vC=this.vertices[vl.c];cb.subVectors(vC,vB);ab.subVectors(vA,vB);cb.cross(ab);vertices[vl.a].add(cb);vertices[vl.b].add(cb);vertices[vl.c].add(cb)}}else for(areaWeighted=0,v=this.faces.length;areaWeighted<v;areaWeighted++)vl=this.faces[areaWeighted],vertices[vl.a].add(vl.normal),
vertices[vl.b].add(vl.normal),vertices[vl.c].add(vl.normal);v=0;for(vl=this.vertices.length;v<vl;v++)vertices[v].normalize();areaWeighted=0;for(v=this.faces.length;areaWeighted<v;areaWeighted++)vl=this.faces[areaWeighted],vA=vl.vertexNormals,3===vA.length?(vA[0].copy(vertices[vl.a]),vA[1].copy(vertices[vl.b]),vA[2].copy(vertices[vl.c])):(vA[0]=vertices[vl.a].clone(),vA[1]=vertices[vl.b].clone(),vA[2]=vertices[vl.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var il,
fl;var f=0;for(fl=this.faces.length;f<fl;f++){var face=this.faces[f];face.__originalFaceNormal?face.__originalFaceNormal.copy(face.normal):face.__originalFaceNormal=face.normal.clone();face.__originalVertexNormals||(face.__originalVertexNormals=[]);var i=0;for(il=face.vertexNormals.length;i<il;i++)face.__originalVertexNormals[i]?face.__originalVertexNormals[i].copy(face.vertexNormals[i]):face.__originalVertexNormals[i]=face.vertexNormals[i].clone()}var tmpGeo=new THREE.Geometry;tmpGeo.faces=this.faces;
i=0;for(il=this.morphTargets.length;i<il;i++){if(!this.morphNormals[i]){this.morphNormals[i]={};this.morphNormals[i].faceNormals=[];this.morphNormals[i].vertexNormals=[];face=this.morphNormals[i].faceNormals;var dstNormalsVertex=this.morphNormals[i].vertexNormals;f=0;for(fl=this.faces.length;f<fl;f++){var faceNormal=new THREE.Vector3;var vertexNormals={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3};face.push(faceNormal);dstNormalsVertex.push(vertexNormals)}}dstNormalsVertex=this.morphNormals[i];
tmpGeo.vertices=this.morphTargets[i].vertices;tmpGeo.computeFaceNormals();tmpGeo.computeVertexNormals();f=0;for(fl=this.faces.length;f<fl;f++)face=this.faces[f],faceNormal=dstNormalsVertex.faceNormals[f],vertexNormals=dstNormalsVertex.vertexNormals[f],faceNormal.copy(face.normal),vertexNormals.a.copy(face.vertexNormals[0]),vertexNormals.b.copy(face.vertexNormals[1]),vertexNormals.c.copy(face.vertexNormals[2])}f=0;for(fl=this.faces.length;f<fl;f++)face=this.faces[f],face.normal=face.__originalFaceNormal,
face.vertexNormals=face.__originalVertexNormals},computeTangents:function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){for(var d=0,vertices=this.vertices,i=0,il=vertices.length;i<il;i++)0<i&&(d+=vertices[i].distanceTo(vertices[i-1])),this.lineDistances[i]=d},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&
(this.boundingSphere=new THREE.Sphere);this.boundingSphere.setFromPoints(this.vertices)},merge:function(geometry,matrix,materialIndexOffset){if(!1===geometry instanceof THREE.Geometry)console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",geometry);else{var normalMatrix,vertexOffset=this.vertices.length,vertices1=this.vertices,vertices2=geometry.vertices,faces1=this.faces,faces2=geometry.faces,uvs1=this.faceVertexUvs[0];geometry=geometry.faceVertexUvs[0];void 0===materialIndexOffset&&
(materialIndexOffset=0);void 0!==matrix&&(normalMatrix=(new THREE.Matrix3).getNormalMatrix(matrix));for(var i=0,il=vertices2.length;i<il;i++){var vertexCopy=vertices2[i].clone();void 0!==matrix&&vertexCopy.applyMatrix4(matrix);vertices1.push(vertexCopy)}i=0;for(il=faces2.length;i<il;i++){vertices2=faces2[i];var faceVertexNormals=vertices2.vertexNormals,faceVertexColors=vertices2.vertexColors;vertexCopy=new THREE.Face3(vertices2.a+vertexOffset,vertices2.b+vertexOffset,vertices2.c+vertexOffset);vertexCopy.normal.copy(vertices2.normal);
void 0!==normalMatrix&&vertexCopy.normal.applyMatrix3(normalMatrix).normalize();matrix=0;for(vertices1=faceVertexNormals.length;matrix<vertices1;matrix++){var normal=faceVertexNormals[matrix].clone();void 0!==normalMatrix&&normal.applyMatrix3(normalMatrix).normalize();vertexCopy.vertexNormals.push(normal)}vertexCopy.color.copy(vertices2.color);matrix=0;for(vertices1=faceVertexColors.length;matrix<vertices1;matrix++)normal=faceVertexColors[matrix],vertexCopy.vertexColors.push(normal.clone());vertexCopy.materialIndex=
vertices2.materialIndex+materialIndexOffset;faces1.push(vertexCopy)}i=0;for(il=geometry.length;i<il;i++)if(materialIndexOffset=geometry[i],normalMatrix=[],void 0!==materialIndexOffset){matrix=0;for(vertices1=materialIndexOffset.length;matrix<vertices1;matrix++)normalMatrix.push(materialIndexOffset[matrix].clone());uvs1.push(normalMatrix)}}},mergeMesh:function(mesh){!1===mesh instanceof THREE.Mesh?console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",mesh):(mesh.matrixAutoUpdate&&
mesh.updateMatrix(),this.merge(mesh.geometry,mesh.matrix))},mergeVertices:function(){var verticesMap={},unique=[],changes=[],precision=Math.pow(10,4),il;var i=0;for(il=this.vertices.length;i<il;i++){var v=this.vertices[i];v=Math.round(v.x*precision)+"_"+Math.round(v.y*precision)+"_"+Math.round(v.z*precision);void 0===verticesMap[v]?(verticesMap[v]=i,unique.push(this.vertices[i]),changes[i]=unique.length-1):changes[i]=changes[verticesMap[v]]}verticesMap=[];i=0;for(il=this.faces.length;i<il;i++)for(precision=
this.faces[i],precision.a=changes[precision.a],precision.b=changes[precision.b],precision.c=changes[precision.c],precision=[precision.a,precision.b,precision.c],v=0;3>v;v++)if(precision[v]===precision[(v+1)%3]){verticesMap.push(i);break}for(i=verticesMap.length-1;0<=i;i--)for(precision=verticesMap[i],this.faces.splice(precision,1),changes=0,il=this.faceVertexUvs.length;changes<il;changes++)this.faceVertexUvs[changes].splice(precision,1);i=this.vertices.length-unique.length;this.vertices=unique;return i},
sortFacesByMaterialIndex:function(){for(var faces=this.faces,length=faces.length,i=0;i<length;i++)faces[i]._id=i;faces.sort(function(a,b){return a.materialIndex-b.materialIndex});var uvs1=this.faceVertexUvs[0],uvs2=this.faceVertexUvs[1],newUvs1,newUvs2;uvs1&&uvs1.length===length&&(newUvs1=[]);uvs2&&uvs2.length===length&&(newUvs2=[]);for(i=0;i<length;i++){var id=faces[i]._id;newUvs1&&newUvs1.push(uvs1[id]);newUvs2&&newUvs2.push(uvs2[id])}newUvs1&&(this.faceVertexUvs[0]=newUvs1);newUvs2&&(this.faceVertexUvs[1]=
newUvs2)},toJSON:function(){function setBit(value,position,enabled){return enabled?value|1<<position:value&~(1<<position)}function getNormalIndex(normal){var hash=normal.x.toString()+normal.y.toString()+normal.z.toString();if(void 0!==normalsHash[hash])return normalsHash[hash];normalsHash[hash]=normals.length/3;normals.push(normal.x,normal.y,normal.z);return normalsHash[hash]}function getColorIndex(color){var hash=color.r.toString()+color.g.toString()+color.b.toString();if(void 0!==colorsHash[hash])return colorsHash[hash];
colorsHash[hash]=colors.length;colors.push(color.getHex());return colorsHash[hash]}function getUvIndex(uv){var hash=uv.x.toString()+uv.y.toString();if(void 0!==uvsHash[hash])return uvsHash[hash];uvsHash[hash]=uvs.length/2;uvs.push(uv.x,uv.y);return uvsHash[hash]}var data={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};data.uuid=this.uuid;data.type=this.type;""!==this.name&&(data.name=this.name);if(void 0!==this.parameters){var parameters=this.parameters,key;for(key in parameters)void 0!==
parameters[key]&&(data[key]=parameters[key]);return data}parameters=[];for(key=0;key<this.vertices.length;key++){var vertex=this.vertices[key];parameters.push(vertex.x,vertex.y,vertex.z)}vertex=[];var normals=[],normalsHash={},colors=[],colorsHash={},uvs=[],uvsHash={};for(key=0;key<this.faces.length;key++){var face=this.faces[key],hasFaceVertexUv=void 0!==this.faceVertexUvs[0][key],hasFaceNormal=0<face.normal.length(),hasFaceVertexNormal=0<face.vertexNormals.length,hasFaceColor=1!==face.color.r||
1!==face.color.g||1!==face.color.b,hasFaceVertexColor=0<face.vertexColors.length,faceType=0;faceType=setBit(faceType,0,0);faceType=setBit(faceType,1,!0);faceType=setBit(faceType,2,!1);faceType=setBit(faceType,3,hasFaceVertexUv);faceType=setBit(faceType,4,hasFaceNormal);faceType=setBit(faceType,5,hasFaceVertexNormal);faceType=setBit(faceType,6,hasFaceColor);faceType=setBit(faceType,7,hasFaceVertexColor);vertex.push(faceType);vertex.push(face.a,face.b,face.c);vertex.push(face.materialIndex);hasFaceVertexUv&&
(hasFaceVertexUv=this.faceVertexUvs[0][key],vertex.push(getUvIndex(hasFaceVertexUv[0]),getUvIndex(hasFaceVertexUv[1]),getUvIndex(hasFaceVertexUv[2])));hasFaceNormal&&vertex.push(getNormalIndex(face.normal));hasFaceVertexNormal&&(hasFaceNormal=face.vertexNormals,vertex.push(getNormalIndex(hasFaceNormal[0]),getNormalIndex(hasFaceNormal[1]),getNormalIndex(hasFaceNormal[2])));hasFaceColor&&vertex.push(getColorIndex(face.color));hasFaceVertexColor&&(face=face.vertexColors,vertex.push(getColorIndex(face[0]),
getColorIndex(face[1]),getColorIndex(face[2])))}data.data={};data.data.vertices=parameters;data.data.normals=normals;0<colors.length&&(data.data.colors=colors);0<uvs.length&&(data.data.uvs=[uvs]);data.data.faces=vertex;return data},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(source){this.vertices=[];this.faces=[];this.faceVertexUvs=[[]];for(var vertices=source.vertices,i=0,il=vertices.length;i<il;i++)this.vertices.push(vertices[i].clone());vertices=source.faces;i=0;for(il=
vertices.length;i<il;i++)this.faces.push(vertices[i].clone());i=0;for(il=source.faceVertexUvs.length;i<il;i++){vertices=source.faceVertexUvs[i];void 0===this.faceVertexUvs[i]&&(this.faceVertexUvs[i]=[]);for(var j=0,jl=vertices.length;j<jl;j++){for(var uvs=vertices[j],uvsCopy=[],k=0,kl=uvs.length;k<kl;k++)uvsCopy.push(uvs[k].clone());this.faceVertexUvs[i].push(uvsCopy)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});THREE.GeometryIdCount=0;THREE.DirectGeometry=function(){Object.defineProperty(this,
"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="DirectGeometry";this.indices=[];this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1};Object.assign(THREE.DirectGeometry.prototype,THREE.EventDispatcher.prototype,
{computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.")},computeVertexNormals:function(){console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.")},computeGroups:function(geometry){var groups=[];geometry=geometry.faces;for(var i=0;i<geometry.length;i++){var face=
geometry[i];if(face.materialIndex!==materialIndex){var materialIndex=face.materialIndex;void 0!==group&&(group.count=3*i-group.start,groups.push(group));var group={start:3*i,materialIndex:materialIndex}}}void 0!==group&&(group.count=3*i-group.start,groups.push(group));this.groups=groups},fromGeometry:function(geometry){var faces=geometry.faces,vertices=geometry.vertices,faceVertexUvs=geometry.faceVertexUvs,hasFaceVertexUv=faceVertexUvs[0]&&0<faceVertexUvs[0].length,hasFaceVertexUv2=faceVertexUvs[1]&&
0<faceVertexUvs[1].length,morphTargets=geometry.morphTargets,morphTargetsLength=morphTargets.length;if(0<morphTargetsLength){var morphTargetsPosition=[];for(var i=0;i<morphTargetsLength;i++)morphTargetsPosition[i]=[];this.morphTargets.position=morphTargetsPosition}var morphNormals=geometry.morphNormals,morphNormalsLength=morphNormals.length;if(0<morphNormalsLength){var morphTargetsNormal=[];for(i=0;i<morphNormalsLength;i++)morphTargetsNormal[i]=[];this.morphTargets.normal=morphTargetsNormal}var skinIndices=
geometry.skinIndices,skinWeights=geometry.skinWeights,hasSkinIndices=skinIndices.length===vertices.length,hasSkinWeights=skinWeights.length===vertices.length;for(i=0;i<faces.length;i++){var face=faces[i];this.vertices.push(vertices[face.a],vertices[face.b],vertices[face.c]);var vertexNormals=face.vertexNormals;3===vertexNormals.length?this.normals.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]):(vertexNormals=face.normal,this.normals.push(vertexNormals,vertexNormals,vertexNormals));vertexNormals=
face.vertexColors;3===vertexNormals.length?this.colors.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]):(vertexNormals=face.color,this.colors.push(vertexNormals,vertexNormals,vertexNormals));!0===hasFaceVertexUv&&(vertexNormals=faceVertexUvs[0][i],void 0!==vertexNormals?this.uvs.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",i),this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));!0===hasFaceVertexUv2&&
(vertexNormals=faceVertexUvs[1][i],void 0!==vertexNormals?this.uvs2.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",i),this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2)));for(vertexNormals=0;vertexNormals<morphTargetsLength;vertexNormals++){var morphTarget=morphTargets[vertexNormals].vertices;morphTargetsPosition[vertexNormals].push(morphTarget[face.a],morphTarget[face.b],morphTarget[face.c])}for(vertexNormals=
0;vertexNormals<morphNormalsLength;vertexNormals++)morphTarget=morphNormals[vertexNormals].vertexNormals[i],morphTargetsNormal[vertexNormals].push(morphTarget.a,morphTarget.b,morphTarget.c);hasSkinIndices&&this.skinIndices.push(skinIndices[face.a],skinIndices[face.b],skinIndices[face.c]);hasSkinWeights&&this.skinWeights.push(skinWeights[face.a],skinWeights[face.b],skinWeights[face.c])}this.computeGroups(geometry);this.verticesNeedUpdate=geometry.verticesNeedUpdate;this.normalsNeedUpdate=geometry.normalsNeedUpdate;
this.colorsNeedUpdate=geometry.colorsNeedUpdate;this.uvsNeedUpdate=geometry.uvsNeedUpdate;this.groupsNeedUpdate=geometry.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange=
{start:0,count:Infinity}};Object.assign(THREE.BufferGeometry.prototype,THREE.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(index){this.index=index},addAttribute:function(name,attribute,JSCompiler_OptimizeArgumentsArray_p0){if(!1===attribute instanceof THREE.BufferAttribute&&!1===attribute instanceof THREE.InterleavedBufferAttribute)console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(name,new THREE.BufferAttribute(attribute,
JSCompiler_OptimizeArgumentsArray_p0));else if("index"===name)console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(attribute);else return this.attributes[name]=attribute,this},getAttribute:function(name){return this.attributes[name]},removeAttribute:function(name){delete this.attributes[name];return this},addGroup:function(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:void 0!==materialIndex?materialIndex:0})},clearGroups:function(){this.groups=
[]},setDrawRange:function(start,count){this.drawRange.start=start;this.drawRange.count=count},applyMatrix:function(matrix){var position=this.attributes.position;void 0!==position&&(matrix.applyToVector3Array(position.array),position.needsUpdate=!0);position=this.attributes.normal;void 0!==position&&((new THREE.Matrix3).getNormalMatrix(matrix).applyToVector3Array(position.array),position.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();
return this},rotateX:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationX(angle);this.applyMatrix(m1);return this}}(),rotateY:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationY(angle);this.applyMatrix(m1);return this}}(),rotateZ:function(){var m1;return function(angle){void 0===m1&&(m1=new THREE.Matrix4);m1.makeRotationZ(angle);this.applyMatrix(m1);return this}}(),translate:function(){var m1;return function(x,y,z){void 0===
m1&&(m1=new THREE.Matrix4);m1.makeTranslation(x,y,z);this.applyMatrix(m1);return this}}(),scale:function(){var m1;return function(x,y,z){void 0===m1&&(m1=new THREE.Matrix4);m1.makeScale(x,y,z);this.applyMatrix(m1);return this}}(),lookAt:function(){var obj;return function(vector){void 0===obj&&(obj=new THREE.Object3D);obj.lookAt(vector);obj.updateMatrix();this.applyMatrix(obj.matrix)}}(),center:function(){this.computeBoundingBox();var offset=this.boundingBox.center().negate();this.translate(offset.x,
offset.y,offset.z);return offset},setFromObject:function(object){var geometry=object.geometry;if(object instanceof THREE.Points||object instanceof THREE.Line){object=new THREE.Float32Attribute(3*geometry.vertices.length,3);var colors=new THREE.Float32Attribute(3*geometry.colors.length,3);this.addAttribute("position",object.copyVector3sArray(geometry.vertices));this.addAttribute("color",colors.copyColorsArray(geometry.colors));geometry.lineDistances&&geometry.lineDistances.length===geometry.vertices.length&&
(object=new THREE.Float32Attribute(geometry.lineDistances.length,1),this.addAttribute("lineDistance",object.copyArray(geometry.lineDistances)));null!==geometry.boundingSphere&&(this.boundingSphere=geometry.boundingSphere.clone());null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone())}else object instanceof THREE.Mesh&&geometry instanceof THREE.Geometry&&this.fromGeometry(geometry);return this},updateFromObject:function(object){var geometry=object.geometry;if(object instanceof
THREE.Mesh){var direct=geometry.__directGeometry;if(void 0===direct)return this.fromGeometry(geometry);direct.verticesNeedUpdate=geometry.verticesNeedUpdate;direct.normalsNeedUpdate=geometry.normalsNeedUpdate;direct.colorsNeedUpdate=geometry.colorsNeedUpdate;direct.uvsNeedUpdate=geometry.uvsNeedUpdate;direct.groupsNeedUpdate=geometry.groupsNeedUpdate;geometry.verticesNeedUpdate=!1;geometry.normalsNeedUpdate=!1;geometry.colorsNeedUpdate=!1;geometry.uvsNeedUpdate=!1;geometry.groupsNeedUpdate=!1;geometry=
direct}!0===geometry.verticesNeedUpdate&&(direct=this.attributes.position,void 0!==direct&&(direct.copyVector3sArray(geometry.vertices),direct.needsUpdate=!0),geometry.verticesNeedUpdate=!1);!0===geometry.normalsNeedUpdate&&(direct=this.attributes.normal,void 0!==direct&&(direct.copyVector3sArray(geometry.normals),direct.needsUpdate=!0),geometry.normalsNeedUpdate=!1);!0===geometry.colorsNeedUpdate&&(direct=this.attributes.color,void 0!==direct&&(direct.copyColorsArray(geometry.colors),direct.needsUpdate=
!0),geometry.colorsNeedUpdate=!1);geometry.uvsNeedUpdate&&(direct=this.attributes.uv,void 0!==direct&&(direct.copyVector2sArray(geometry.uvs),direct.needsUpdate=!0),geometry.uvsNeedUpdate=!1);geometry.lineDistancesNeedUpdate&&(direct=this.attributes.lineDistance,void 0!==direct&&(direct.copyArray(geometry.lineDistances),direct.needsUpdate=!0),geometry.lineDistancesNeedUpdate=!1);geometry.groupsNeedUpdate&&(geometry.computeGroups(object.geometry),this.groups=geometry.groups,geometry.groupsNeedUpdate=
!1);return this},fromGeometry:function(geometry){geometry.__directGeometry=(new THREE.DirectGeometry).fromGeometry(geometry);return this.fromDirectGeometry(geometry.__directGeometry)},fromDirectGeometry:function(geometry){var positions=new Float32Array(3*geometry.vertices.length);this.addAttribute("position",(new THREE.BufferAttribute(positions,3)).copyVector3sArray(geometry.vertices));0<geometry.normals.length&&(positions=new Float32Array(3*geometry.normals.length),this.addAttribute("normal",(new THREE.BufferAttribute(positions,
3)).copyVector3sArray(geometry.normals)));0<geometry.colors.length&&(positions=new Float32Array(3*geometry.colors.length),this.addAttribute("color",(new THREE.BufferAttribute(positions,3)).copyColorsArray(geometry.colors)));0<geometry.uvs.length&&(positions=new Float32Array(2*geometry.uvs.length),this.addAttribute("uv",(new THREE.BufferAttribute(positions,2)).copyVector2sArray(geometry.uvs)));0<geometry.uvs2.length&&(positions=new Float32Array(2*geometry.uvs2.length),this.addAttribute("uv2",(new THREE.BufferAttribute(positions,
2)).copyVector2sArray(geometry.uvs2)));0<geometry.indices.length&&(positions=new (65535<geometry.vertices.length?Uint32Array:Uint16Array)(3*geometry.indices.length),this.setIndex((new THREE.BufferAttribute(positions,1)).copyIndicesArray(geometry.indices)));this.groups=geometry.groups;for(var name in geometry.morphTargets){positions=[];for(var morphTargets=geometry.morphTargets[name],i=0,l=morphTargets.length;i<l;i++){var morphTarget=morphTargets[i],attribute=new THREE.Float32Attribute(3*morphTarget.length,
3);positions.push(attribute.copyVector3sArray(morphTarget))}this.morphAttributes[name]=positions}0<geometry.skinIndices.length&&(name=new THREE.Float32Attribute(4*geometry.skinIndices.length,4),this.addAttribute("skinIndex",name.copyVector4sArray(geometry.skinIndices)));0<geometry.skinWeights.length&&(name=new THREE.Float32Attribute(4*geometry.skinWeights.length,4),this.addAttribute("skinWeight",name.copyVector4sArray(geometry.skinWeights)));null!==geometry.boundingSphere&&(this.boundingSphere=geometry.boundingSphere.clone());
null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var positions=this.attributes.position.array;void 0!==positions?this.boundingBox.setFromArray(positions):this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
this)},computeBoundingSphere:function(){var box=new THREE.Box3,vector=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var positions=this.attributes.position.array;if(positions){var center=this.boundingSphere.center;box.setFromArray(positions);box.center(center);for(var maxRadiusSq=0,i=0,il=positions.length;i<il;i+=3)vector.fromArray(positions,i),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(vector));this.boundingSphere.radius=Math.sqrt(maxRadiusSq);
isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var index=this.index,attributes=this.attributes,groups=this.groups;if(attributes.position){var positions=attributes.position.array;if(void 0===attributes.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(positions.length),3));
else for(var array=attributes.normal.array,i=0,il=array.length;i<il;i++)array[i]=0;array=attributes.normal.array;var pA=new THREE.Vector3,pB=new THREE.Vector3,pC=new THREE.Vector3,cb=new THREE.Vector3,ab=new THREE.Vector3;if(index){index=index.array;0===groups.length&&this.addGroup(0,index.length);for(var j=0,jl=groups.length;j<jl;++j){i=groups[j];il=i.start;var vA=i.count;i=il;for(il+=vA;i<il;i+=3){vA=3*index[i+0];var vB=3*index[i+1];var vC=3*index[i+2];pA.fromArray(positions,vA);pB.fromArray(positions,
vB);pC.fromArray(positions,vC);cb.subVectors(pC,pB);ab.subVectors(pA,pB);cb.cross(ab);array[vA]+=cb.x;array[vA+1]+=cb.y;array[vA+2]+=cb.z;array[vB]+=cb.x;array[vB+1]+=cb.y;array[vB+2]+=cb.z;array[vC]+=cb.x;array[vC+1]+=cb.y;array[vC+2]+=cb.z}}}else for(i=0,il=positions.length;i<il;i+=9)pA.fromArray(positions,i),pB.fromArray(positions,i+3),pC.fromArray(positions,i+6),cb.subVectors(pC,pB),ab.subVectors(pA,pB),cb.cross(ab),array[i]=cb.x,array[i+1]=cb.y,array[i+2]=cb.z,array[i+3]=cb.x,array[i+4]=cb.y,
array[i+5]=cb.z,array[i+6]=cb.x,array[i+7]=cb.y,array[i+8]=cb.z;this.normalizeNormals();attributes.normal.needsUpdate=!0}},merge:function(geometry,offset){if(!1===geometry instanceof THREE.BufferGeometry)console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",geometry);else{void 0===offset&&(offset=0);var attributes=this.attributes,key;for(key in attributes)if(void 0!==geometry.attributes[key]){var attributeArray1=attributes[key].array,attribute2=geometry.attributes[key],
attributeArray2=attribute2.array,i=0;for(attribute2=attribute2.itemSize*offset;i<attributeArray2.length;i++,attribute2++)attributeArray1[attribute2]=attributeArray2[i]}return this}},normalizeNormals:function(){for(var normals=this.attributes.normal.array,x,y,z,i=0,il=normals.length;i<il;i+=3)x=normals[i],y=normals[i+1],z=normals[i+2],x=1/Math.sqrt(x*x+y*y+z*z),normals[i]*=x,normals[i+1]*=x,normals[i+2]*=x},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),
this;var geometry2=new THREE.BufferGeometry,indices=this.index.array,attributes=this.attributes,name;for(name in attributes){var attribute=attributes[name],array=attribute.array;attribute=attribute.itemSize;for(var array2=new array.constructor(indices.length*attribute),index,index2=0,i=0,l=indices.length;i<l;i++){index=indices[i]*attribute;for(var j=0;j<attribute;j++)array2[index2++]=array[index++]}geometry2.addAttribute(name,new THREE.BufferAttribute(array2,attribute))}return geometry2},toJSON:function(){var data=
{metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};data.uuid=this.uuid;data.type=this.type;""!==this.name&&(data.name=this.name);if(void 0!==this.parameters){var parameters=this.parameters;for(key in parameters)void 0!==parameters[key]&&(data[key]=parameters[key]);return data}data.data={attributes:{}};var index=this.index;null!==index&&(parameters=Array.prototype.slice.call(index.array),data.data.index={type:index.array.constructor.name,array:parameters});index=this.attributes;
for(key in index){var attribute=index[key];parameters=Array.prototype.slice.call(attribute.array);data.data.attributes[key]={itemSize:attribute.itemSize,type:attribute.array.constructor.name,array:parameters,normalized:attribute.normalized}}var key=this.groups;0<key.length&&(data.data.groups=JSON.parse(JSON.stringify(key)));key=this.boundingSphere;null!==key&&(data.data.boundingSphere={center:key.center.toArray(),radius:key.radius});return data},clone:function(){return(new THREE.BufferGeometry).copy(this)},
copy:function(source){var index=source.index;null!==index&&this.setIndex(index.clone());index=source.attributes;for(var name in index)this.addAttribute(name,index[name].clone());source=source.groups;name=0;for(index=source.length;name<index;name++){var group=source[name];this.addGroup(group.start,group.count,group.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});THREE.BufferGeometry.MaxIndex=65535;THREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this);
this.type="InstancedBufferGeometry";this.maxInstancedCount=void 0};THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addGroup=function(start,count,instances){this.groups.push({start:start,count:count,instances:instances})};THREE.InstancedBufferGeometry.prototype.copy=function(source){var index=source.index;null!==index&&this.setIndex(index.clone());
index=source.attributes;for(var name in index)this.addAttribute(name,index[name].clone());source=source.groups;name=0;for(index=source.length;name<index;name++){var group=source[name];this.addGroup(group.start,group.count,group.instances)}return this};THREE.Uniform=function(value,JSCompiler_OptimizeArgumentsArray_p1){"string"===typeof value&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),value=JSCompiler_OptimizeArgumentsArray_p1);this.value=value;this.dynamic=!1};THREE.Uniform.prototype=
{constructor:THREE.Uniform,onUpdate:function(callback){this.dynamic=!0;this.onUpdateCallback=callback;return this}};THREE.AnimationAction=function(){throw Error("THREE.AnimationAction: Use mixer.clipAction for construction.");};THREE.AnimationAction._new=function(mixer,clip,localRoot){this._mixer=mixer;this._clip=clip;this._localRoot=localRoot||null;mixer=clip.tracks;clip=mixer.length;localRoot=Array(clip);for(var interpolantSettings={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},
i=0;i!==clip;++i){var interpolant=mixer[i].createInterpolant(null);localRoot[i]=interpolant;interpolant.settings=interpolantSettings}this._interpolantSettings=interpolantSettings;this._interpolants=localRoot;this._propertyBindings=Array(clip);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=THREE.LoopRepeat;this._loopCount=-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=
Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0};THREE.AnimationAction._new.prototype={constructor:THREE.AnimationAction._new,play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},reset:function(){this.paused=!1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&
!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(time){this._startTime=time;return this},setLoop:function(mode,repetitions){this.loop=mode;this.repetitions=repetitions;return this},setEffectiveWeight:function(weight){this.weight=weight;this._effectiveWeight=this.enabled?weight:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(duration){return this._scheduleFading(duration,
0,1)},fadeOut:function(duration){return this._scheduleFading(duration,1,0)},crossFadeFrom:function(fadeOutAction,duration,warp){fadeOutAction.fadeOut(duration);this.fadeIn(duration);if(warp){warp=this._clip.duration;var fadeOutDuration=fadeOutAction._clip.duration,endStartRatio=warp/fadeOutDuration;fadeOutAction.warp(1,fadeOutDuration/warp,duration);this.warp(endStartRatio,1,duration)}return this},crossFadeTo:function(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp)},
stopFading:function(){var weightInterpolant=this._weightInterpolant;null!==weightInterpolant&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(weightInterpolant));return this},setEffectiveTimeScale:function(timeScale){this.timeScale=timeScale;this._effectiveTimeScale=this.paused?0:timeScale;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(duration){this.timeScale=this._clip.duration/duration;return this.stopWarping()},
syncWith:function(action){this.time=action.time;this.timeScale=action.timeScale;return this.stopWarping()},halt:function(duration){return this.warp(this._effectiveTimeScale,0,duration)},warp:function(startTimeScale,endTimeScale,duration){var mixer=this._mixer,now=mixer.time,interpolant=this._timeScaleInterpolant,timeScale=this.timeScale;null===interpolant&&(this._timeScaleInterpolant=interpolant=mixer._lendControlInterpolant());mixer=interpolant.parameterPositions;interpolant=interpolant.sampleValues;
mixer[0]=now;mixer[1]=now+duration;interpolant[0]=startTimeScale/timeScale;interpolant[1]=endTimeScale/timeScale;return this},stopWarping:function(){var timeScaleInterpolant=this._timeScaleInterpolant;null!==timeScaleInterpolant&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(timeScaleInterpolant));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(time,
deltaTime,timeDirection,accuIndex){var startTime=this._startTime;if(null!==startTime){deltaTime=(time-startTime)*timeDirection;if(0>deltaTime||0===timeDirection)return;this._startTime=null;deltaTime*=timeDirection}deltaTime*=this._updateTimeScale(time);timeDirection=this._updateTime(deltaTime);time=this._updateWeight(time);if(0<time){deltaTime=this._interpolants;startTime=this._propertyBindings;for(var j=0,m=deltaTime.length;j!==m;++j)deltaTime[j].evaluate(timeDirection),startTime[j].accumulate(accuIndex,
time)}},_updateWeight:function(time){var weight=0;if(this.enabled){weight=this.weight;var interpolant=this._weightInterpolant;if(null!==interpolant){var interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue;time>interpolant.parameterPositions[1]&&(this.stopFading(),0===interpolantValue&&(this.enabled=!1))}}return this._effectiveWeight=weight},_updateTimeScale:function(time){var timeScale=0;if(!this.paused){timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(null!==
interpolant){var interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue;time>interpolant.parameterPositions[1]&&(this.stopWarping(),0===timeScale?this.paused=!0:this.timeScale=timeScale)}}return this._effectiveTimeScale=timeScale},_updateTime:function(deltaTime){var time=this.time+deltaTime;if(0===deltaTime)return time;var duration=this._clip.duration,loop=this.loop,loopCount=this._loopCount;if(loop===THREE.LoopOnce)a:{if(-1===loopCount&&(this.loopCount=0,this._setEndings(!0,!0,
!1)),time>=duration)time=duration;else if(0>time)time=0;else break a;this.clampWhenFinished?this.paused=!0:this.enabled=!1;this._mixer.dispatchEvent({type:"finished",action:this,direction:0>deltaTime?-1:1})}else{loop=loop===THREE.LoopPingPong;-1===loopCount&&(0<=deltaTime?(loopCount=0,this._setEndings(!0,0===this.repetitions,loop)):this._setEndings(0===this.repetitions,!0,loop));if(time>=duration||0>time){var loopDelta=Math.floor(time/duration);time-=duration*loopDelta;loopCount+=Math.abs(loopDelta);
var pending=this.repetitions-loopCount;0>pending?(this.clampWhenFinished?this.paused=!0:this.enabled=!1,time=0<deltaTime?duration:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:0<deltaTime?1:-1})):(0===pending?(deltaTime=0>deltaTime,this._setEndings(deltaTime,!deltaTime,loop)):this._setEndings(!1,!1,loop),this._loopCount=loopCount,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:loopDelta}))}if(loop&&1===(loopCount&1))return this.time=time,duration-time}return this.time=
time},_setEndings:function(atStart,atEnd,pingPong){var settings=this._interpolantSettings;pingPong?(settings.endingStart=THREE.ZeroSlopeEnding,settings.endingEnd=THREE.ZeroSlopeEnding):(settings.endingStart=atStart?this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding,settings.endingEnd=atEnd?this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:THREE.WrapAroundEnding)},_scheduleFading:function(duration,weightNow,weightThen){var mixer=this._mixer,
now=mixer.time,interpolant=this._weightInterpolant;null===interpolant&&(this._weightInterpolant=interpolant=mixer._lendControlInterpolant());mixer=interpolant.parameterPositions;interpolant=interpolant.sampleValues;mixer[0]=now;interpolant[0]=weightNow;mixer[1]=now+duration;interpolant[1]=weightThen;return this}};THREE.AnimationClip=function(name,duration,tracks){this.name=name;this.tracks=tracks;this.duration=void 0!==duration?duration:-1;this.uuid=THREE.Math.generateUUID();0>this.duration&&this.resetDuration();
this.trim();this.optimize()};THREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var duration=0,i=0,n=this.tracks.length;i!==n;++i){var track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1])}this.duration=duration},trim:function(){for(var i=0;i<this.tracks.length;i++)this.tracks[i].trim(0,this.duration);return this},optimize:function(){for(var i=0;i<this.tracks.length;i++)this.tracks[i].optimize();return this}};Object.assign(THREE.AnimationClip,
{parse:function(json){for(var tracks=[],jsonTracks=json.tracks,frameTime=1/(json.fps||1),i=0,n=jsonTracks.length;i!==n;++i)tracks.push(THREE.KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));return new THREE.AnimationClip(json.name,json.duration,tracks)},toJSON:function(clip){var tracks=[],clipTracks=clip.tracks;clip={name:clip.name,duration:clip.duration,tracks:tracks};for(var i=0,n=clipTracks.length;i!==n;++i)tracks.push(THREE.KeyframeTrack.toJSON(clipTracks[i]));return clip},CreateFromMorphTargetSequence:function(name,
morphTargetSequence,fps,noLoop){for(var numMorphTargets=morphTargetSequence.length,tracks=[],i=0;i<numMorphTargets;i++){var times=[],values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets);values.push(0,1,0);var order=THREE.AnimationUtils.getKeyframeOrder(times);times=THREE.AnimationUtils.sortedArray(times,1,order);values=THREE.AnimationUtils.sortedArray(values,1,order);noLoop||0!==times[0]||(times.push(numMorphTargets),values.push(values[0]));tracks.push((new THREE.NumberKeyframeTrack(".morphTargetInfluences["+
morphTargetSequence[i].name+"]",times,values)).scale(1/fps))}return new THREE.AnimationClip(name,-1,tracks)},findByName:function(objectOrClipArray,name){var clipArray=objectOrClipArray;Array.isArray(objectOrClipArray)||(clipArray=objectOrClipArray.geometry&&objectOrClipArray.geometry.animations||objectOrClipArray.animations);for(objectOrClipArray=0;objectOrClipArray<clipArray.length;objectOrClipArray++)if(clipArray[objectOrClipArray].name===name)return clipArray[objectOrClipArray];return null},CreateClipsFromMorphTargetSequences:function(morphTargets,
fps,noLoop){for(var animationToMorphTargets={},pattern=/^([\w-]*?)([\d]+)$/,i=0,il=morphTargets.length;i<il;i++){var morphTarget=morphTargets[i],parts=morphTarget.name.match(pattern);if(parts&&1<parts.length){var name=parts[1];(parts=animationToMorphTargets[name])||(animationToMorphTargets[name]=parts=[]);parts.push(morphTarget)}}morphTargets=[];for(name in animationToMorphTargets)morphTargets.push(THREE.AnimationClip.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));return morphTargets},
parseAnimation:function(animation,bones,nodeName){if(!animation)return console.error("  no animation in JSONLoader data"),null;nodeName=function(trackType,trackName,animationKeys,propertyName,destTracks){if(0!==animationKeys.length){var times=[],values=[];THREE.AnimationUtils.flattenJSON(animationKeys,times,values,propertyName);0!==times.length&&destTracks.push(new trackType(trackName,times,values))}};var tracks=[],clipName=animation.name||"default",duration=animation.length||-1,fps=animation.fps||
30;animation=animation.hierarchy||[];for(var h=0;h<animation.length;h++){var animationKeys=animation[h].keys;if(animationKeys&&0!==animationKeys.length)if(animationKeys[0].morphTargets){duration={};for(var k=0;k<animationKeys.length;k++)if(animationKeys[k].morphTargets)for(var m=0;m<animationKeys[k].morphTargets.length;m++)duration[animationKeys[k].morphTargets[m]]=-1;for(var morphTargetName in duration){var times$jscomp$0=[],values$jscomp$0=[];for(m=0;m!==animationKeys[k].morphTargets.length;++m){var animationKey=
animationKeys[k];times$jscomp$0.push(animationKey.time);values$jscomp$0.push(animationKey.morphTarget===morphTargetName?1:0)}tracks.push(new THREE.NumberKeyframeTrack(".morphTargetInfluence["+morphTargetName+"]",times$jscomp$0,values$jscomp$0))}duration=duration.length*(fps||1)}else k=".bones["+bones[h].name+"]",nodeName(THREE.VectorKeyframeTrack,k+".position",animationKeys,"pos",tracks),nodeName(THREE.QuaternionKeyframeTrack,k+".quaternion",animationKeys,"rot",tracks),nodeName(THREE.VectorKeyframeTrack,
k+".scale",animationKeys,"scl",tracks)}return 0===tracks.length?null:new THREE.AnimationClip(clipName,duration,tracks)}});THREE.AnimationMixer=function(root){this._root=root;this._initMemoryManager();this.time=this._accuIndex=0;this.timeScale=1};Object.assign(THREE.AnimationMixer.prototype,THREE.EventDispatcher.prototype,{clipAction:function(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid;root="string"===typeof clip?THREE.AnimationClip.findByName(root,clip):clip;clip=null!==
root?root.uuid:clip;var actionsForClip=this._actionsByClip[clip],prototypeAction=null;if(void 0!==actionsForClip){prototypeAction=actionsForClip.actionByRoot[rootUuid];if(void 0!==prototypeAction)return prototypeAction;prototypeAction=actionsForClip.knownActions[0];null===root&&(root=prototypeAction._clip)}if(null===root)return null;optionalRoot=new THREE.AnimationMixer._Action(this,root,optionalRoot);this._bindAction(optionalRoot,prototypeAction);this._addInactiveAction(optionalRoot,clip,rootUuid);
return optionalRoot},existingAction:function(clip,optionalRoot){var root=optionalRoot||this._root;optionalRoot=root.uuid;root="string"===typeof clip?THREE.AnimationClip.findByName(root,clip):clip;clip=this._actionsByClip[root?root.uuid:clip];return void 0!==clip?clip.actionByRoot[optionalRoot]||null:null},stopAllAction:function(){for(var actions=this._actions,nActions=this._nActiveActions,bindings=this._bindings,nBindings=this._nActiveBindings,i=this._nActiveBindings=this._nActiveActions=0;i!==nActions;++i)actions[i].reset();
for(i=0;i!==nBindings;++i)bindings[i].useCount=0;return this},update:function(deltaTime){deltaTime*=this.timeScale;for(var actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1,i=0;i!==nActions;++i){var action=actions[i];action.enabled&&action._update(time,deltaTime,timeDirection,accuIndex)}deltaTime=this._bindings;actions=this._nActiveBindings;for(i=0;i!==actions;++i)deltaTime[i].apply(accuIndex);return this},
getRoot:function(){return this._root},uncacheClip:function(clip){var actions=this._actions;clip=clip.uuid;var actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clip];if(void 0!==actionsForClip){actionsForClip=actionsForClip.knownActions;for(var i=0,n=actionsForClip.length;i!==n;++i){var action=actionsForClip[i];this._deactivateAction(action);var cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null;action._byClipCacheIndex=null;lastInactiveAction._cacheIndex=
cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();this._removeInactiveBindingsForAction(action)}delete actionsByClip[clip]}},uncacheRoot:function(root){root=root.uuid;var actionsByClip=this._actionsByClip;for(clipUuid in actionsByClip){var action=actionsByClip[clipUuid].actionByRoot[root];void 0!==action&&(this._deactivateAction(action),this._removeInactiveAction(action))}var clipUuid=this._bindingsByRootAndName[root];if(void 0!==clipUuid)for(var trackName in clipUuid)root=clipUuid[trackName],
root.restoreOriginalState(),this._removeInactiveBinding(root)},uncacheAction:function(clip,optionalRoot){clip=this.existingAction(clip,optionalRoot);null!==clip&&(this._deactivateAction(clip),this._removeInactiveAction(clip))}});THREE.AnimationMixer._Action=THREE.AnimationAction._new;Object.assign(THREE.AnimationMixer.prototype,{_bindAction:function(action,prototypeAction){var root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings;action=
action._interpolants;var rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName,bindingsByName=bindingsByRoot[rootUuid];void 0===bindingsByName&&(bindingsByName={},bindingsByRoot[rootUuid]=bindingsByName);for(bindingsByRoot=0;bindingsByRoot!==nTracks;++bindingsByRoot){var track=tracks[bindingsByRoot],trackName=track.name,binding=bindingsByName[trackName];if(void 0===binding){binding=bindings[bindingsByRoot];if(void 0!==binding){null===binding._cacheIndex&&(++binding.referenceCount,this._addInactiveBinding(binding,
rootUuid,trackName));continue}binding=new THREE.PropertyMixer(THREE.PropertyBinding.create(root,trackName,prototypeAction&&prototypeAction._propertyBindings[bindingsByRoot].binding.parsedPath),track.ValueTypeName,track.getValueSize());++binding.referenceCount;this._addInactiveBinding(binding,rootUuid,trackName)}bindings[bindingsByRoot]=binding;action[bindingsByRoot].resultBuffer=binding.buffer}},_activateAction:function(action){if(!this._isActiveAction(action)){if(null===action._cacheIndex){var rootUuid=
(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]);this._addInactiveAction(action,clipUuid,rootUuid)}rootUuid=action._propertyBindings;clipUuid=0;for(actionsForClip=rootUuid.length;clipUuid!==actionsForClip;++clipUuid){var binding=rootUuid[clipUuid];0===binding.useCount++&&(this._lendBinding(binding),binding.saveOriginalState())}this._lendAction(action)}},_deactivateAction:function(action){if(this._isActiveAction(action)){for(var bindings=
action._propertyBindings,i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];0===--binding.useCount&&(binding.restoreOriginalState(),this._takeBackBinding(binding))}this._takeBackAction(action)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var scope=this;this.stats={actions:{get total(){return scope._actions.length},
get inUse(){return scope._nActiveActions}},bindings:{get total(){return scope._bindings.length},get inUse(){return scope._nActiveBindings}},controlInterpolants:{get total(){return scope._controlInterpolants.length},get inUse(){return scope._nActiveControlInterpolants}}}},_isActiveAction:function(action){action=action._cacheIndex;return null!==action&&action<this._nActiveActions},_addInactiveAction:function(action,clipUuid,rootUuid){var actions=this._actions,actionsByClip=this._actionsByClip,actionsForClip=
actionsByClip[clipUuid];void 0===actionsForClip?(actionsForClip={knownActions:[action],actionByRoot:{}},action._byClipCacheIndex=0,actionsByClip[clipUuid]=actionsForClip):(clipUuid=actionsForClip.knownActions,action._byClipCacheIndex=clipUuid.length,clipUuid.push(action));action._cacheIndex=actions.length;actions.push(action);actionsForClip.actionByRoot[rootUuid]=action},_removeInactiveAction:function(action){var actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;
lastInactiveAction._cacheIndex=cacheIndex;actions[cacheIndex]=lastInactiveAction;actions.pop();action._cacheIndex=null;lastInactiveAction=action._clip.uuid;cacheIndex=this._actionsByClip;var actionsForClip=cacheIndex[lastInactiveAction],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex;knownActionsForClip[byClipCacheIndex]=lastKnownAction;knownActionsForClip.pop();
action._byClipCacheIndex=null;delete actionsForClip.actionByRoot[(actions._localRoot||this._root).uuid];0===knownActionsForClip.length&&delete cacheIndex[lastInactiveAction];this._removeInactiveBindingsForAction(action)},_removeInactiveBindingsForAction:function(action){action=action._propertyBindings;for(var i=0,n=action.length;i!==n;++i){var binding=action[i];0===--binding.referenceCount&&this._removeInactiveBinding(binding)}},_lendAction:function(action){var actions=this._actions,prevIndex=action._cacheIndex,
lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex;actions[lastActiveIndex]=action;firstInactiveAction._cacheIndex=prevIndex;actions[prevIndex]=firstInactiveAction},_takeBackAction:function(action){var actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex;actions[firstInactiveIndex]=action;lastActiveAction._cacheIndex=
prevIndex;actions[prevIndex]=lastActiveAction},_addInactiveBinding:function(binding,rootUuid,trackName){var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],bindings=this._bindings;void 0===bindingByName&&(bindingByName={},bindingsByRoot[rootUuid]=bindingByName);bindingByName[trackName]=binding;binding._cacheIndex=bindings.length;bindings.push(binding)},_removeInactiveBinding:function(binding){var bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid;
propBinding=propBinding.path;var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1];binding=binding._cacheIndex;lastInactiveBinding._cacheIndex=binding;bindings[binding]=lastInactiveBinding;bindings.pop();delete bindingByName[propBinding];a:{for(var _ in bindingByName)break a;delete bindingsByRoot[rootUuid]}},_lendBinding:function(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,
firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex;bindings[lastActiveIndex]=binding;firstInactiveBinding._cacheIndex=prevIndex;bindings[prevIndex]=firstInactiveBinding},_takeBackBinding:function(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex;bindings[firstInactiveIndex]=binding;lastActiveBinding._cacheIndex=prevIndex;
bindings[prevIndex]=lastActiveBinding},_lendControlInterpolant:function(){var interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++,interpolant=interpolants[lastActiveIndex];void 0===interpolant&&(interpolant=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),interpolant.__cacheIndex=lastActiveIndex,interpolants[lastActiveIndex]=interpolant);return interpolant},_takeBackControlInterpolant:function(interpolant){var interpolants=
this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex;interpolants[firstInactiveIndex]=interpolant;lastActiveInterpolant.__cacheIndex=prevIndex;interpolants[prevIndex]=lastActiveInterpolant},_controlInterpolantsResultBuffer:new Float32Array(1)});THREE.AnimationObjectGroup=function(var_args){this.uuid=THREE.Math.generateUUID();this._objects=
Array.prototype.slice.call(arguments);this.nCachedObjects_=0;var indices={};this._indicesByUUID=indices;for(var i=0,n=arguments.length;i!==n;++i)indices[arguments[i].uuid]=i;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var scope=this;this.stats={objects:{get total(){return scope._objects.length},get inUse(){return this.total-scope.nCachedObjects_}},get bindingsPerObject(){return scope._bindings.length}}};THREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,
add:function(var_args){for(var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(void 0===index){index=nObjects++;indicesByUUID[uuid]=index;objects.push(object);uuid=0;for(var m=nBindings;uuid!==m;++uuid)bindings[uuid].push(new THREE.PropertyBinding(object,
paths[uuid],parsedPaths[uuid]))}else if(index<nCachedObjects){var knownObject=objects[index],firstActiveIndex=--nCachedObjects;m=objects[firstActiveIndex];indicesByUUID[m.uuid]=index;objects[index]=m;indicesByUUID[uuid]=firstActiveIndex;objects[firstActiveIndex]=object;uuid=0;for(m=nBindings;uuid!==m;++uuid){var bindingsForPath=bindings[uuid],binding=bindingsForPath[index];bindingsForPath[index]=bindingsForPath[firstActiveIndex];void 0===binding&&(binding=new THREE.PropertyBinding(object,paths[uuid],
parsedPaths[uuid]));bindingsForPath[firstActiveIndex]=binding}}else objects[index]!==knownObject&&console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...")}this.nCachedObjects_=nCachedObjects},remove:function(var_args){for(var objects=this._objects,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var object=arguments[i],
uuid=object.uuid,index=indicesByUUID[uuid];if(void 0!==index&&index>=nCachedObjects){var lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index;objects[index]=firstActiveObject;indicesByUUID[uuid]=lastCachedIndex;objects[lastCachedIndex]=object;object=0;for(uuid=nBindings;object!==uuid;++object){firstActiveObject=bindings[object];var binding=firstActiveObject[index];firstActiveObject[index]=firstActiveObject[lastCachedIndex];firstActiveObject[lastCachedIndex]=
binding}}}this.nCachedObjects_=nCachedObjects},uncache:function(var_args){for(var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var uuid=arguments[i].uuid,index=indicesByUUID[uuid];if(void 0!==index)if(delete indicesByUUID[uuid],index<nCachedObjects){uuid=--nCachedObjects;var lastCachedObject=objects[uuid],lastIndex=--nObjects,lastObject=objects[lastIndex];
indicesByUUID[lastCachedObject.uuid]=index;objects[index]=lastCachedObject;indicesByUUID[lastObject.uuid]=uuid;objects[uuid]=lastObject;objects.pop();lastCachedObject=0;for(lastObject=nBindings;lastCachedObject!==lastObject;++lastCachedObject){var bindingsForPath=bindings[lastCachedObject],last=bindingsForPath[lastIndex];bindingsForPath[index]=bindingsForPath[uuid];bindingsForPath[uuid]=last;bindingsForPath.pop()}}else for(lastIndex=--nObjects,lastObject=objects[lastIndex],indicesByUUID[lastObject.uuid]=
index,objects[index]=lastObject,objects.pop(),lastCachedObject=0,lastObject=nBindings;lastCachedObject!==lastObject;++lastCachedObject)bindingsForPath=bindings[lastCachedObject],bindingsForPath[index]=bindingsForPath[lastIndex],bindingsForPath.pop()}this.nCachedObjects_=nCachedObjects},subscribe_:function(path,parsedPath){var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path],bindings=this._bindings;if(void 0!==index)return bindings[index];var paths=this._paths,parsedPaths=this._parsedPaths,
objects=this._objects,nCachedObjects=this.nCachedObjects_,bindingsForPath=Array(objects.length);index=bindings.length;indicesByPath[path]=index;paths.push(path);parsedPaths.push(parsedPath);bindings.push(bindingsForPath);indicesByPath=nCachedObjects;for(index=objects.length;indicesByPath!==index;++indicesByPath)bindingsForPath[indicesByPath]=new THREE.PropertyBinding(objects[indicesByPath],path,parsedPath);return bindingsForPath},unsubscribe_:function(path){var indicesByPath=this._bindingsIndicesByPath,
index=indicesByPath[path];if(void 0!==index){var paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex];indicesByPath[path[lastBindingsIndex]]=index;bindings[index]=lastBindings;bindings.pop();parsedPaths[index]=parsedPaths[lastBindingsIndex];parsedPaths.pop();paths[index]=paths[lastBindingsIndex];paths.pop()}}};THREE.AnimationUtils={arraySlice:function(array,from,to){return THREE.AnimationUtils.isTypedArray(array)?
new array.constructor(array.subarray(from,to)):array.slice(from,to)},convertArray:function(array,type,forceClone){return!array||!forceClone&&array.constructor===type?array:"number"===typeof type.BYTES_PER_ELEMENT?new type(array):Array.prototype.slice.call(array)},isTypedArray:function(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView)},getKeyframeOrder:function(times){for(var n=times.length,result=Array(n),i$jscomp$0=0;i$jscomp$0!==n;++i$jscomp$0)result[i$jscomp$0]=i$jscomp$0;
result.sort(function(i,j){return times[i]-times[j]});return result},sortedArray:function(values,stride,order){for(var nValues=values.length,result=new values.constructor(nValues),i=0,dstOffset=0;dstOffset!==nValues;++i)for(var srcOffset=order[i]*stride,j=0;j!==stride;++j)result[dstOffset++]=values[srcOffset+j];return result},flattenJSON:function(jsonKeys,times,values,valuePropertyName){for(var i=1,key=jsonKeys[0];void 0!==key&&void 0===key[valuePropertyName];)key=jsonKeys[i++];if(void 0!==key){var value=
key[valuePropertyName];if(void 0!==value)if(Array.isArray(value)){do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),values.push.apply(values,value)),key=jsonKeys[i++];while(void 0!==key)}else if(void 0!==value.toArray){do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),value.toArray(values,values.length)),key=jsonKeys[i++];while(void 0!==key)}else{do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),values.push(value)),key=jsonKeys[i++];while(void 0!==
key)}}}};THREE.KeyframeTrack=function(name,times,values,interpolation){if(void 0===name)throw Error("track name is undefined");if(void 0===times||0===times.length)throw Error("no keyframes in track named "+name);this.name=name;this.times=THREE.AnimationUtils.convertArray(times,this.TimeBufferType);this.values=THREE.AnimationUtils.convertArray(values,this.ValueBufferType);this.setInterpolation(interpolation||this.DefaultInterpolation);this.validate();this.optimize()};THREE.KeyframeTrack.prototype=
{constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(result){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),result)},InterpolantFactoryMethodLinear:function(result){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),result)},InterpolantFactoryMethodSmooth:function(result){return new THREE.CubicInterpolant(this.times,
this.values,this.getValueSize(),result)},setInterpolation:function(interpolation){switch(interpolation){case THREE.InterpolateDiscrete:var factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth}if(void 0===factoryMethod){factoryMethod="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===
this.createInterpolant)if(interpolation!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw Error(factoryMethod);console.warn(factoryMethod)}else this.createInterpolant=factoryMethod},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},
getValueSize:function(){return this.values.length/this.times.length},shift:function(timeOffset){if(0!==timeOffset)for(var times=this.times,i=0,n=times.length;i!==n;++i)times[i]+=timeOffset;return this},scale:function(timeScale){if(1!==timeScale)for(var times=this.times,i=0,n=times.length;i!==n;++i)times[i]*=timeScale;return this},trim:function(startTime,endTime){for(var times=this.times,nKeys=times.length,from=0,to=nKeys-1;from!==nKeys&&times[from]<startTime;)++from;for(;-1!==to&&times[to]>endTime;)--to;
++to;if(0!==from||to!==nKeys)from>=to&&(to=Math.max(to,1),from=to-1),startTime=this.getValueSize(),this.times=THREE.AnimationUtils.arraySlice(times,from,to),this.values=THREE.AnimationUtils.arraySlice(this.values,from*startTime,to*startTime);return this},validate:function(){var valid=!0,valueSize=this.getValueSize();0!==valueSize-Math.floor(valueSize)&&(console.error("invalid value size in track",this),valid=!1);var times=this.times;valueSize=this.values;var nKeys=times.length;0===nKeys&&(console.error("track is empty",
this),valid=!1);for(var prevTime=null,i=0;i!==nKeys;i++){var currTime=times[i];if("number"===typeof currTime&&isNaN(currTime)){console.error("time is not a valid number",this,i,currTime);valid=!1;break}if(null!==prevTime&&prevTime>currTime){console.error("out of order keys",this,i,currTime,prevTime);valid=!1;break}prevTime=currTime}if(void 0!==valueSize&&THREE.AnimationUtils.isTypedArray(valueSize))for(i=0,times=valueSize.length;i!==times;++i)if(nKeys=valueSize[i],isNaN(nKeys)){console.error("value is not a valid number",
this,i,nKeys);valid=!1;break}return valid},optimize:function(){for(var times=this.times,values=this.values,stride=this.getValueSize(),writeIndex=1,i=1,n=times.length-1;i<=n;++i){var keep=!1,time=times[i];if(time!==times[i+1]&&(1!==i||time!==time[0])){var offset=i*stride,offsetP=offset-stride,offsetN=offset+stride;for(time=0;time!==stride;++time){var value=values[offset+time];if(value!==values[offsetP+time]||value!==values[offsetN+time]){keep=!0;break}}}if(keep){if(i!==writeIndex)for(times[writeIndex]=
times[i],keep=i*stride,offset=writeIndex*stride,time=0;time!==stride;++time)values[offset+time]=values[keep+time];++writeIndex}}writeIndex!==times.length&&(this.times=THREE.AnimationUtils.arraySlice(times,0,writeIndex),this.values=THREE.AnimationUtils.arraySlice(values,0,writeIndex*stride));return this}};Object.assign(THREE.KeyframeTrack,{parse:function(json){if(void 0===json.type)throw Error("track type undefined, can not parse");var trackType=THREE.KeyframeTrack._getTrackTypeForValueTypeName(json.type);
if(void 0===json.times){var times=[],values=[];THREE.AnimationUtils.flattenJSON(json.keys,times,values,"value");json.times=times;json.values=values}return void 0!==trackType.parse?trackType.parse(json):new trackType(json.name,json.times,json.values,json.interpolation)},toJSON:function(track){var trackType=track.constructor;if(void 0!==trackType.toJSON)trackType=trackType.toJSON(track);else{trackType={name:track.name,times:THREE.AnimationUtils.convertArray(track.times,Array),values:THREE.AnimationUtils.convertArray(track.values,
Array)};var interpolation=track.getInterpolation();interpolation!==track.DefaultInterpolation&&(trackType.interpolation=interpolation)}trackType.type=track.ValueTypeName;return trackType},_getTrackTypeForValueTypeName:function(typeName){switch(typeName.toLowerCase()){case "scalar":case "double":case "float":case "number":case "integer":return THREE.NumberKeyframeTrack;case "vector":case "vector2":case "vector3":case "vector4":return THREE.VectorKeyframeTrack;case "color":return THREE.ColorKeyframeTrack;
case "quaternion":return THREE.QuaternionKeyframeTrack;case "bool":case "boolean":return THREE.BooleanKeyframeTrack;case "string":return THREE.StringKeyframeTrack}throw Error("Unsupported typeName: "+typeName);}});THREE.PropertyBinding=function(rootNode,path,parsedPath){this.path=path;this.parsedPath=parsedPath||THREE.PropertyBinding.parseTrackName(path);this.node=THREE.PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode;this.rootNode=rootNode};THREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,
getValue:function(targetArray,offset){this.bind();this.getValue(targetArray,offset)},setValue:function(sourceArray,offset){this.bind();this.setValue(sourceArray,offset)},bind:function(){var targetObject=this.node,parsedPath=this.parsedPath,objectName=parsedPath.objectName,propertyName=parsedPath.propertyName,propertyIndex=parsedPath.propertyIndex;targetObject||(this.node=targetObject=THREE.PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;
this.setValue=this._setValue_unavailable;if(targetObject){if(objectName){var objectIndex=parsedPath.objectIndex;switch(objectName){case "materials":if(!targetObject.material){console.error("  can not bind to material as node does not have a material",this);return}if(!targetObject.material.materials){console.error("  can not bind to material.materials as node.material does not have a materials array",this);return}targetObject=targetObject.material.materials;break;case "bones":if(!targetObject.skeleton){console.error("  can not bind to bones as node does not have a skeleton",
this);return}targetObject=targetObject.skeleton.bones;for(objectName=0;objectName<targetObject.length;objectName++)if(targetObject[objectName].name===objectIndex){objectIndex=objectName;break}break;default:if(void 0===targetObject[objectName]){console.error("  can not bind to objectName of node, undefined",this);return}targetObject=targetObject[objectName]}if(void 0!==objectIndex){if(void 0===targetObject[objectIndex]){console.error("  trying to bind to objectIndex of objectName, but is undefined:",
this,targetObject);return}targetObject=targetObject[objectIndex]}}if(objectIndex=targetObject[propertyName]){parsedPath=this.Versioning.None;void 0!==targetObject.needsUpdate?(parsedPath=this.Versioning.NeedsUpdate,this.targetObject=targetObject):void 0!==targetObject.matrixWorldNeedsUpdate&&(parsedPath=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=targetObject);objectName=this.BindingType.Direct;if(void 0!==propertyIndex){if("morphTargetInfluences"===propertyName){if(!targetObject.geometry){console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry",
this);return}if(!targetObject.geometry.morphTargets){console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",this);return}for(objectName=0;objectName<this.node.geometry.morphTargets.length;objectName++)if(targetObject.geometry.morphTargets[objectName].name===propertyIndex){propertyIndex=objectName;break}}objectName=this.BindingType.ArrayElement;this.resolvedProperty=objectIndex;this.propertyIndex=propertyIndex}else void 0!==objectIndex.fromArray&&
void 0!==objectIndex.toArray?(objectName=this.BindingType.HasFromToArray,this.resolvedProperty=objectIndex):void 0!==objectIndex.length?(objectName=this.BindingType.EntireArray,this.resolvedProperty=objectIndex):this.propertyName=propertyName;this.getValue=this.GetterByBindingType[objectName];this.setValue=this.SetterByBindingTypeAndVersioning[objectName][parsedPath]}else console.error("  trying to update property for track: "+parsedPath.nodeName+"."+propertyName+" but it wasn't found.",targetObject)}else console.error("  trying to update node for track: "+
this.path+" but it wasn't found.")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}};Object.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},
GetterByBindingType:[function(buffer,offset){buffer[offset]=this.node[this.propertyName]},function(buffer,offset){for(var source=this.resolvedProperty,i=0,n=source.length;i!==n;++i)buffer[offset++]=source[i]},function(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex]},function(buffer,offset){this.resolvedProperty.toArray(buffer,offset)}],SetterByBindingTypeAndVersioning:[[function(buffer,offset){this.node[this.propertyName]=buffer[offset]},function(buffer,offset){this.node[this.propertyName]=
buffer[offset];this.targetObject.needsUpdate=!0},function(buffer,offset){this.node[this.propertyName]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++]},function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++];this.targetObject.needsUpdate=!0},function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==
n;++i)dest[i]=buffer[offset++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset]},function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.needsUpdate=!0},function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){this.resolvedProperty.fromArray(buffer,offset)},function(buffer,offset){this.resolvedProperty.fromArray(buffer,
offset);this.targetObject.needsUpdate=!0},function(buffer,offset){this.resolvedProperty.fromArray(buffer,offset);this.targetObject.matrixWorldNeedsUpdate=!0}]]});THREE.PropertyBinding.Composite=function(targetGroup,path,optionalParsedPath){optionalParsedPath=optionalParsedPath||THREE.PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup;this._bindings=targetGroup.subscribe_(path,optionalParsedPath)};THREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,
getValue:function(array,offset){this.bind();var binding=this._bindings[this._targetGroup.nCachedObjects_];void 0!==binding&&binding.getValue(array,offset)},setValue:function(array,offset){for(var bindings=this._bindings,i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].setValue(array,offset)},bind:function(){for(var bindings=this._bindings,i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].bind()},unbind:function(){for(var bindings=this._bindings,
i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].unbind()}};THREE.PropertyBinding.create=function(root,path,parsedPath){return root instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(root,path,parsedPath):new THREE.PropertyBinding(root,path,parsedPath)};THREE.PropertyBinding.parseTrackName=function(trackName){var re=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]_. ]+)\])?)$/,matches=re.exec(trackName);if(!matches)throw Error("cannot parse trackName at all: "+
trackName);matches.index===re.lastIndex&&re.lastIndex++;re={nodeName:matches[3],objectName:matches[5],objectIndex:matches[7],propertyName:matches[9],propertyIndex:matches[11]};if(null===re.propertyName||0===re.propertyName.length)throw Error("can not parse propertyName from trackName: "+trackName);return re};THREE.PropertyBinding.findNode=function(root,nodeName){if(!nodeName||""===nodeName||"root"===nodeName||"."===nodeName||-1===nodeName||nodeName===root.name||nodeName===root.uuid)return root;if(root.skeleton){var bone=
function(skeleton){for(var i=0;i<skeleton.bones.length;i++){var bone=skeleton.bones[i];if(bone.name===nodeName)return bone}return null}(root.skeleton);if(bone)return bone}if(root.children){var searchNodeSubtree=function(children){for(var i=0;i<children.length;i++){var childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName||(childNode=searchNodeSubtree(childNode.children)))return childNode}return null};if(root=searchNodeSubtree(root.children))return root}return null};THREE.PropertyMixer=
function(binding,typeName,valueSize){this.binding=binding;this.valueSize=valueSize;binding=Float64Array;switch(typeName){case "quaternion":typeName=this._slerp;break;case "string":case "bool":binding=Array;typeName=this._select;break;default:typeName=this._lerp}this.buffer=new binding(4*valueSize);this._mixBufferRegion=typeName;this.referenceCount=this.useCount=this.cumulativeWeight=0};THREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(accuIndex,weight){var buffer=
this.buffer,stride=this.valueSize;accuIndex=accuIndex*stride+stride;var currentWeight=this.cumulativeWeight;if(0===currentWeight){for(currentWeight=0;currentWeight!==stride;++currentWeight)buffer[accuIndex+currentWeight]=buffer[currentWeight];currentWeight=weight}else currentWeight+=weight,this._mixBufferRegion(buffer,accuIndex,0,weight/currentWeight,stride);this.cumulativeWeight=currentWeight},apply:function(accuIndex){var stride=this.valueSize,buffer=this.buffer;accuIndex=accuIndex*stride+stride;
var weight=this.cumulativeWeight,binding=this.binding;this.cumulativeWeight=0;1>weight&&this._mixBufferRegion(buffer,accuIndex,3*stride,1-weight,stride);weight=stride;for(var e=stride+stride;weight!==e;++weight)if(buffer[weight]!==buffer[weight+stride]){binding.setValue(buffer,accuIndex);break}},saveOriginalState:function(){var buffer=this.buffer,stride=this.valueSize,originalValueOffset=3*stride;this.binding.getValue(buffer,originalValueOffset);for(var i=stride;i!==originalValueOffset;++i)buffer[i]=
buffer[originalValueOffset+i%stride];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(buffer,dstOffset,srcOffset,t,stride){if(.5<=t)for(t=0;t!==stride;++t)buffer[dstOffset+t]=buffer[srcOffset+t]},_slerp:function(buffer,dstOffset,srcOffset,t,stride){THREE.Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t)},_lerp:function(buffer,dstOffset,srcOffset,t,stride){for(var s=1-t,i=0;i!==stride;++i){var j=
dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t}}};THREE.BooleanKeyframeTrack=function(name,times,values){THREE.KeyframeTrack.call(this,name,times,values)};THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.ColorKeyframeTrack=function(name,
times,values,interpolation){THREE.KeyframeTrack.call(this,name,times,values,interpolation)};THREE.ColorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.ColorKeyframeTrack,ValueTypeName:"color"});THREE.NumberKeyframeTrack=function(name,times,values,interpolation){THREE.KeyframeTrack.call(this,name,times,values,interpolation)};THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,
ValueTypeName:"number"});THREE.QuaternionKeyframeTrack=function(name,times,values,interpolation){THREE.KeyframeTrack.call(this,name,times,values,interpolation)};THREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(result){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),
result)},InterpolantFactoryMethodSmooth:void 0});THREE.StringKeyframeTrack=function(name,times,values,interpolation){THREE.KeyframeTrack.call(this,name,times,values,interpolation)};THREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});THREE.VectorKeyframeTrack=
function(name,times,values,interpolation){THREE.KeyframeTrack.call(this,name,times,values,interpolation)};THREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:"vector"});THREE.Audio=function(listener){THREE.Object3D.call(this);this.type="Audio";this.context=listener.context;this.source=this.context.createBufferSource();this.source.onended=this.onEnded.bind(this);this.gain=this.context.createGain();this.gain.connect(listener.getInput());
this.autoplay=!1;this.startTime=0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType="empty";this.filters=[]};THREE.Audio.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Audio,getOutput:function(){return this.gain},setNodeSource:function(audioNode){this.hasPlaybackControl=!1;this.sourceType="audioNode";this.source=audioNode;this.connect();return this},setBuffer:function(audioBuffer){this.source.buffer=audioBuffer;this.sourceType="buffer";
this.autoplay&&this.play();return this},play:function(){if(!0===this.isPlaying)console.warn("THREE.Audio: Audio is already playing.");else if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else{var source=this.context.createBufferSource();source.buffer=this.source.buffer;source.loop=this.source.loop;source.onended=this.source.onended;source.start(0,this.startTime);source.playbackRate.value=this.playbackRate;this.isPlaying=!0;this.source=source;return this.connect()}},
pause:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(),this.startTime=this.context.currentTime,this},stop:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(),this.startTime=0,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++)this.filters[i-1].connect(this.filters[i]);
this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var i=1,l=this.filters.length;i<l;i++)this.filters[i-1].disconnect(this.filters[i]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(value){value||(value=
[]);!0===this.isPlaying?(this.disconnect(),this.filters=value,this.connect()):this.filters=value;return this},getFilter:function(){return this.getFilters()[0]},setFilter:function(filter){return this.setFilters(filter?[filter]:[])},setPlaybackRate:function(value){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate=value,!0===this.isPlaying&&(this.source.playbackRate.value=this.playbackRate),this},getPlaybackRate:function(){return this.playbackRate},
onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.source.loop},setLoop:function(value){!1===this.hasPlaybackControl?console.warn("THREE.Audio: this Audio has no playback control."):this.source.loop=value},getVolume:function(){return this.gain.gain.value},setVolume:function(value){this.gain.gain.value=value;return this}});THREE.AudioAnalyser=function(audio,fftSize){this.analyser=audio.context.createAnalyser();
this.analyser.fftSize=void 0!==fftSize?fftSize:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);audio.getOutput().connect(this.analyser)};Object.assign(THREE.AudioAnalyser.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var value=0,data=this.getFrequencyData(),i=0;i<data.length;i++)value+=data[i];return value/data.length}});Object.defineProperty(THREE,"AudioContext",{get:function(){var context;
return function(){void 0===context&&(context=new (window.AudioContext||window.webkitAudioContext));return context}}()});THREE.PositionalAudio=function(listener){THREE.Audio.call(this,listener);this.panner=this.context.createPanner();this.panner.connect(this.gain)};THREE.PositionalAudio.prototype=Object.assign(Object.create(THREE.Audio.prototype),{constructor:THREE.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(value){this.panner.refDistance=
value},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(value){this.panner.rolloffFactor=value},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(value){this.panner.distanceModel=value},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(value){this.panner.maxDistance=value},updateMatrixWorld:function(){var position=new THREE.Vector3;return function(force){THREE.Object3D.prototype.updateMatrixWorld.call(this,
force);position.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(position.x,position.y,position.z)}}()});THREE.AudioListener=function(){THREE.Object3D.call(this);this.type="AudioListener";this.context=THREE.AudioContext;this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null};THREE.AudioListener.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==
this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(value){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination);this.filter=value;this.gain.connect(this.filter);this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},
setMasterVolume:function(value){this.gain.gain.value=value},updateMatrixWorld:function(){var position=new THREE.Vector3,quaternion=new THREE.Quaternion,scale=new THREE.Vector3,orientation=new THREE.Vector3;return function(force){THREE.Object3D.prototype.updateMatrixWorld.call(this,force);force=this.context.listener;var up=this.up;this.matrixWorld.decompose(position,quaternion,scale);orientation.set(0,0,-1).applyQuaternion(quaternion);force.setPosition(position.x,position.y,position.z);force.setOrientation(orientation.x,
orientation.y,orientation.z,up.x,up.y,up.z)}}()});THREE.Camera=function(){THREE.Object3D.call(this);this.type="Camera";this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.constructor=THREE.Camera;THREE.Camera.prototype.getWorldDirection=function(){var quaternion=new THREE.Quaternion;return function(optionalTarget){optionalTarget=optionalTarget||new THREE.Vector3;this.getWorldQuaternion(quaternion);
return optionalTarget.set(0,0,-1).applyQuaternion(quaternion)}}();THREE.Camera.prototype.lookAt=function(){var m1=new THREE.Matrix4;return function(vector){m1.lookAt(this.position,vector,this.up);this.quaternion.setFromRotationMatrix(m1)}}();THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)};THREE.Camera.prototype.copy=function(source){THREE.Object3D.prototype.copy.call(this,source);this.matrixWorldInverse.copy(source.matrixWorldInverse);this.projectionMatrix.copy(source.projectionMatrix);
return this};THREE.CubeCamera=function(near,far,cubeResolution){THREE.Object3D.call(this);this.type="CubeCamera";var cameraPX=new THREE.PerspectiveCamera(90,1,near,far);cameraPX.up.set(0,-1,0);cameraPX.lookAt(new THREE.Vector3(1,0,0));this.add(cameraPX);var cameraNX=new THREE.PerspectiveCamera(90,1,near,far);cameraNX.up.set(0,-1,0);cameraNX.lookAt(new THREE.Vector3(-1,0,0));this.add(cameraNX);var cameraPY=new THREE.PerspectiveCamera(90,1,near,far);cameraPY.up.set(0,0,1);cameraPY.lookAt(new THREE.Vector3(0,
1,0));this.add(cameraPY);var cameraNY=new THREE.PerspectiveCamera(90,1,near,far);cameraNY.up.set(0,0,-1);cameraNY.lookAt(new THREE.Vector3(0,-1,0));this.add(cameraNY);var cameraPZ=new THREE.PerspectiveCamera(90,1,near,far);cameraPZ.up.set(0,-1,0);cameraPZ.lookAt(new THREE.Vector3(0,0,1));this.add(cameraPZ);var cameraNZ=new THREE.PerspectiveCamera(90,1,near,far);cameraNZ.up.set(0,-1,0);cameraNZ.lookAt(new THREE.Vector3(0,0,-1));this.add(cameraNZ);this.renderTarget=new THREE.WebGLRenderTargetCube(cubeResolution,
cubeResolution,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(renderer,scene){null===this.parent&&this.updateMatrixWorld();var renderTarget=this.renderTarget,generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=!1;renderTarget.activeCubeFace=0;renderer.render(scene,cameraPX,renderTarget);renderTarget.activeCubeFace=1;renderer.render(scene,cameraNX,renderTarget);renderTarget.activeCubeFace=2;renderer.render(scene,
cameraPY,renderTarget);renderTarget.activeCubeFace=3;renderer.render(scene,cameraNY,renderTarget);renderTarget.activeCubeFace=4;renderer.render(scene,cameraPZ,renderTarget);renderTarget.texture.generateMipmaps=generateMipmaps;renderTarget.activeCubeFace=5;renderer.render(scene,cameraNZ,renderTarget);renderer.setRenderTarget(null)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor=THREE.CubeCamera;THREE.OrthographicCamera=function(left,right,
top,bottom,near,far){THREE.Camera.call(this);this.type="OrthographicCamera";this.zoom=1;this.left=left;this.right=right;this.top=top;this.bottom=bottom;this.near=void 0!==near?near:.1;this.far=void 0!==far?far:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.OrthographicCamera,copy:function(source){THREE.Camera.prototype.copy.call(this,source);this.left=source.left;this.right=source.right;this.top=source.top;
this.bottom=source.bottom;this.near=source.near;this.far=source.far;this.zoom=source.zoom;return this},updateProjectionMatrix:function(){var dx=(this.right-this.left)/(2*this.zoom),dy=(this.top-this.bottom)/(2*this.zoom),cx=(this.right+this.left)/2,cy=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(cx-dx,cx+dx,cy+dy,cy-dy,this.near,this.far)},toJSON:function(meta){meta=THREE.Object3D.prototype.toJSON.call(this,meta);meta.object.zoom=this.zoom;meta.object.left=this.left;meta.object.right=
this.right;meta.object.top=this.top;meta.object.bottom=this.bottom;meta.object.near=this.near;meta.object.far=this.far;return meta}});THREE.PerspectiveCamera=function(fov,aspect,near,far){THREE.Camera.call(this);this.type="PerspectiveCamera";this.fov=void 0!==fov?fov:50;this.zoom=1;this.near=void 0!==near?near:.1;this.far=void 0!==far?far:2E3;this.focus=10;this.aspect=void 0!==aspect?aspect:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=
Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.PerspectiveCamera,copy:function(source){THREE.Camera.prototype.copy.call(this,source);this.fov=source.fov;this.zoom=source.zoom;this.near=source.near;this.far=source.far;this.focus=source.focus;this.aspect=source.aspect;this.view=null===source.view?null:Object.assign({},source.view);this.filmGauge=source.filmGauge;this.filmOffset=source.filmOffset;return this},setFocalLength:function(focalLength){focalLength=.5*this.getFilmHeight()/
focalLength;this.fov=2*THREE.Math.RAD2DEG*Math.atan(focalLength);this.updateProjectionMatrix()},getFocalLength:function(){var vExtentSlope=Math.tan(.5*THREE.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/vExtentSlope},getEffectiveFOV:function(){return 2*THREE.Math.RAD2DEG*Math.atan(Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(fullWidth,
fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight;this.view={fullWidth:fullWidth,fullHeight:fullHeight,offsetX:x,offsetY:y,width:width,height:height};this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null;this.updateProjectionMatrix()},updateProjectionMatrix:function(){var near=this.near,top=near*Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom,height=2*top,width=this.aspect*height,left=-.5*width,view=this.view;if(null!==view){var fullWidth=view.fullWidth,fullHeight=
view.fullHeight;left+=view.offsetX*width/fullWidth;top-=view.offsetY*height/fullHeight;width*=view.width/fullWidth;height*=view.height/fullHeight}view=this.filmOffset;0!==view&&(left+=near*view/this.getFilmWidth());this.projectionMatrix.makeFrustum(left,left+width,top-height,top,near,this.far)},toJSON:function(meta){meta=THREE.Object3D.prototype.toJSON.call(this,meta);meta.object.fov=this.fov;meta.object.zoom=this.zoom;meta.object.near=this.near;meta.object.far=this.far;meta.object.focus=this.focus;
meta.object.aspect=this.aspect;null!==this.view&&(meta.object.view=Object.assign({},this.view));meta.object.filmGauge=this.filmGauge;meta.object.filmOffset=this.filmOffset;return meta}});THREE.StereoCamera=function(){this.type="StereoCamera";this.aspect=1;this.cameraL=new THREE.PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new THREE.PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1};Object.assign(THREE.StereoCamera.prototype,
{update:function(){var focus,fov,aspect,near,far,eyeRight=new THREE.Matrix4,eyeLeft=new THREE.Matrix4;return function(camera){if(focus!==camera.focus||fov!==camera.fov||aspect!==camera.aspect*this.aspect||near!==camera.near||far!==camera.far){focus=camera.focus;fov=camera.fov;aspect=camera.aspect*this.aspect;near=camera.near;far=camera.far;var projectionMatrix=camera.projectionMatrix.clone(),eyeSepOnProjection=.032*near/focus,ymax=near*Math.tan(THREE.Math.DEG2RAD*fov*.5);eyeLeft.elements[12]=-.032;
eyeRight.elements[12]=.032;var xmin=-ymax*aspect+eyeSepOnProjection;var xmax=ymax*aspect+eyeSepOnProjection;projectionMatrix.elements[0]=2*near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraL.projectionMatrix.copy(projectionMatrix);xmin=-ymax*aspect-eyeSepOnProjection;xmax=ymax*aspect-eyeSepOnProjection;projectionMatrix.elements[0]=2*near/(xmax-xmin);projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin);this.cameraR.projectionMatrix.copy(projectionMatrix)}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);
this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight)}}()});THREE.Light=function(color,intensity){THREE.Object3D.call(this);this.type="Light";this.color=new THREE.Color(color);this.intensity=void 0!==intensity?intensity:1;this.receiveShadow=void 0};THREE.Light.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Light,copy:function(source){THREE.Object3D.prototype.copy.call(this,source);this.color.copy(source.color);this.intensity=source.intensity;return this},
toJSON:function(meta){meta=THREE.Object3D.prototype.toJSON.call(this,meta);meta.object.color=this.color.getHex();meta.object.intensity=this.intensity;void 0!==this.groundColor&&(meta.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(meta.object.distance=this.distance);void 0!==this.angle&&(meta.object.angle=this.angle);void 0!==this.decay&&(meta.object.decay=this.decay);void 0!==this.penumbra&&(meta.object.penumbra=this.penumbra);return meta}});THREE.LightShadow=function(camera){this.camera=
camera;this.bias=0;this.radius=1;this.mapSize=new THREE.Vector2(512,512);this.map=null;this.matrix=new THREE.Matrix4};Object.assign(THREE.LightShadow.prototype,{copy:function(source){this.camera=source.camera.clone();this.bias=source.bias;this.radius=source.radius;this.mapSize.copy(source.mapSize);return this},clone:function(){return(new this.constructor).copy(this)}});THREE.AmbientLight=function(color,intensity){THREE.Light.call(this,color,intensity);this.type="AmbientLight";this.castShadow=void 0};
THREE.AmbientLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.AmbientLight});THREE.DirectionalLight=function(color,intensity){THREE.Light.call(this,color,intensity);this.type="DirectionalLight";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;this.shadow=new THREE.DirectionalLightShadow};THREE.DirectionalLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.DirectionalLight,copy:function(source){THREE.Light.prototype.copy.call(this,
source);this.target=source.target.clone();this.shadow=source.shadow.clone();return this}});THREE.DirectionalLightShadow=function(light){THREE.LightShadow.call(this,new THREE.OrthographicCamera(-5,5,5,-5,.5,500))};THREE.DirectionalLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.DirectionalLightShadow});THREE.HemisphereLight=function(skyColor,groundColor,intensity){THREE.Light.call(this,skyColor,intensity);this.type="HemisphereLight";this.castShadow=
void 0;this.position.set(0,1,0);this.updateMatrix();this.groundColor=new THREE.Color(groundColor)};THREE.HemisphereLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.HemisphereLight,copy:function(source){THREE.Light.prototype.copy.call(this,source);this.groundColor.copy(source.groundColor);return this}});THREE.PointLight=function(color,intensity,distance,decay){THREE.Light.call(this,color,intensity);this.type="PointLight";Object.defineProperty(this,"power",{get:function(){return 4*
this.intensity*Math.PI},set:function(power){this.intensity=power/(4*Math.PI)}});this.distance=void 0!==distance?distance:0;this.decay=void 0!==decay?decay:1;this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))};THREE.PointLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.PointLight,copy:function(source){THREE.Light.prototype.copy.call(this,source);this.distance=source.distance;this.decay=source.decay;this.shadow=source.shadow.clone();return this}});
THREE.SpotLight=function(color,intensity,distance,angle,penumbra,decay){THREE.Light.call(this,color,intensity);this.type="SpotLight";this.position.set(0,1,0);this.updateMatrix();this.target=new THREE.Object3D;Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(power){this.intensity=power/Math.PI}});this.distance=void 0!==distance?distance:0;this.angle=void 0!==angle?angle:Math.PI/3;this.penumbra=void 0!==penumbra?penumbra:0;this.decay=void 0!==decay?decay:
1;this.shadow=new THREE.SpotLightShadow};THREE.SpotLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.SpotLight,copy:function(source){THREE.Light.prototype.copy.call(this,source);this.distance=source.distance;this.angle=source.angle;this.penumbra=source.penumbra;this.decay=source.decay;this.target=source.target.clone();this.shadow=source.shadow.clone();return this}});THREE.SpotLightShadow=function(){THREE.LightShadow.call(this,new THREE.PerspectiveCamera(50,1,.5,
500))};THREE.SpotLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.SpotLightShadow,update:function(light){var fov=2*THREE.Math.RAD2DEG*light.angle,aspect=this.mapSize.width/this.mapSize.height;light=light.distance||500;var camera=this.camera;if(fov!==camera.fov||aspect!==camera.aspect||light!==camera.far)camera.fov=fov,camera.aspect=aspect,camera.far=light,camera.updateProjectionMatrix()}});THREE.AudioLoader=function(manager){this.manager=void 0!==manager?
manager:THREE.DefaultLoadingManager};THREE.AudioLoader.prototype={constructor:THREE.AudioLoader,load:function(url,onLoad,onProgress,onError){var loader=new THREE.XHRLoader(this.manager);loader.setResponseType("arraybuffer");loader.load(url,function(buffer){THREE.AudioContext.decodeAudioData(buffer,function(audioBuffer){onLoad(audioBuffer)})},onProgress,onError)}};THREE.Cache={enabled:!1,files:{},add:function(key,file){!1!==this.enabled&&(this.files[key]=file)},get:function(key){if(!1!==this.enabled)return this.files[key]},
remove:function(key){delete this.files[key]},clear:function(){this.files={}}};THREE.Loader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(url){url=url.split("/");if(1===url.length)return"./";url.pop();return url.join("/")+"/"},initMaterials:function(materials,texturePath,crossOrigin){for(var array=[],i=0;i<materials.length;++i)array[i]=this.createMaterial(materials[i],
texturePath,crossOrigin);return array},createMaterial:function(){var color,textureLoader,materialLoader;return function(m,texturePath,crossOrigin){function loadTexture(path,repeat,offset,wrap,anisotropy){path=texturePath+path;var loader=THREE.Loader.Handlers.get(path);null!==loader?path=loader.load(path):(textureLoader.setCrossOrigin(crossOrigin),path=textureLoader.load(path));void 0!==repeat&&(path.repeat.fromArray(repeat),1!==repeat[0]&&(path.wrapS=THREE.RepeatWrapping),1!==repeat[1]&&(path.wrapT=
THREE.RepeatWrapping));void 0!==offset&&path.offset.fromArray(offset);void 0!==wrap&&("repeat"===wrap[0]&&(path.wrapS=THREE.RepeatWrapping),"mirror"===wrap[0]&&(path.wrapS=THREE.MirroredRepeatWrapping),"repeat"===wrap[1]&&(path.wrapT=THREE.RepeatWrapping),"mirror"===wrap[1]&&(path.wrapT=THREE.MirroredRepeatWrapping));void 0!==anisotropy&&(path.anisotropy=anisotropy);repeat=THREE.Math.generateUUID();textures[repeat]=path;return repeat}void 0===color&&(color=new THREE.Color);void 0===textureLoader&&
(textureLoader=new THREE.TextureLoader);void 0===materialLoader&&(materialLoader=new THREE.MaterialLoader);var textures={},json={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"},name;for(name in m){var value=m[name];switch(name){case "DbgColor":case "DbgIndex":case "opticalDensity":case "illumination":break;case "DbgName":json.name=value;break;case "blending":json.blending=THREE[value];break;case "colorAmbient":case "mapAmbient":console.warn("THREE.Loader.createMaterial:",name,"is no longer supported.");
break;case "colorDiffuse":json.color=color.fromArray(value).getHex();break;case "colorSpecular":json.specular=color.fromArray(value).getHex();break;case "colorEmissive":json.emissive=color.fromArray(value).getHex();break;case "specularCoef":json.shininess=value;break;case "shading":"basic"===value.toLowerCase()&&(json.type="MeshBasicMaterial");"phong"===value.toLowerCase()&&(json.type="MeshPhongMaterial");break;case "mapDiffuse":json.map=loadTexture(value,m.mapDiffuseRepeat,m.mapDiffuseOffset,m.mapDiffuseWrap,
m.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":break;case "mapLight":json.lightMap=loadTexture(value,m.mapLightRepeat,m.mapLightOffset,m.mapLightWrap,m.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":break;case "mapAO":json.aoMap=loadTexture(value,m.mapAORepeat,m.mapAOOffset,m.mapAOWrap,m.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":break;
case "mapBump":json.bumpMap=loadTexture(value,m.mapBumpRepeat,m.mapBumpOffset,m.mapBumpWrap,m.mapBumpAnisotropy);break;case "mapBumpScale":json.bumpScale=value;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":break;case "mapNormal":json.normalMap=loadTexture(value,m.mapNormalRepeat,m.mapNormalOffset,m.mapNormalWrap,m.mapNormalAnisotropy);break;case "mapNormalFactor":json.normalScale=[value,value];break;case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":break;
case "mapSpecular":json.specularMap=loadTexture(value,m.mapSpecularRepeat,m.mapSpecularOffset,m.mapSpecularWrap,m.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":break;case "mapAlpha":json.alphaMap=loadTexture(value,m.mapAlphaRepeat,m.mapAlphaOffset,m.mapAlphaWrap,m.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":break;case "flipSided":json.side=THREE.BackSide;
break;case "doubleSided":json.side=THREE.DoubleSide;break;case "transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");json.opacity=value;break;case "depthTest":case "depthWrite":case "colorWrite":case "opacity":case "reflectivity":case "transparent":case "visible":case "wireframe":json[name]=value;break;case "vertexColors":!0===value&&(json.vertexColors=THREE.VertexColors);"face"===value&&(json.vertexColors=THREE.FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",
name,value)}}"MeshBasicMaterial"===json.type&&delete json.emissive;"MeshPhongMaterial"!==json.type&&delete json.specular;1>json.opacity&&(json.transparent=!0);materialLoader.setTextures(textures);return materialLoader.parse(json)}}()};THREE.Loader.Handlers={handlers:[],add:function(regex,loader){this.handlers.push(regex,loader)},get:function(file){for(var handlers=this.handlers,i=0,l=handlers.length;i<l;i+=2){var loader=handlers[i+1];if(handlers[i].test(file))return loader}return null}};THREE.XHRLoader=
function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(url,onLoad,onProgress,onError){void 0!==this.path&&(url=this.path+url);var scope=this,cached=THREE.Cache.get(url);if(void 0!==cached)return onLoad&&setTimeout(function(){onLoad(cached)},0),cached;var request=new XMLHttpRequest;request.overrideMimeType("text/plain");request.open("GET",url,!0);request.addEventListener("load",function(event){var response=
event.target.response;THREE.Cache.add(url,response);200===this.status?(onLoad&&onLoad(response),scope.manager.itemEnd(url)):0===this.status?(console.warn("THREE.XHRLoader: HTTP Status 0 received."),onLoad&&onLoad(response),scope.manager.itemEnd(url)):(onError&&onError(event),scope.manager.itemError(url))},!1);void 0!==onProgress&&request.addEventListener("progress",function(event){onProgress(event)},!1);request.addEventListener("error",function(event){onError&&onError(event);scope.manager.itemError(url)},
!1);void 0!==this.responseType&&(request.responseType=this.responseType);void 0!==this.withCredentials&&(request.withCredentials=this.withCredentials);request.send(null);scope.manager.itemStart(url);return request},setPath:function(value){this.path=value},setResponseType:function(value){this.responseType=value},setWithCredentials:function(value){this.withCredentials=value}};THREE.FontLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.FontLoader.prototype=
{constructor:THREE.FontLoader,load:function(url,onLoad,onProgress,onError){var scope=this;(new THREE.XHRLoader(this.manager)).load(url,function(text){try{var json=JSON.parse(text)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),json=JSON.parse(text.substring(65,text.length-2))}text=scope.parse(json);onLoad&&onLoad(text)},onProgress,onError)},parse:function(json){return new THREE.Font(json)}};THREE.ImageLoader=function(manager){this.manager=
void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(url,onLoad,onProgress,onError){void 0!==this.path&&(url=this.path+url);var scope=this,cached=THREE.Cache.get(url);if(void 0!==cached)return scope.manager.itemStart(url),onLoad?setTimeout(function(){onLoad(cached);scope.manager.itemEnd(url)},0):scope.manager.itemEnd(url),cached;var image=document.createElement("img");image.addEventListener("load",function(event){THREE.Cache.add(url,
this);onLoad&&onLoad(this);scope.manager.itemEnd(url)},!1);void 0!==onProgress&&image.addEventListener("progress",function(event){onProgress(event)},!1);image.addEventListener("error",function(event){onError&&onError(event);scope.manager.itemError(url)},!1);void 0!==this.crossOrigin&&(image.crossOrigin=this.crossOrigin);scope.manager.itemStart(url);image.src=url;return image},setCrossOrigin:function(value){this.crossOrigin=value},setPath:function(value){this.path=value}};THREE.JSONLoader=function(manager){"boolean"===
typeof manager&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),manager=void 0);this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;this.withCredentials=!1};THREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){void 0===this._statusDomElement&&(this._statusDomElement=document.createElement("div"));console.warn("THREE.JSONLoader: .statusDomElement has been removed.");return this._statusDomElement},load:function(url,
onLoad,onProgress,onError){var scope=this,texturePath=this.texturePath&&"string"===typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(url),loader=new THREE.XHRLoader(this.manager);loader.setWithCredentials(this.withCredentials);loader.load(url,function(text){text=JSON.parse(text);var metadata=text.metadata;if(void 0!==metadata&&(metadata=metadata.type,void 0!==metadata)){if("object"===metadata.toLowerCase()){console.error("THREE.JSONLoader: "+url+" should be loaded with THREE.ObjectLoader instead.");
return}if("scene"===metadata.toLowerCase()){console.error("THREE.JSONLoader: "+url+" should be loaded with THREE.SceneLoader instead.");return}}text=scope.parse(text,texturePath);onLoad(text.geometry,text.materials)},onProgress,onError)},setTexturePath:function(value){this.texturePath=value},parse:function(json,texturePath){var geometry=new THREE.Geometry,scale$jscomp$0=void 0!==json.scale?1/json.scale:1;(function(scale){var i,j,zLength,faces=json.faces;var colorIndex=json.vertices;var normals=json.normals,
colors=json.colors,nUvLayers=0;if(void 0!==json.uvs){for(i=0;i<json.uvs.length;i++)json.uvs[i].length&&nUvLayers++;for(i=0;i<nUvLayers;i++)geometry.faceVertexUvs[i]=[]}var offset=0;for(zLength=colorIndex.length;offset<zLength;)i=new THREE.Vector3,i.x=colorIndex[offset++]*scale,i.y=colorIndex[offset++]*scale,i.z=colorIndex[offset++]*scale,geometry.vertices.push(i);offset=0;for(zLength=faces.length;offset<zLength;){scale=faces[offset++];var isQuad=scale&1;var fi=scale&2;i=scale&8;var normalIndex=scale&
16;var hasFaceVertexNormal=scale&32;colorIndex=scale&64;scale&=128;if(isQuad){isQuad=new THREE.Face3;isQuad.a=faces[offset];isQuad.b=faces[offset+1];isQuad.c=faces[offset+3];var faceB=new THREE.Face3;faceB.a=faces[offset+1];faceB.b=faces[offset+2];faceB.c=faces[offset+3];offset+=4;fi&&(fi=faces[offset++],isQuad.materialIndex=fi,faceB.materialIndex=fi);fi=geometry.faces.length;if(i)for(i=0;i<nUvLayers;i++){var uvLayer=json.uvs[i];geometry.faceVertexUvs[i][fi]=[];geometry.faceVertexUvs[i][fi+1]=[];
for(j=0;4>j;j++){var uvIndex=faces[offset++];var uv=uvLayer[2*uvIndex];uvIndex=uvLayer[2*uvIndex+1];uv=new THREE.Vector2(uv,uvIndex);2!==j&&geometry.faceVertexUvs[i][fi].push(uv);0!==j&&geometry.faceVertexUvs[i][fi+1].push(uv)}}normalIndex&&(normalIndex=3*faces[offset++],isQuad.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),faceB.normal.copy(isQuad.normal));if(hasFaceVertexNormal)for(i=0;4>i;i++)normalIndex=3*faces[offset++],hasFaceVertexNormal=new THREE.Vector3(normals[normalIndex++],
normals[normalIndex++],normals[normalIndex]),2!==i&&isQuad.vertexNormals.push(hasFaceVertexNormal),0!==i&&faceB.vertexNormals.push(hasFaceVertexNormal);colorIndex&&(colorIndex=faces[offset++],colorIndex=colors[colorIndex],isQuad.color.setHex(colorIndex),faceB.color.setHex(colorIndex));if(scale)for(i=0;4>i;i++)colorIndex=faces[offset++],colorIndex=colors[colorIndex],2!==i&&isQuad.vertexColors.push(new THREE.Color(colorIndex)),0!==i&&faceB.vertexColors.push(new THREE.Color(colorIndex));geometry.faces.push(isQuad);
geometry.faces.push(faceB)}else{isQuad=new THREE.Face3;isQuad.a=faces[offset++];isQuad.b=faces[offset++];isQuad.c=faces[offset++];fi&&(fi=faces[offset++],isQuad.materialIndex=fi);fi=geometry.faces.length;if(i)for(i=0;i<nUvLayers;i++)for(uvLayer=json.uvs[i],geometry.faceVertexUvs[i][fi]=[],j=0;3>j;j++)uvIndex=faces[offset++],uv=uvLayer[2*uvIndex],uvIndex=uvLayer[2*uvIndex+1],uv=new THREE.Vector2(uv,uvIndex),geometry.faceVertexUvs[i][fi].push(uv);normalIndex&&(normalIndex=3*faces[offset++],isQuad.normal.set(normals[normalIndex++],
normals[normalIndex++],normals[normalIndex]));if(hasFaceVertexNormal)for(i=0;3>i;i++)normalIndex=3*faces[offset++],hasFaceVertexNormal=new THREE.Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),isQuad.vertexNormals.push(hasFaceVertexNormal);colorIndex&&(colorIndex=faces[offset++],isQuad.color.setHex(colors[colorIndex]));if(scale)for(i=0;3>i;i++)colorIndex=faces[offset++],isQuad.vertexColors.push(new THREE.Color(colors[colorIndex]));geometry.faces.push(isQuad)}}})(scale$jscomp$0);
(function(){var influencesPerVertex=void 0!==json.influencesPerVertex?json.influencesPerVertex:2;if(json.skinWeights)for(var i=0,l=json.skinWeights.length;i<l;i+=influencesPerVertex)geometry.skinWeights.push(new THREE.Vector4(json.skinWeights[i],1<influencesPerVertex?json.skinWeights[i+1]:0,2<influencesPerVertex?json.skinWeights[i+2]:0,3<influencesPerVertex?json.skinWeights[i+3]:0));if(json.skinIndices)for(i=0,l=json.skinIndices.length;i<l;i+=influencesPerVertex)geometry.skinIndices.push(new THREE.Vector4(json.skinIndices[i],
1<influencesPerVertex?json.skinIndices[i+1]:0,2<influencesPerVertex?json.skinIndices[i+2]:0,3<influencesPerVertex?json.skinIndices[i+3]:0));geometry.bones=json.bones;geometry.bones&&0<geometry.bones.length&&(geometry.skinWeights.length!==geometry.skinIndices.length||geometry.skinIndices.length!==geometry.vertices.length)&&console.warn("When skinning, number of vertices ("+geometry.vertices.length+"), skinIndices ("+geometry.skinIndices.length+"), and skinWeights ("+geometry.skinWeights.length+") should match.")})();
(function(scale){if(void 0!==json.morphTargets)for(var i=0,l=json.morphTargets.length;i<l;i++){geometry.morphTargets[i]={};geometry.morphTargets[i].name=json.morphTargets[i].name;geometry.morphTargets[i].vertices=[];for(var dstVertices=geometry.morphTargets[i].vertices,srcVertices=json.morphTargets[i].vertices,v=0,vl=srcVertices.length;v<vl;v+=3){var vertex=new THREE.Vector3;vertex.x=srcVertices[v]*scale;vertex.y=srcVertices[v+1]*scale;vertex.z=srcVertices[v+2]*scale;dstVertices.push(vertex)}}if(void 0!==
json.morphColors&&0<json.morphColors.length)for(console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'),scale=geometry.faces,dstVertices=json.morphColors[0].colors,i=0,l=scale.length;i<l;i++)scale[i].color.fromArray(dstVertices,3*i)})(scale$jscomp$0);(function(){var outputAnimations=[],animations=[];void 0!==json.animation&&animations.push(json.animation);void 0!==json.animations&&(json.animations.length?animations=animations.concat(json.animations):animations.push(json.animations));
for(var i=0;i<animations.length;i++){var clip=THREE.AnimationClip.parseAnimation(animations[i],geometry.bones);clip&&outputAnimations.push(clip)}geometry.morphTargets&&(animations=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets,10),outputAnimations=outputAnimations.concat(animations));0<outputAnimations.length&&(geometry.animations=outputAnimations)})();geometry.computeFaceNormals();geometry.computeBoundingSphere();if(void 0===json.materials||0===json.materials.length)return{geometry:geometry};
texturePath=THREE.Loader.prototype.initMaterials(json.materials,texturePath,this.crossOrigin);return{geometry:geometry,materials:texturePath}}};THREE.LoadingManager=function(onLoad,onProgress,onError){var scope=this,isLoading=!1,itemsLoaded=0,itemsTotal=0;this.onStart=void 0;this.onLoad=onLoad;this.onProgress=onProgress;this.onError=onError;this.itemStart=function(url){itemsTotal++;if(!1===isLoading&&void 0!==scope.onStart)scope.onStart(url,itemsLoaded,itemsTotal);isLoading=!0};this.itemEnd=function(url){itemsLoaded++;
if(void 0!==scope.onProgress)scope.onProgress(url,itemsLoaded,itemsTotal);if(itemsLoaded===itemsTotal&&(isLoading=!1,void 0!==scope.onLoad))scope.onLoad()};this.itemError=function(url){if(void 0!==scope.onError)scope.onError(url)}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(url,onLoad,onProgress,
onError){var scope=this;(new THREE.XHRLoader(scope.manager)).load(url,function(text){onLoad(scope.parse(JSON.parse(text)))},onProgress,onError)},parse:function(json){var geometry=new THREE.BufferGeometry,index=json.data.index,TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};void 0!==index&&(index=new TYPED_ARRAYS[index.type](index.array),
geometry.setIndex(new THREE.BufferAttribute(index,1)));var attributes=json.data.attributes;for(key in attributes){var attribute=attributes[key];index=new TYPED_ARRAYS[attribute.type](attribute.array);geometry.addAttribute(key,new THREE.BufferAttribute(index,attribute.itemSize,attribute.normalized))}TYPED_ARRAYS=json.data.groups||json.data.drawcalls||json.data.offsets;if(void 0!==TYPED_ARRAYS){var key=0;for(index=TYPED_ARRAYS.length;key!==index;++key)attributes=TYPED_ARRAYS[key],geometry.addGroup(attributes.start,
attributes.count,attributes.materialIndex)}json=json.data.boundingSphere;void 0!==json&&(TYPED_ARRAYS=new THREE.Vector3,void 0!==json.center&&TYPED_ARRAYS.fromArray(json.center),geometry.boundingSphere=new THREE.Sphere(TYPED_ARRAYS,json.radius));return geometry}};THREE.MaterialLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;this.textures={}};THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(url,onLoad,onProgress,onError){var scope=
this;(new THREE.XHRLoader(scope.manager)).load(url,function(text){onLoad(scope.parse(JSON.parse(text)))},onProgress,onError)},setTextures:function(value){this.textures=value},getTexture:function(name){var textures=this.textures;void 0===textures[name]&&console.warn("THREE.MaterialLoader: Undefined texture",name);return textures[name]},parse:function(json){var material=new THREE[json.type];void 0!==json.uuid&&(material.uuid=json.uuid);void 0!==json.name&&(material.name=json.name);void 0!==json.color&&
material.color.setHex(json.color);void 0!==json.roughness&&(material.roughness=json.roughness);void 0!==json.metalness&&(material.metalness=json.metalness);void 0!==json.emissive&&material.emissive.setHex(json.emissive);void 0!==json.specular&&material.specular.setHex(json.specular);void 0!==json.shininess&&(material.shininess=json.shininess);void 0!==json.uniforms&&(material.uniforms=json.uniforms);void 0!==json.vertexShader&&(material.vertexShader=json.vertexShader);void 0!==json.fragmentShader&&
(material.fragmentShader=json.fragmentShader);void 0!==json.vertexColors&&(material.vertexColors=json.vertexColors);void 0!==json.shading&&(material.shading=json.shading);void 0!==json.blending&&(material.blending=json.blending);void 0!==json.side&&(material.side=json.side);void 0!==json.opacity&&(material.opacity=json.opacity);void 0!==json.transparent&&(material.transparent=json.transparent);void 0!==json.alphaTest&&(material.alphaTest=json.alphaTest);void 0!==json.depthTest&&(material.depthTest=
json.depthTest);void 0!==json.depthWrite&&(material.depthWrite=json.depthWrite);void 0!==json.colorWrite&&(material.colorWrite=json.colorWrite);void 0!==json.wireframe&&(material.wireframe=json.wireframe);void 0!==json.wireframeLinewidth&&(material.wireframeLinewidth=json.wireframeLinewidth);void 0!==json.size&&(material.size=json.size);void 0!==json.sizeAttenuation&&(material.sizeAttenuation=json.sizeAttenuation);void 0!==json.map&&(material.map=this.getTexture(json.map));void 0!==json.alphaMap&&
(material.alphaMap=this.getTexture(json.alphaMap),material.transparent=!0);void 0!==json.bumpMap&&(material.bumpMap=this.getTexture(json.bumpMap));void 0!==json.bumpScale&&(material.bumpScale=json.bumpScale);void 0!==json.normalMap&&(material.normalMap=this.getTexture(json.normalMap));if(void 0!==json.normalScale){var normalScale=json.normalScale;!1===Array.isArray(normalScale)&&(normalScale=[normalScale,normalScale]);material.normalScale=(new THREE.Vector2).fromArray(normalScale)}void 0!==json.displacementMap&&
(material.displacementMap=this.getTexture(json.displacementMap));void 0!==json.displacementScale&&(material.displacementScale=json.displacementScale);void 0!==json.displacementBias&&(material.displacementBias=json.displacementBias);void 0!==json.roughnessMap&&(material.roughnessMap=this.getTexture(json.roughnessMap));void 0!==json.metalnessMap&&(material.metalnessMap=this.getTexture(json.metalnessMap));void 0!==json.emissiveMap&&(material.emissiveMap=this.getTexture(json.emissiveMap));void 0!==json.emissiveIntensity&&
(material.emissiveIntensity=json.emissiveIntensity);void 0!==json.specularMap&&(material.specularMap=this.getTexture(json.specularMap));void 0!==json.envMap&&(material.envMap=this.getTexture(json.envMap),material.combine=THREE.MultiplyOperation);json.reflectivity&&(material.reflectivity=json.reflectivity);void 0!==json.lightMap&&(material.lightMap=this.getTexture(json.lightMap));void 0!==json.lightMapIntensity&&(material.lightMapIntensity=json.lightMapIntensity);void 0!==json.aoMap&&(material.aoMap=
this.getTexture(json.aoMap));void 0!==json.aoMapIntensity&&(material.aoMapIntensity=json.aoMapIntensity);if(void 0!==json.materials){normalScale=0;for(var l=json.materials.length;normalScale<l;normalScale++)material.materials.push(this.parse(json.materials[normalScale]))}return material}};THREE.ObjectLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;this.texturePath=""};THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(url,onLoad,onProgress,
onError){""===this.texturePath&&(this.texturePath=url.substring(0,url.lastIndexOf("/")+1));var scope=this;(new THREE.XHRLoader(scope.manager)).load(url,function(text){scope.parse(JSON.parse(text),onLoad)},onProgress,onError)},setTexturePath:function(value){this.texturePath=value},setCrossOrigin:function(value){this.crossOrigin=value},parse:function(json,onLoad){var geometries=this.parseGeometries(json.geometries),images=this.parseImages(json.images,function(){void 0!==onLoad&&onLoad(object)});images=
this.parseTextures(json.textures,images);images=this.parseMaterials(json.materials,images);var object=this.parseObject(json.object,geometries,images);json.animations&&(object.animations=this.parseAnimations(json.animations));void 0!==json.images&&0!==json.images.length||void 0===onLoad||onLoad(object);return object},parseGeometries:function(json){var geometries={};if(void 0!==json)for(var geometryLoader=new THREE.JSONLoader,bufferGeometryLoader=new THREE.BufferGeometryLoader,i=0,l=json.length;i<l;i++){var data=
json[i];switch(data.type){case "PlaneGeometry":case "PlaneBufferGeometry":var geometry=new THREE[data.type](data.width,data.height,data.widthSegments,data.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":geometry=new THREE[data.type](data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":geometry=new THREE[data.type](data.radius,data.segments,data.thetaStart,data.thetaLength);
break;case "CylinderGeometry":case "CylinderBufferGeometry":geometry=new THREE[data.type](data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case "ConeGeometry":case "ConeBufferGeometry":geometry=new THREE[data.type](data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case "SphereGeometry":case "SphereBufferGeometry":geometry=new THREE[data.type](data.radius,
data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);break;case "DodecahedronGeometry":case "IcosahedronGeometry":case "OctahedronGeometry":case "TetrahedronGeometry":geometry=new THREE[data.type](data.radius,data.detail);break;case "RingGeometry":case "RingBufferGeometry":geometry=new THREE[data.type](data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":geometry=
new THREE[data.type](data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":geometry=new THREE[data.type](data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);break;case "LatheGeometry":case "LatheBufferGeometry":geometry=new THREE[data.type](data.points,data.segments,data.phiStart,data.phiLength);break;case "BufferGeometry":geometry=bufferGeometryLoader.parse(data);break;case "Geometry":geometry=
geometryLoader.parse(data.data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+data.type+'"');continue}geometry.uuid=data.uuid;void 0!==data.name&&(geometry.name=data.name);geometries[data.uuid]=geometry}return geometries},parseMaterials:function(json,textures){var materials={};if(void 0!==json){var loader=new THREE.MaterialLoader;loader.setTextures(textures);textures=0;for(var l=json.length;textures<l;textures++){var material=loader.parse(json[textures]);
materials[material.uuid]=material}}return materials},parseAnimations:function(json){for(var animations=[],i=0;i<json.length;i++){var clip=THREE.AnimationClip.parse(json[i]);animations.push(clip)}return animations},parseImages:function(json,onLoad){function loadImage(url){scope.manager.itemStart(url);return loader.load(url,function(){scope.manager.itemEnd(url)})}var scope=this,images={};if(void 0!==json&&0<json.length){onLoad=new THREE.LoadingManager(onLoad);var loader=new THREE.ImageLoader(onLoad);
loader.setCrossOrigin(this.crossOrigin);onLoad=0;for(var l=json.length;onLoad<l;onLoad++){var image=json[onLoad],path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url)?image.url:scope.texturePath+image.url;images[image.uuid]=loadImage(path)}}return images},parseTextures:function(json,images){function parseConstant(value){if("number"===typeof value)return value;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",value);return THREE[value]}var textures={};if(void 0!==json)for(var i=
0,l=json.length;i<l;i++){var data=json[i];void 0===data.image&&console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid);void 0===images[data.image]&&console.warn("THREE.ObjectLoader: Undefined image",data.image);var texture=new THREE.Texture(images[data.image]);texture.needsUpdate=!0;texture.uuid=data.uuid;void 0!==data.name&&(texture.name=data.name);void 0!==data.mapping&&(texture.mapping=parseConstant(data.mapping));void 0!==data.offset&&(texture.offset=new THREE.Vector2(data.offset[0],
data.offset[1]));void 0!==data.repeat&&(texture.repeat=new THREE.Vector2(data.repeat[0],data.repeat[1]));void 0!==data.minFilter&&(texture.minFilter=parseConstant(data.minFilter));void 0!==data.magFilter&&(texture.magFilter=parseConstant(data.magFilter));void 0!==data.anisotropy&&(texture.anisotropy=data.anisotropy);Array.isArray(data.wrap)&&(texture.wrapS=parseConstant(data.wrap[0]),texture.wrapT=parseConstant(data.wrap[1]));textures[data.uuid]=texture}return textures},parseObject:function(){var matrix=
new THREE.Matrix4;return function(data,geometries,materials){function getGeometry(name){void 0===geometries[name]&&console.warn("THREE.ObjectLoader: Undefined geometry",name);return geometries[name]}function getMaterial(name){if(void 0!==name)return void 0===materials[name]&&console.warn("THREE.ObjectLoader: Undefined material",name),materials[name]}switch(data.type){case "Scene":var object=new THREE.Scene;break;case "PerspectiveCamera":object=new THREE.PerspectiveCamera(data.fov,data.aspect,data.near,
data.far);void 0!==data.focus&&(object.focus=data.focus);void 0!==data.zoom&&(object.zoom=data.zoom);void 0!==data.filmGauge&&(object.filmGauge=data.filmGauge);void 0!==data.filmOffset&&(object.filmOffset=data.filmOffset);void 0!==data.view&&(object.view=Object.assign({},data.view));break;case "OrthographicCamera":object=new THREE.OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);break;case "AmbientLight":object=new THREE.AmbientLight(data.color,data.intensity);break;
case "DirectionalLight":object=new THREE.DirectionalLight(data.color,data.intensity);break;case "PointLight":object=new THREE.PointLight(data.color,data.intensity,data.distance,data.decay);break;case "SpotLight":object=new THREE.SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case "HemisphereLight":object=new THREE.HemisphereLight(data.color,data.groundColor,data.intensity);break;case "Mesh":object=getGeometry(data.geometry);var material=getMaterial(data.material);
object=object.bones&&0<object.bones.length?new THREE.SkinnedMesh(object,material):new THREE.Mesh(object,material);break;case "LOD":object=new THREE.LOD;break;case "Line":object=new THREE.Line(getGeometry(data.geometry),getMaterial(data.material),data.mode);break;case "PointCloud":case "Points":object=new THREE.Points(getGeometry(data.geometry),getMaterial(data.material));break;case "Sprite":object=new THREE.Sprite(getMaterial(data.material));break;case "Group":object=new THREE.Group;break;default:object=
new THREE.Object3D}object.uuid=data.uuid;void 0!==data.name&&(object.name=data.name);void 0!==data.matrix?(matrix.fromArray(data.matrix),matrix.decompose(object.position,object.quaternion,object.scale)):(void 0!==data.position&&object.position.fromArray(data.position),void 0!==data.rotation&&object.rotation.fromArray(data.rotation),void 0!==data.scale&&object.scale.fromArray(data.scale));void 0!==data.castShadow&&(object.castShadow=data.castShadow);void 0!==data.receiveShadow&&(object.receiveShadow=
data.receiveShadow);void 0!==data.visible&&(object.visible=data.visible);void 0!==data.userData&&(object.userData=data.userData);if(void 0!==data.children)for(var child in data.children)object.add(this.parseObject(data.children[child],geometries,materials));if("LOD"===data.type)for(data=data.levels,material=0;material<data.length;material++){var level=data[material];child=object.getObjectByProperty("uuid",level.object);void 0!==child&&object.addLevel(child,level.distance)}return object}}()};THREE.TextureLoader=
function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(url,onLoad,onProgress,onError){var texture=new THREE.Texture,loader=new THREE.ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);loader.load(url,function(image){texture.image=image;texture.needsUpdate=!0;void 0!==onLoad&&onLoad(texture)},onProgress,onError);return texture},setCrossOrigin:function(value){this.crossOrigin=
value},setPath:function(value){this.path=value}};THREE.CubeTextureLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager};THREE.CubeTextureLoader.prototype={constructor:THREE.CubeTextureLoader,load:function(urls,onLoad,onProgress,onError){function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image;loaded++;6===loaded&&(texture.needsUpdate=!0,onLoad&&onLoad(texture))},void 0,onError)}var texture=new THREE.CubeTexture,loader=new THREE.ImageLoader(this.manager);
loader.setCrossOrigin(this.crossOrigin);loader.setPath(this.path);var loaded=0;for(onProgress=0;onProgress<urls.length;++onProgress)loadTexture(onProgress);return texture},setCrossOrigin:function(value){this.crossOrigin=value},setPath:function(value){this.path=value}};THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;this._parser=null};THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(url,
onLoad,onProgress,onError){var scope=this,texture=new THREE.DataTexture,loader=new THREE.XHRLoader(this.manager);loader.setResponseType("arraybuffer");loader.load(url,function(buffer){if(buffer=scope._parser(buffer))void 0!==buffer.image?texture.image=buffer.image:void 0!==buffer.data&&(texture.image.width=buffer.width,texture.image.height=buffer.height,texture.image.data=buffer.data),texture.wrapS=void 0!==buffer.wrapS?buffer.wrapS:THREE.ClampToEdgeWrapping,texture.wrapT=void 0!==buffer.wrapT?buffer.wrapT:
THREE.ClampToEdgeWrapping,texture.magFilter=void 0!==buffer.magFilter?buffer.magFilter:THREE.LinearFilter,texture.minFilter=void 0!==buffer.minFilter?buffer.minFilter:THREE.LinearMipMapLinearFilter,texture.anisotropy=void 0!==buffer.anisotropy?buffer.anisotropy:1,void 0!==buffer.format&&(texture.format=buffer.format),void 0!==buffer.type&&(texture.type=buffer.type),void 0!==buffer.mipmaps&&(texture.mipmaps=buffer.mipmaps),1===buffer.mipmapCount&&(texture.minFilter=THREE.LinearFilter),texture.needsUpdate=
!0,onLoad&&onLoad(texture,buffer)},onProgress,onError);return texture}};THREE.CompressedTextureLoader=function(manager){this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;this._parser=null};THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(url,onLoad,onProgress,onError){function loadTexture(i){loader.load(url[i],function(buffer){buffer=scope._parser(buffer,!0);images[i]={width:buffer.width,height:buffer.height,format:buffer.format,mipmaps:buffer.mipmaps};
loaded+=1;6===loaded&&(1===buffer.mipmapCount&&(texture.minFilter=THREE.LinearFilter),texture.format=buffer.format,texture.needsUpdate=!0,onLoad&&onLoad(texture))},onProgress,onError)}var scope=this,images=[],texture=new THREE.CompressedTexture;texture.image=images;var loader=new THREE.XHRLoader(this.manager);loader.setPath(this.path);loader.setResponseType("arraybuffer");if(Array.isArray(url))for(var loaded=0,i$jscomp$0=0,il=url.length;i$jscomp$0<il;++i$jscomp$0)loadTexture(i$jscomp$0);else loader.load(url,
function(buffer){buffer=scope._parser(buffer,!0);if(buffer.isCubemap)for(var faces=buffer.mipmaps.length/buffer.mipmapCount,f=0;f<faces;f++){images[f]={mipmaps:[]};for(var i=0;i<buffer.mipmapCount;i++)images[f].mipmaps.push(buffer.mipmaps[f*buffer.mipmapCount+i]),images[f].format=buffer.format,images[f].width=buffer.width,images[f].height=buffer.height}else texture.image.width=buffer.width,texture.image.height=buffer.height,texture.mipmaps=buffer.mipmaps;1===buffer.mipmapCount&&(texture.minFilter=
THREE.LinearFilter);texture.format=buffer.format;texture.needsUpdate=!0;onLoad&&onLoad(texture)},onProgress,onError);return texture},setPath:function(value){this.path=value}};THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Material";this.lights=this.fog=!0;this.blending=THREE.NormalBlending;this.side=THREE.FrontSide;this.shading=THREE.SmoothShading;this.vertexColors=THREE.NoColors;this.opacity=1;
this.transparent=!1;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null;this.depthFunc=THREE.LessEqualDepth;this.depthWrite=this.depthTest=!0;this.clippingPlanes=null;this.clipShadows=!1;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.premultipliedAlpha=!1;this.overdraw=0;this._needsUpdate=
this.visible=!0};THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(value){!0===value&&this.update();this._needsUpdate=value},setValues:function(values){if(void 0!==values)for(var key in values){var newValue=values[key];if(void 0===newValue)console.warn("THREE.Material: '"+key+"' parameter is undefined.");else{var currentValue=this[key];void 0===currentValue?console.warn("THREE."+this.type+": '"+key+"' is not a property of this material."):
currentValue instanceof THREE.Color?currentValue.set(newValue):currentValue instanceof THREE.Vector3&&newValue instanceof THREE.Vector3?currentValue.copy(newValue):this[key]="overdraw"===key?Number(newValue):newValue}}},toJSON:function(meta){function extractFromCache(cache){var values=[],key;for(key in cache){var data=cache[key];delete data.metadata;values.push(data)}return values}var isRoot=void 0===meta;isRoot&&(meta={textures:{},images:{}});var data$jscomp$0={metadata:{version:4.4,type:"Material",
generator:"Material.toJSON"}};data$jscomp$0.uuid=this.uuid;data$jscomp$0.type=this.type;""!==this.name&&(data$jscomp$0.name=this.name);this.color instanceof THREE.Color&&(data$jscomp$0.color=this.color.getHex());.5!==this.roughness&&(data$jscomp$0.roughness=this.roughness);.5!==this.metalness&&(data$jscomp$0.metalness=this.metalness);this.emissive instanceof THREE.Color&&(data$jscomp$0.emissive=this.emissive.getHex());this.specular instanceof THREE.Color&&(data$jscomp$0.specular=this.specular.getHex());
void 0!==this.shininess&&(data$jscomp$0.shininess=this.shininess);this.map instanceof THREE.Texture&&(data$jscomp$0.map=this.map.toJSON(meta).uuid);this.alphaMap instanceof THREE.Texture&&(data$jscomp$0.alphaMap=this.alphaMap.toJSON(meta).uuid);this.lightMap instanceof THREE.Texture&&(data$jscomp$0.lightMap=this.lightMap.toJSON(meta).uuid);this.bumpMap instanceof THREE.Texture&&(data$jscomp$0.bumpMap=this.bumpMap.toJSON(meta).uuid,data$jscomp$0.bumpScale=this.bumpScale);this.normalMap instanceof THREE.Texture&&
(data$jscomp$0.normalMap=this.normalMap.toJSON(meta).uuid,data$jscomp$0.normalScale=this.normalScale.toArray());this.displacementMap instanceof THREE.Texture&&(data$jscomp$0.displacementMap=this.displacementMap.toJSON(meta).uuid,data$jscomp$0.displacementScale=this.displacementScale,data$jscomp$0.displacementBias=this.displacementBias);this.roughnessMap instanceof THREE.Texture&&(data$jscomp$0.roughnessMap=this.roughnessMap.toJSON(meta).uuid);this.metalnessMap instanceof THREE.Texture&&(data$jscomp$0.metalnessMap=
this.metalnessMap.toJSON(meta).uuid);this.emissiveMap instanceof THREE.Texture&&(data$jscomp$0.emissiveMap=this.emissiveMap.toJSON(meta).uuid);this.specularMap instanceof THREE.Texture&&(data$jscomp$0.specularMap=this.specularMap.toJSON(meta).uuid);this.envMap instanceof THREE.Texture&&(data$jscomp$0.envMap=this.envMap.toJSON(meta).uuid,data$jscomp$0.reflectivity=this.reflectivity);void 0!==this.size&&(data$jscomp$0.size=this.size);void 0!==this.sizeAttenuation&&(data$jscomp$0.sizeAttenuation=this.sizeAttenuation);
this.blending!==THREE.NormalBlending&&(data$jscomp$0.blending=this.blending);this.shading!==THREE.SmoothShading&&(data$jscomp$0.shading=this.shading);this.side!==THREE.FrontSide&&(data$jscomp$0.side=this.side);this.vertexColors!==THREE.NoColors&&(data$jscomp$0.vertexColors=this.vertexColors);1>this.opacity&&(data$jscomp$0.opacity=this.opacity);!0===this.transparent&&(data$jscomp$0.transparent=this.transparent);0<this.alphaTest&&(data$jscomp$0.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&
(data$jscomp$0.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(data$jscomp$0.wireframe=this.wireframe);1<this.wireframeLinewidth&&(data$jscomp$0.wireframeLinewidth=this.wireframeLinewidth);isRoot&&(isRoot=extractFromCache(meta.textures),meta=extractFromCache(meta.images),0<isRoot.length&&(data$jscomp$0.textures=isRoot),0<meta.length&&(data$jscomp$0.images=meta));return data$jscomp$0},clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.name=source.name;
this.fog=source.fog;this.lights=source.lights;this.blending=source.blending;this.side=source.side;this.vertexColors=source.vertexColors;this.opacity=source.opacity;this.transparent=source.transparent;this.blendSrc=source.blendSrc;this.blendDst=source.blendDst;this.blendEquation=source.blendEquation;this.blendSrcAlpha=source.blendSrcAlpha;this.blendDstAlpha=source.blendDstAlpha;this.blendEquationAlpha=source.blendEquationAlpha;this.depthFunc=source.depthFunc;this.depthTest=source.depthTest;this.depthWrite=
source.depthWrite;this.colorWrite=source.colorWrite;this.precision=source.precision;this.polygonOffset=source.polygonOffset;this.polygonOffsetFactor=source.polygonOffsetFactor;this.polygonOffsetUnits=source.polygonOffsetUnits;this.alphaTest=source.alphaTest;this.premultipliedAlpha=source.premultipliedAlpha;this.overdraw=source.overdraw;this.visible=source.visible;this.clipShadows=source.clipShadows;source=source.clippingPlanes;var dstPlanes=null;if(null!==source){var n=source.length;dstPlanes=Array(n);
for(var i=0;i!==n;++i)dstPlanes[i]=source[i].clone()}this.clippingPlanes=dstPlanes;return this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};Object.assign(THREE.Material.prototype,THREE.EventDispatcher.prototype);THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(parameters){THREE.Material.call(this);this.type="LineBasicMaterial";this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.lights=
!1;this.setValues(parameters)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;THREE.LineBasicMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.linecap=source.linecap;this.linejoin=source.linejoin;return this};THREE.LineDashedMaterial=function(parameters){THREE.Material.call(this);this.type="LineDashedMaterial";
this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.lights=!1;this.setValues(parameters)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial;THREE.LineDashedMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.linewidth=source.linewidth;this.scale=source.scale;this.dashSize=source.dashSize;
this.gapSize=source.gapSize;return this};THREE.MeshBasicMaterial=function(parameters){THREE.Material.call(this);this.type="MeshBasicMaterial";this.color=new THREE.Color(16777215);this.aoMap=this.map=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.lights=this.morphTargets=this.skinning=!1;this.setValues(parameters)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;THREE.MeshBasicMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=
source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;return this};THREE.MeshDepthMaterial=function(parameters){THREE.Material.call(this);this.type="MeshDepthMaterial";this.depthPacking=THREE.BasicDepthPacking;this.morphTargets=this.skinning=!1;this.displacementMap=
this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.setValues(parameters)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;THREE.MeshDepthMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.depthPacking=source.depthPacking;this.skinning=source.skinning;this.morphTargets=
source.morphTargets;this.map=source.map;this.alphaMap=source.alphaMap;this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this};THREE.MeshLambertMaterial=function(parameters){THREE.Material.call(this);this.type="MeshLambertMaterial";this.color=new THREE.Color(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=
null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(parameters)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor=
THREE.MeshLambertMaterial;THREE.MeshLambertMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;
this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this};THREE.MeshNormalMaterial=function(parameters){THREE.Material.call(this,
parameters);this.type="MeshNormalMaterial";this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=this.lights=this.fog=!1;this.setValues(parameters)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;THREE.MeshNormalMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;return this};
THREE.MeshPhongMaterial=function(parameters){THREE.Material.call(this);this.type="MeshPhongMaterial";this.color=new THREE.Color(16777215);this.specular=new THREE.Color(1118481);this.shininess=30;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=
1;this.displacementBias=0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(parameters)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;THREE.MeshPhongMaterial.prototype.copy=
function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.specular.copy(source.specular);this.shininess=source.shininess;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;
this.normalMap=source.normalMap;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.specularMap=source.specularMap;this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.combine=source.combine;this.reflectivity=source.reflectivity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=
source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this};THREE.MeshStandardMaterial=function(parameters){THREE.Material.call(this);this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new THREE.Color(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new THREE.Color(0);
this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(parameters)};
THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial;THREE.MeshStandardMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.defines={STANDARD:""};this.color.copy(source.color);this.roughness=source.roughness;this.metalness=source.metalness;this.map=source.map;this.lightMap=source.lightMap;this.lightMapIntensity=source.lightMapIntensity;this.aoMap=source.aoMap;
this.aoMapIntensity=source.aoMapIntensity;this.emissive.copy(source.emissive);this.emissiveMap=source.emissiveMap;this.emissiveIntensity=source.emissiveIntensity;this.bumpMap=source.bumpMap;this.bumpScale=source.bumpScale;this.normalMap=source.normalMap;this.normalScale.copy(source.normalScale);this.displacementMap=source.displacementMap;this.displacementScale=source.displacementScale;this.displacementBias=source.displacementBias;this.roughnessMap=source.roughnessMap;this.metalnessMap=source.metalnessMap;
this.alphaMap=source.alphaMap;this.envMap=source.envMap;this.envMapIntensity=source.envMapIntensity;this.refractionRatio=source.refractionRatio;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;this.wireframeLinecap=source.wireframeLinecap;this.wireframeLinejoin=source.wireframeLinejoin;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;return this};THREE.MeshPhysicalMaterial=function(parameters){THREE.MeshStandardMaterial.call(this);
this.defines={PHYSICAL:""};this.type="MeshPhysicalMaterial";this.reflectivity=.5;this.setValues(parameters)};THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.MeshStandardMaterial.prototype);THREE.MeshPhysicalMaterial.prototype.constructor=THREE.MeshPhysicalMaterial;THREE.MeshPhysicalMaterial.prototype.copy=function(source){THREE.MeshStandardMaterial.prototype.copy.call(this,source);this.defines={PHYSICAL:""};this.reflectivity=source.reflectivity;return this};THREE.MultiMaterial=function(materials){this.uuid=
THREE.Math.generateUUID();this.type="MultiMaterial";this.materials=materials instanceof Array?materials:[];this.visible=!0};THREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(meta){for(var output={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},materials=this.materials,i=0,l=materials.length;i<l;i++){var material=materials[i].toJSON(meta);delete material.metadata;output.materials.push(material)}output.visible=
this.visible;return output},clone:function(){for(var material=new this.constructor,i=0;i<this.materials.length;i++)material.materials.push(this.materials[i].clone());material.visible=this.visible;return material}};THREE.PointsMaterial=function(parameters){THREE.Material.call(this);this.type="PointsMaterial";this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.lights=!1;this.setValues(parameters)};THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial;THREE.PointsMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.size=source.size;this.sizeAttenuation=source.sizeAttenuation;return this};THREE.ShaderMaterial=function(parameters){THREE.Material.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader="void main() {\n\tgl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
this.fragmentShader="void main() {\n\tgl_FragColor \x3d vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;void 0!==parameters&&(void 0!==parameters.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),
this.setValues(parameters))};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;THREE.ShaderMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.fragmentShader=source.fragmentShader;this.vertexShader=source.vertexShader;this.uniforms=THREE.UniformsUtils.clone(source.uniforms);this.defines=source.defines;this.wireframe=source.wireframe;this.wireframeLinewidth=source.wireframeLinewidth;
this.lights=source.lights;this.clipping=source.clipping;this.skinning=source.skinning;this.morphTargets=source.morphTargets;this.morphNormals=source.morphNormals;this.extensions=source.extensions;return this};THREE.ShaderMaterial.prototype.toJSON=function(meta){meta=THREE.Material.prototype.toJSON.call(this,meta);meta.uniforms=this.uniforms;meta.vertexShader=this.vertexShader;meta.fragmentShader=this.fragmentShader;return meta};THREE.RawShaderMaterial=function(parameters){THREE.ShaderMaterial.call(this,
parameters);this.type="RawShaderMaterial"};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial;THREE.SpriteMaterial=function(parameters){THREE.Material.call(this);this.type="SpriteMaterial";this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.lights=this.fog=!1;this.setValues(parameters)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor=
THREE.SpriteMaterial;THREE.SpriteMaterial.prototype.copy=function(source){THREE.Material.prototype.copy.call(this,source);this.color.copy(source.color);this.map=source.map;this.rotation=source.rotation;return this};THREE.ShadowMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:THREE.ShaderChunk.shadow_vert,fragmentShader:THREE.ShaderChunk.shadow_frag});this.transparent=this.lights=!0;Object.defineProperties(this,
{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(value){this.uniforms.opacity.value=value}}})};THREE.ShadowMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.ShadowMaterial.prototype.constructor=THREE.ShadowMaterial;THREE.Texture=function(image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++});this.uuid=THREE.Math.generateUUID();this.sourceFile=this.name=
"";this.image=void 0!==image?image:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==mapping?mapping:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==wrapS?wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==wrapT?wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==magFilter?magFilter:THREE.LinearFilter;this.minFilter=void 0!==minFilter?minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==anisotropy?anisotropy:1;this.format=void 0!==format?format:THREE.RGBAFormat;
this.type=void 0!==type?type:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==encoding?encoding:THREE.LinearEncoding;this.version=0;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping;THREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(value){!0===value&&this.version++},clone:function(){return(new this.constructor).copy(this)},
copy:function(source){this.image=source.image;this.mipmaps=source.mipmaps.slice(0);this.mapping=source.mapping;this.wrapS=source.wrapS;this.wrapT=source.wrapT;this.magFilter=source.magFilter;this.minFilter=source.minFilter;this.anisotropy=source.anisotropy;this.format=source.format;this.type=source.type;this.offset.copy(source.offset);this.repeat.copy(source.repeat);this.generateMipmaps=source.generateMipmaps;this.premultiplyAlpha=source.premultiplyAlpha;this.flipY=source.flipY;this.unpackAlignment=
source.unpackAlignment;this.encoding=source.encoding;return this},toJSON:function(meta){if(void 0!==meta.textures[this.uuid])return meta.textures[this.uuid];var output={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};if(void 0!==this.image){var image=this.image;
void 0===image.uuid&&(image.uuid=THREE.Math.generateUUID());if(void 0===meta.images[image.uuid]){var JSCompiler_temp_const=meta.images,JSCompiler_temp_const$jscomp$2=image.uuid,JSCompiler_temp_const$jscomp$1=image.uuid;if(void 0!==image.toDataURL)var JSCompiler_inline_result=image;else JSCompiler_inline_result=document.createElement("canvas"),JSCompiler_inline_result.width=image.width,JSCompiler_inline_result.height=image.height,JSCompiler_inline_result.getContext("2d").drawImage(image,0,0,image.width,
image.height);JSCompiler_inline_result=2048<JSCompiler_inline_result.width||2048<JSCompiler_inline_result.height?JSCompiler_inline_result.toDataURL("image/jpeg",.6):JSCompiler_inline_result.toDataURL("image/png");JSCompiler_temp_const[JSCompiler_temp_const$jscomp$2]={uuid:JSCompiler_temp_const$jscomp$1,url:JSCompiler_inline_result}}output.image=image.uuid}return meta.textures[this.uuid]=output},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(uv){if(this.mapping===THREE.UVMapping){uv.multiply(this.repeat);
uv.add(this.offset);if(0>uv.x||1<uv.x)switch(this.wrapS){case THREE.RepeatWrapping:uv.x-=Math.floor(uv.x);break;case THREE.ClampToEdgeWrapping:uv.x=0>uv.x?0:1;break;case THREE.MirroredRepeatWrapping:uv.x=1===Math.abs(Math.floor(uv.x)%2)?Math.ceil(uv.x)-uv.x:uv.x-Math.floor(uv.x)}if(0>uv.y||1<uv.y)switch(this.wrapT){case THREE.RepeatWrapping:uv.y-=Math.floor(uv.y);break;case THREE.ClampToEdgeWrapping:uv.y=0>uv.y?0:1;break;case THREE.MirroredRepeatWrapping:uv.y=1===Math.abs(Math.floor(uv.y)%2)?Math.ceil(uv.y)-
uv.y:uv.y-Math.floor(uv.y)}this.flipY&&(uv.y=1-uv.y)}}};Object.assign(THREE.Texture.prototype,THREE.EventDispatcher.prototype);THREE.TextureIdCount=0;THREE.DepthTexture=function(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy){THREE.Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,THREE.DepthFormat,type,anisotropy);this.image={width:width,height:height};this.type=void 0!==type?type:THREE.UnsignedShortType;this.magFilter=void 0!==magFilter?magFilter:THREE.NearestFilter;
this.minFilter=void 0!==minFilter?minFilter:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};THREE.DepthTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DepthTexture.prototype.constructor=THREE.DepthTexture;THREE.CanvasTexture=function(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){THREE.Texture.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.needsUpdate=!0};THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture;THREE.CubeTexture=function(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=void 0!==images?images:[];mapping=void 0!==mapping?mapping:THREE.CubeReflectionMapping;THREE.Texture.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.flipY=!1};THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CubeTexture.prototype.constructor=THREE.CubeTexture;
Object.defineProperty(THREE.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(value){this.image=value}});THREE.CompressedTexture=function(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){THREE.Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={width:width,height:height};this.mipmaps=mipmaps;this.generateMipmaps=this.flipY=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture;THREE.DataTexture=function(data,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){THREE.Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding);this.image={data:data,width:width,height:height};this.magFilter=void 0!==magFilter?magFilter:THREE.NearestFilter;this.minFilter=void 0!==minFilter?minFilter:THREE.NearestFilter;this.generateMipmaps=this.flipY=!1};
THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor=THREE.DataTexture;THREE.VideoTexture=function(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){function update(){requestAnimationFrame(update);video.readyState>=video.HAVE_CURRENT_DATA&&(scope.needsUpdate=!0)}THREE.Texture.call(this,video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy);this.generateMipmaps=!1;var scope=this;update()};THREE.VideoTexture.prototype=
Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor=THREE.VideoTexture;THREE.Group=function(){THREE.Object3D.call(this);this.type="Group"};THREE.Group.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Group});THREE.Points=function(geometry,material){THREE.Object3D.call(this);this.type="Points";this.geometry=void 0!==geometry?geometry:new THREE.BufferGeometry;this.material=void 0!==material?material:new THREE.PointsMaterial({color:16777215*
Math.random()})};THREE.Points.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Points,raycast:function(){var inverseMatrix=new THREE.Matrix4,ray=new THREE.Ray,sphere=new THREE.Sphere;return function(raycaster,intersects){function testPoint(point,index){var rayPointDistanceSq=ray.distanceSqToPoint(point);if(rayPointDistanceSq<localThresholdSq){point=ray.closestPointToPoint(point);point.applyMatrix4(matrixWorld);var distance=raycaster.ray.origin.distanceTo(point);distance<
raycaster.near||distance>raycaster.far||intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:point.clone(),index:index,face:null,object:object})}}var object=this,geometry=this.geometry,matrixWorld=this.matrixWorld,threshold=raycaster.params.Points.threshold;null===geometry.boundingSphere&&geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere);sphere.applyMatrix4(matrixWorld);if(!1!==raycaster.ray.intersectsSphere(sphere)){inverseMatrix.getInverse(matrixWorld);
ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);threshold/=(this.scale.x+this.scale.y+this.scale.z)/3;var localThresholdSq=threshold*threshold;threshold=new THREE.Vector3;if(geometry instanceof THREE.BufferGeometry){var index$jscomp$0=geometry.index;geometry=geometry.attributes.position.array;if(null!==index$jscomp$0){var indices=index$jscomp$0.array;index$jscomp$0=0;for(var il=indices.length;index$jscomp$0<il;index$jscomp$0++){var a=indices[index$jscomp$0];threshold.fromArray(geometry,3*a);testPoint(threshold,
a)}}else for(index$jscomp$0=0,indices=geometry.length/3;index$jscomp$0<indices;index$jscomp$0++)threshold.fromArray(geometry,3*index$jscomp$0),testPoint(threshold,index$jscomp$0)}else for(threshold=geometry.vertices,index$jscomp$0=0,indices=threshold.length;index$jscomp$0<indices;index$jscomp$0++)testPoint(threshold[index$jscomp$0],index$jscomp$0)}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Line=function(geometry,material,mode){if(1===mode)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),
new THREE.LineSegments(geometry,material);THREE.Object3D.call(this);this.type="Line";this.geometry=void 0!==geometry?geometry:new THREE.BufferGeometry;this.material=void 0!==material?material:new THREE.LineBasicMaterial({color:16777215*Math.random()})};THREE.Line.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Line,raycast:function(){var inverseMatrix=new THREE.Matrix4,ray=new THREE.Ray,sphere=new THREE.Sphere;return function(raycaster,intersects){var precision=
raycaster.linePrecision;precision*=precision;var geometry=this.geometry,matrixWorld=this.matrixWorld;null===geometry.boundingSphere&&geometry.computeBoundingSphere();sphere.copy(geometry.boundingSphere);sphere.applyMatrix4(matrixWorld);if(!1!==raycaster.ray.intersectsSphere(sphere)){inverseMatrix.getInverse(matrixWorld);ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);var vStart=new THREE.Vector3,vEnd=new THREE.Vector3;matrixWorld=new THREE.Vector3;var interRay=new THREE.Vector3,step=this instanceof
THREE.LineSegments?2:1;if(geometry instanceof THREE.BufferGeometry){var index=geometry.index,positions=geometry.attributes.position.array;if(null!==index){index=index.array;geometry=0;for(var l=index.length-1;geometry<l;geometry+=step){var b=index[geometry+1];vStart.fromArray(positions,3*index[geometry]);vEnd.fromArray(positions,3*b);b=ray.distanceSqToSegment(vStart,vEnd,interRay,matrixWorld);b>precision||(interRay.applyMatrix4(this.matrixWorld),b=raycaster.ray.origin.distanceTo(interRay),b<raycaster.near||
b>raycaster.far||intersects.push({distance:b,point:matrixWorld.clone().applyMatrix4(this.matrixWorld),index:geometry,face:null,faceIndex:null,object:this}))}}else for(geometry=0,l=positions.length/3-1;geometry<l;geometry+=step)vStart.fromArray(positions,3*geometry),vEnd.fromArray(positions,3*geometry+3),b=ray.distanceSqToSegment(vStart,vEnd,interRay,matrixWorld),b>precision||(interRay.applyMatrix4(this.matrixWorld),b=raycaster.ray.origin.distanceTo(interRay),b<raycaster.near||b>raycaster.far||intersects.push({distance:b,
point:matrixWorld.clone().applyMatrix4(this.matrixWorld),index:geometry,face:null,faceIndex:null,object:this}))}else if(geometry instanceof THREE.Geometry)for(vStart=geometry.vertices,vEnd=vStart.length,geometry=0;geometry<vEnd-1;geometry+=step)b=ray.distanceSqToSegment(vStart[geometry],vStart[geometry+1],interRay,matrixWorld),b>precision||(interRay.applyMatrix4(this.matrixWorld),b=raycaster.ray.origin.distanceTo(interRay),b<raycaster.near||b>raycaster.far||intersects.push({distance:b,point:matrixWorld.clone().applyMatrix4(this.matrixWorld),
index:geometry,face:null,faceIndex:null,object:this}))}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.LineSegments=function(geometry,material){THREE.Line.call(this,geometry,material);this.type="LineSegments"};THREE.LineSegments.prototype=Object.assign(Object.create(THREE.Line.prototype),{constructor:THREE.LineSegments});THREE.Mesh=function(geometry,material){THREE.Object3D.call(this);this.type="Mesh";this.geometry=void 0!==geometry?geometry:new THREE.BufferGeometry;
this.material=void 0!==material?material:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.drawMode=THREE.TrianglesDrawMode;this.updateMorphTargets()};THREE.Mesh.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Mesh,setDrawMode:function(value){this.drawMode=value},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetInfluences=[];this.morphTargetDictionary=
{};for(var m=0,ml=this.geometry.morphTargets.length;m<ml;m++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[m].name]=m}},getMorphTargetIndexByName:function(name){if(void 0!==this.morphTargetDictionary[name])return this.morphTargetDictionary[name];console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+name+" does not exist. Returning 0.");return 0},raycast:function(){function uvIntersection(point,p1,p2,p3,uv1,uv2,uv3){THREE.Triangle.barycoordFromPoint(point,
p1,p2,p3,barycoord);uv1.multiplyScalar(barycoord.x);uv2.multiplyScalar(barycoord.y);uv3.multiplyScalar(barycoord.z);uv1.add(uv2).add(uv3);return uv1.clone()}function checkIntersection(object,raycaster,ray,pA,pB,pC,point){var material=object.material;if(null===(material.side===THREE.BackSide?ray.intersectTriangle(pC,pB,pA,!0,point):ray.intersectTriangle(pA,pB,pC,material.side!==THREE.DoubleSide,point)))return null;intersectionPointWorld.copy(point);intersectionPointWorld.applyMatrix4(object.matrixWorld);
ray=raycaster.ray.origin.distanceTo(intersectionPointWorld);return ray<raycaster.near||ray>raycaster.far?null:{distance:ray,point:intersectionPointWorld.clone(),object:object}}function checkBufferGeometryIntersection(object,raycaster,ray,positions,uvs,a,b,c){vA.fromArray(positions,3*a);vB.fromArray(positions,3*b);vC.fromArray(positions,3*c);if(object=checkIntersection(object,raycaster,ray,vA,vB,vC,intersectionPoint))uvs&&(uvA.fromArray(uvs,2*a),uvB.fromArray(uvs,2*b),uvC.fromArray(uvs,2*c),object.uv=
uvIntersection(intersectionPoint,vA,vB,vC,uvA,uvB,uvC)),object.face=new THREE.Face3(a,b,c,THREE.Triangle.normal(vA,vB,vC)),object.faceIndex=a;return object}var inverseMatrix=new THREE.Matrix4,ray$jscomp$0=new THREE.Ray,sphere=new THREE.Sphere,vA=new THREE.Vector3,vB=new THREE.Vector3,vC=new THREE.Vector3,tempA=new THREE.Vector3,tempB=new THREE.Vector3,tempC=new THREE.Vector3,uvA=new THREE.Vector2,uvB=new THREE.Vector2,uvC=new THREE.Vector2,barycoord=new THREE.Vector3,intersectionPoint=new THREE.Vector3,
intersectionPointWorld=new THREE.Vector3;return function(raycaster,intersects){var geometry=this.geometry,material=this.material,matrixWorld=this.matrixWorld;if(void 0!==material&&(null===geometry.boundingSphere&&geometry.computeBoundingSphere(),sphere.copy(geometry.boundingSphere),sphere.applyMatrix4(matrixWorld),!1!==raycaster.ray.intersectsSphere(sphere)&&(inverseMatrix.getInverse(matrixWorld),ray$jscomp$0.copy(raycaster.ray).applyMatrix4(inverseMatrix),null===geometry.boundingBox||!1!==ray$jscomp$0.intersectsBox(geometry.boundingBox)))){var intersection;
if(geometry instanceof THREE.BufferGeometry){material=geometry.index;matrixWorld=geometry.attributes;geometry=matrixWorld.position.array;if(void 0!==matrixWorld.uv)var uvs=matrixWorld.uv.array;if(null!==material){matrixWorld=material.array;for(var i=0,l=matrixWorld.length;i<l;i+=3){material=matrixWorld[i];var b=matrixWorld[i+1];var c=matrixWorld[i+2];if(intersection=checkBufferGeometryIntersection(this,raycaster,ray$jscomp$0,geometry,uvs,material,b,c))intersection.faceIndex=Math.floor(i/3),intersects.push(intersection)}}else for(i=
0,l=geometry.length;i<l;i+=9)if(material=i/3,b=material+1,c=material+2,intersection=checkBufferGeometryIntersection(this,raycaster,ray$jscomp$0,geometry,uvs,material,b,c))intersection.index=material,intersects.push(intersection)}else if(geometry instanceof THREE.Geometry){matrixWorld=material instanceof THREE.MultiMaterial;i=!0===matrixWorld?material.materials:null;l=geometry.vertices;b=geometry.faces;c=geometry.faceVertexUvs[0];0<c.length&&(uvs=c);for(var f=0,fl=b.length;f<fl;f++){var face=b[f];
intersection=!0===matrixWorld?i[face.materialIndex]:material;if(void 0!==intersection){c=l[face.a];var fvB=l[face.b];var fvC=l[face.c];if(!0===intersection.morphTargets){intersection=geometry.morphTargets;var morphInfluences=this.morphTargetInfluences;vA.set(0,0,0);vB.set(0,0,0);vC.set(0,0,0);for(var t=0,tl=intersection.length;t<tl;t++){var influence=morphInfluences[t];if(0!==influence){var targets=intersection[t].vertices;vA.addScaledVector(tempA.subVectors(targets[face.a],c),influence);vB.addScaledVector(tempB.subVectors(targets[face.b],
fvB),influence);vC.addScaledVector(tempC.subVectors(targets[face.c],fvC),influence)}}vA.add(c);vB.add(fvB);vC.add(fvC);c=vA;fvB=vB;fvC=vC}if(intersection=checkIntersection(this,raycaster,ray$jscomp$0,c,fvB,fvC,intersectionPoint))uvs&&(morphInfluences=uvs[f],uvA.copy(morphInfluences[0]),uvB.copy(morphInfluences[1]),uvC.copy(morphInfluences[2]),intersection.uv=uvIntersection(intersectionPoint,c,fvB,fvC,uvA,uvB,uvC)),intersection.face=face,intersection.faceIndex=f,intersects.push(intersection)}}}}}}(),
clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});THREE.Bone=function(skin){THREE.Object3D.call(this);this.type="Bone";this.skin=skin};THREE.Bone.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Bone,copy:function(source){THREE.Object3D.prototype.copy.call(this,source);this.skin=source.skin;return this}});THREE.Skeleton=function(bones,boneInverses,useVertexTexture){this.useVertexTexture=void 0!==useVertexTexture?useVertexTexture:
!0;this.identityMatrix=new THREE.Matrix4;bones=bones||[];this.bones=bones.slice(0);this.useVertexTexture?(bones=Math.sqrt(4*this.bones.length),bones=THREE.Math.nextPowerOfTwo(Math.ceil(bones)),this.boneTextureHeight=this.boneTextureWidth=bones=Math.max(bones,4),this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)):this.boneMatrices=new Float32Array(16*
this.bones.length);if(void 0===boneInverses)this.calculateInverses();else if(this.bones.length===boneInverses.length)this.boneInverses=boneInverses.slice(0);else for(console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[],boneInverses=0,bones=this.bones.length;boneInverses<bones;boneInverses++)this.boneInverses.push(new THREE.Matrix4)};Object.assign(THREE.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var b=0,bl=this.bones.length;b<bl;b++){var inverse=
new THREE.Matrix4;this.bones[b]&&inverse.getInverse(this.bones[b].matrixWorld);this.boneInverses.push(inverse)}},pose:function(){for(var bone,b=0,bl=this.bones.length;b<bl;b++)(bone=this.bones[b])&&bone.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(bl=this.bones.length;b<bl;b++)if(bone=this.bones[b])bone.parent?(bone.matrix.getInverse(bone.parent.matrixWorld),bone.matrix.multiply(bone.matrixWorld)):bone.matrix.copy(bone.matrixWorld),bone.matrix.decompose(bone.position,bone.quaternion,bone.scale)},
update:function(){var offsetMatrix=new THREE.Matrix4;return function(){for(var b=0,bl=this.bones.length;b<bl;b++)offsetMatrix.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),offsetMatrix.toArray(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}});THREE.SkinnedMesh=function(geometry,material,useVertexTexture){THREE.Mesh.call(this,
geometry,material);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;geometry=[];if(this.geometry&&void 0!==this.geometry.bones){for(var gbone,b=0,bl=this.geometry.bones.length;b<bl;++b)gbone=this.geometry.bones[b],material=new THREE.Bone(this),geometry.push(material),material.name=gbone.name,material.position.fromArray(gbone.pos),material.quaternion.fromArray(gbone.rotq),void 0!==gbone.scl&&material.scale.fromArray(gbone.scl);
b=0;for(bl=this.geometry.bones.length;b<bl;++b)gbone=this.geometry.bones[b],-1!==gbone.parent&&null!==gbone.parent&&void 0!==geometry[gbone.parent]?geometry[gbone.parent].add(geometry[b]):this.add(geometry[b])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(geometry,void 0,useVertexTexture),this.matrixWorld)};THREE.SkinnedMesh.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:THREE.SkinnedMesh,bind:function(skeleton,bindMatrix){this.skeleton=
skeleton;void 0===bindMatrix&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),bindMatrix=this.matrixWorld);this.bindMatrix.copy(bindMatrix);this.bindMatrixInverse.getInverse(bindMatrix)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof THREE.Geometry)for(var i=0;i<this.geometry.skinWeights.length;i++){var sw=this.geometry.skinWeights[i],scale=1/sw.lengthManhattan();Infinity!==scale?sw.multiplyScalar(scale):sw.set(1,0,0,0)}else if(this.geometry instanceof
THREE.BufferGeometry){sw=new THREE.Vector4;var skinWeight=this.geometry.attributes.skinWeight;for(i=0;i<skinWeight.count;i++)sw.x=skinWeight.getX(i),sw.y=skinWeight.getY(i),sw.z=skinWeight.getZ(i),sw.w=skinWeight.getW(i),scale=1/sw.lengthManhattan(),Infinity!==scale?sw.multiplyScalar(scale):sw.set(1,0,0,0),skinWeight.setXYZW(i,sw.x,sw.y,sw.z,sw.w)}},updateMatrixWorld:function(force){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):
"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unrecognized bindMode: "+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material,this.useVertexTexture)).copy(this)}});THREE.LOD=function(){THREE.Object3D.call(this);this.type="LOD";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})};THREE.LOD.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LOD,copy:function(source){THREE.Object3D.prototype.copy.call(this,
source,!1);source=source.levels;for(var i=0,l=source.length;i<l;i++){var level=source[i];this.addLevel(level.object.clone(),level.distance)}return this},addLevel:function(object,distance){void 0===distance&&(distance=0);distance=Math.abs(distance);for(var levels=this.levels,l=0;l<levels.length&&!(distance<levels[l].distance);l++);levels.splice(l,0,{distance:distance,object:object});this.add(object)},getObjectForDistance:function(distance){for(var levels=this.levels,i=1,l=levels.length;i<l&&!(distance<
levels[i].distance);i++);return levels[i-1].object},raycast:function(){var matrixPosition=new THREE.Vector3;return function(raycaster,intersects){matrixPosition.setFromMatrixPosition(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(matrixPosition);this.getObjectForDistance(distance).raycast(raycaster,intersects)}}(),update:function(){var v1=new THREE.Vector3,v2=new THREE.Vector3;return function(camera){var levels=this.levels;if(1<levels.length){v1.setFromMatrixPosition(camera.matrixWorld);
v2.setFromMatrixPosition(this.matrixWorld);camera=v1.distanceTo(v2);levels[0].object.visible=!0;for(var i=1,l=levels.length;i<l;i++)if(camera>=levels[i].distance)levels[i-1].object.visible=!1,levels[i].object.visible=!0;else break;for(;i<l;i++)levels[i].object.visible=!1}}}(),toJSON:function(meta){meta=THREE.Object3D.prototype.toJSON.call(this,meta);meta.object.levels=[];for(var levels=this.levels,i=0,l=levels.length;i<l;i++){var level=levels[i];meta.object.levels.push({object:level.object.uuid,distance:level.distance})}return meta}});
THREE.Sprite=function(material){THREE.Object3D.call(this);this.type="Sprite";this.material=void 0!==material?material:new THREE.SpriteMaterial};THREE.Sprite.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Sprite,raycast:function(){var matrixPosition=new THREE.Vector3;return function(raycaster,intersects){matrixPosition.setFromMatrixPosition(this.matrixWorld);raycaster=raycaster.ray.distanceSqToPoint(matrixPosition);raycaster>this.scale.x*this.scale.y/4||intersects.push({distance:Math.sqrt(raycaster),
point:this.position,face:null,object:this})}}(),clone:function(){return(new this.constructor(this.material)).copy(this)}});THREE.LensFlare=function(texture,size,distance,blending,color){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==texture&&this.add(texture,size,distance,blending,color)};THREE.LensFlare.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LensFlare,copy:function(source){THREE.Object3D.prototype.copy.call(this,
source);this.positionScreen.copy(source.positionScreen);this.customUpdateCallback=source.customUpdateCallback;for(var i=0,l=source.lensFlares.length;i<l;i++)this.lensFlares.push(source.lensFlares[i]);return this},add:function(texture,size,distance,blending,color,opacity){void 0===size&&(size=-1);void 0===distance&&(distance=0);void 0===opacity&&(opacity=1);void 0===color&&(color=new THREE.Color(16777215));void 0===blending&&(blending=THREE.NormalBlending);distance=Math.min(distance,Math.max(0,distance));
this.lensFlares.push({texture:texture,size:size,distance:distance,x:0,y:0,z:0,scale:1,rotation:0,opacity:opacity,color:color,blending:blending})},updateLensFlares:function(){var f,fl=this.lensFlares.length,vecX=2*-this.positionScreen.x,vecY=2*-this.positionScreen.y;for(f=0;f<fl;f++){var flare=this.lensFlares[f];flare.x=this.positionScreen.x+vecX*flare.distance;flare.y=this.positionScreen.y+vecY*flare.distance;flare.wantedRotation=flare.x*Math.PI*.25;flare.rotation+=.25*(flare.wantedRotation-flare.rotation)}}});
THREE.Scene=function(){THREE.Object3D.call(this);this.type="Scene";this.overrideMaterial=this.fog=null;this.autoUpdate=!0};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);THREE.Scene.prototype.constructor=THREE.Scene;THREE.Scene.prototype.copy=function(source,recursive){THREE.Object3D.prototype.copy.call(this,source,recursive);null!==source.fog&&(this.fog=source.fog.clone());null!==source.overrideMaterial&&(this.overrideMaterial=source.overrideMaterial.clone());this.autoUpdate=source.autoUpdate;
this.matrixAutoUpdate=source.matrixAutoUpdate;return this};THREE.Fog=function(color,near,far){this.name="";this.color=new THREE.Color(color);this.near=void 0!==near?near:1;this.far=void 0!==far?far:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(color,density){this.name="";this.color=new THREE.Color(color);this.density=void 0!==density?density:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),
this.density)};THREE.ShaderChunk={};THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *\x3d texture2D( alphaMap, vUv ).g;\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a \x3c ALPHATEST ) discard;\n#endif\n";THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion \x3d ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *\x3d ambientOcclusion;\n\t#if defined( USE_ENVMAP ) \x26\x26 defined( PHYSICAL )\n\t\tfloat dotNV \x3d saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *\x3d computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";
THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";THREE.ShaderChunk.begin_vertex="\nvec3 transformed \x3d vec3( position );\n";THREE.ShaderChunk.beginnormal_vertex="\nvec3 objectNormal \x3d vec3( normal );\n";THREE.ShaderChunk.bsdfs="bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n\treturn any( bvec2( cutoffDistance \x3d\x3d 0.0, lightDistance \x3c cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t\tif( decayExponent \x3e 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\t\tfloat distanceFalloff \x3d 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\t\tfloat maxDistanceCutoffFactor \x3d pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t\t}\n\t\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel \x3d exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat gl \x3d dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv \x3d dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat gv \x3d dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl \x3d dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat denom \x3d pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha \x3d pow2( roughness );\n\tvec3 halfDir \x3d normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL \x3d saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV \x3d saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH \x3d saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH \x3d saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F \x3d F_Schlick( specularColor, dotLH );\n\tfloat G \x3d G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D \x3d D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV \x3d saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 \x3d vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 \x3d vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r \x3d roughness * c0 + c1;\n\tfloat a004 \x3d min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB \x3d vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir \x3d normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH \x3d saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH \x3d saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F \x3d F_Schlick( specularColor, dotLH );\n\tfloat G \x3d G_BlinnPhong_Implicit( );\n\tfloat D \x3d D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";
THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx \x3d dFdx( vUv );\n\t\tvec2 dSTdy \x3d dFdy( vUv );\n\t\tfloat Hll \x3d bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx \x3d bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy \x3d bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX \x3d dFdx( surf_pos );\n\t\tvec3 vSigmaY \x3d dFdy( surf_pos );\n\t\tvec3 vN \x3d surf_norm;\n\t\tvec3 R1 \x3d cross( vSigmaY, vN );\n\t\tvec3 R2 \x3d cross( vN, vSigmaX );\n\t\tfloat fDet \x3d dot( vSigmaX, R1 );\n\t\tvec3 vGrad \x3d sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";
THREE.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane \x3d clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) \x3e plane.w ) discard;\n\t}\n#endif\n";THREE.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES \x3e 0\n\t#if ! defined( PHYSICAL ) \x26\x26 ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";
THREE.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES \x3e 0 \x26\x26 ! defined( PHYSICAL ) \x26\x26 ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";THREE.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES \x3e 0 \x26\x26 ! defined( PHYSICAL ) \x26\x26 ! defined( PHONG )\n\tvViewPosition \x3d - mvPosition.xyz;\n#endif\n";THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *\x3d vColor;\n#endif";THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";
THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\tvColor.xyz \x3d color.xyz;\n#endif";THREE.ShaderChunk.common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 \x3d x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a \x3d 12.9898, b \x3d 78.233, c \x3d 43758.5453;\n\thighp float dt \x3d dot( uv.xy, vec2( a,b ) ), sn \x3d mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance \x3d dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";
THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection \x3d abs(direction);\n\tint face \x3d -1;\n\tif( absDirection.x \x3e absDirection.z ) {\n\t\tif(absDirection.x \x3e absDirection.y )\n\t\t\tface \x3d direction.x \x3e 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface \x3d direction.y \x3e 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z \x3e absDirection.y )\n\t\t\tface \x3d direction.z \x3e 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface \x3d direction.y \x3e 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale \x3d exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness \x3d dFdx(roughness);\n\tfloat dyRoughness \x3d dFdy(roughness);\n\tvec3 dx \x3d dFdx( vec * scale * dxRoughness );\n\tvec3 dy \x3d dFdy( vec * scale * dyRoughness );\n\tfloat d \x3d max( dot( dx, dx ), dot( dy, dy ) );\n\td \x3d clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel \x3d 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel \x3d roughnessLevel \x3e cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a \x3d 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed \x3d exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed \x3d vec2( 1.0 ) / exp2_packed;\n\tfloat powScale \x3d exp2_packed.x * exp2_packed.y;\n\tfloat scale \x3d rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset \x3d 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes \x3d mipLevel \x3d\x3d 0.0;\n\tscale \x3d  bRes \x26\x26 (scale \x3c a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face \x3d getFaceFromDirection(direction);\n\tfloat rcpPowScale \x3d 1.0 / powScale;\n\tif( face \x3d\x3d 0) {\n\t\tr \x3d vec3(direction.x, -direction.z, direction.y);\n\t\toffset \x3d vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face \x3d\x3d 1) {\n\t\tr \x3d vec3(direction.y, direction.x, direction.z);\n\t\toffset \x3d vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face \x3d\x3d 2) {\n\t\tr \x3d vec3(direction.z, direction.x, direction.y);\n\t\toffset \x3d vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  a : offset.y;\n\t}\n\telse if( face \x3d\x3d 3) {\n\t\tr \x3d vec3(direction.x, direction.z, direction.y);\n\t\toffset \x3d vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse if( face \x3d\x3d 4) {\n\t\tr \x3d vec3(direction.y, direction.x, -direction.z);\n\t\toffset \x3d vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  0.0 : offset.y;\n\t}\n\telse {\n\t\tr \x3d vec3(direction.z, -direction.x, direction.y);\n\t\toffset \x3d vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y \x3d bRes \x26\x26 (offset.y \x3c 2.0*a) ?  0.0 : offset.y;\n\t}\n\tr \x3d normalize(r);\n\tfloat texelOffset \x3d 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s \x3d ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base \x3d offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal \x3d roughness* cubeUV_maxLods3;\n\tfloat r1 \x3d floor(roughnessVal);\n\tfloat r2 \x3d r1 + 1.0;\n\tfloat t \x3d fract(roughnessVal);\n\tvec2 mipInfo \x3d MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s \x3d mipInfo.y;\n\tfloat level0 \x3d mipInfo.x;\n\tfloat level1 \x3d level0 + 1.0;\n\tlevel1 \x3d level1 \x3e 5.0 ? 5.0 : level1;\n\tlevel0 +\x3d min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 \x3d getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 \x3d envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 \x3d getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 \x3d envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result \x3d mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";
THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\n\tobjectNormal \x3d -objectNormal;\n#endif\nvec3 transformedNormal \x3d normalMatrix * objectNormal;\n";THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed +\x3d normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";
THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor \x3d texture2D( emissiveMap, vUv );\n\temissiveColor.rgb \x3d emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *\x3d emissiveColor.rgb;\n#endif\n";THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";THREE.ShaderChunk.encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent \x3d max( max( value.r, value.g ), value.b );\n  float fExp \x3d clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB \x3d max( value.x, max( value.g, value.b ) );\n  float M      \x3d clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            \x3d ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB \x3d max( value.x, max( value.g, value.b ) );\n    float D      \x3d max( maxRange / maxRGB, 1.0 );\n    D            \x3d min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM \x3d mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp \x3d value.rgb * cLogLuvM;\n  Xp_Y_XYZp \x3d max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy \x3d Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le \x3d 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w \x3d fract(Le);\n  vResult.z \x3d (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM \x3d mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le \x3d value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y \x3d exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z \x3d Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x \x3d value.x * Xp_Y_XYZp.z;\n  vec3 vRGB \x3d Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";
THREE.ShaderChunk.encodings_fragment="  gl_FragColor \x3d linearToOutputTexel( gl_FragColor );\n";THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex \x3d normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal \x3d inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec \x3d reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec \x3d refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec \x3d vReflect;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal \x3d ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#else\n\t\tfloat flipNormal \x3d 1.0;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor \x3d textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y \x3d saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x \x3d atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor \x3d texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView \x3d flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor \x3d texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\tenvColor \x3d envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight \x3d mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight \x3d mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight +\x3d envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";
THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) \x26\x26 ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";
THREE.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";THREE.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition \x3d worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex \x3d normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal \x3d inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect \x3d reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect \x3d refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";
THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth \x3d gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth \x3d gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor \x3d whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor \x3d smoothstep( fogNear, fogFar, depth );\n\t#endif\n\tgl_FragColor.rgb \x3d mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";THREE.ShaderChunk.fog_pars_fragment=
"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse +\x3d PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";THREE.ShaderChunk.lights_lambert_vertex=
"vec3 diffuse \x3d vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position \x3d mvPosition.xyz;\ngeometry.normal \x3d normalize( transformedNormal );\ngeometry.viewDir \x3d normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position \x3d geometry.position;\nbackGeometry.normal \x3d -geometry.normal;\nbackGeometry.viewDir \x3d geometry.viewDir;\nvLightFront \x3d vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack \x3d vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";
THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance \x3d ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS \x3e 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color \x3d directionalLight.color;\n\t\tdirectLight.direction \x3d directionalLight.direction;\n\t\tdirectLight.visible \x3d true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS \x3e 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector \x3d pointLight.position - geometry.position;\n\t\tdirectLight.direction \x3d normalize( lVector );\n\t\tfloat lightDistance \x3d length( lVector );\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\n\t\t\tdirectLight.color \x3d pointLight.color;\n\t\t\tdirectLight.color *\x3d punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\t\tdirectLight.visible \x3d true;\n\t\t} else {\n\t\t\tdirectLight.color \x3d vec3( 0.0 );\n\t\t\tdirectLight.visible \x3d false;\n\t\t}\n\t}\n#endif\n#if NUM_SPOT_LIGHTS \x3e 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector \x3d spotLight.position - geometry.position;\n\t\tdirectLight.direction \x3d normalize( lVector );\n\t\tfloat lightDistance \x3d length( lVector );\n\t\tfloat angleCos \x3d dot( directLight.direction, spotLight.direction );\n\t\tif ( all( bvec2( angleCos \x3e spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n\t\t\tfloat spotEffect \x3d smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color \x3d spotLight.color;\n\t\t\tdirectLight.color *\x3d spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible \x3d true;\n\t\t} else {\n\t\t\tdirectLight.color \x3d vec3( 0.0 );\n\t\t\tdirectLight.visible \x3d false;\n\t\t}\n\t}\n#endif\n#if NUM_HEMI_LIGHTS \x3e 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL \x3d dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight \x3d 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance \x3d mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *\x3d PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) \x26\x26 defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal \x3d ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal \x3d 1.0;\n\t\t#endif\n\t\tvec3 worldNormal \x3d inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec \x3d flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec \x3d flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor \x3d textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor \x3d vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar \x3d float( maxMIPLevel );\n\t\tfloat desiredMIPLevel \x3d maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec \x3d reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec \x3d refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tfloat flipNormal \x3d ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tfloat flipNormal \x3d 1.0;\n\t\t#endif\n\t\treflectVec \x3d inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel \x3d getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec \x3d flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec \x3d flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor \x3d textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y \x3d saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\t\tsampleUV.x \x3d atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView \x3d flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";
THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb;\nmaterial.specularColor \x3d specular;\nmaterial.specularShininess \x3d shininess;\nmaterial.specularStrength \x3d specularStrength;\n";THREE.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL \x3d saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance \x3d dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treflectedLight.directDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular +\x3d irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";
THREE.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness \x3d clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor \x3d mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor \x3d mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#endif\n";THREE.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t#endif\n};\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL \x3d saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance \x3d dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treflectedLight.directDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular +\x3d irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectSpecular +\x3d radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";
THREE.ShaderChunk.lights_template="\nGeometricContext geometry;\ngeometry.position \x3d - vViewPosition;\ngeometry.normal \x3d normal;\ngeometry.viewDir \x3d normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight \x3d pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *\x3d all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight \x3d spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *\x3d all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight \x3d directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *\x3d all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance \x3d getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance \x3d texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *\x3d PI;\n\t\t#endif\n\t\tirradiance +\x3d lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS \x3e 0 )\n\t\tfor ( int i \x3d 0; i \x3c NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) \x26\x26 defined( PHYSICAL ) \x26\x26 defined( ENVMAP_TYPE_CUBE_UV )\n\t \tirradiance +\x3d getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) \x26\x26 defined( RE_IndirectSpecular )\n\tvec3 radiance \x3d getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n";
THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) \x26\x26 defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT \x3d log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";
THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z \x3d log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth \x3d 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z \x3d (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n";THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n\tvec4 texelColor \x3d texture2D( map, vUv );\n\ttexelColor \x3d mapTexelToLinear( texelColor );\n\tdiffuseColor *\x3d texelColor;\n#endif\n";THREE.ShaderChunk.map_pars_fragment=
"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\tvec4 mapTexel \x3d texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *\x3d mapTexelToLinear( mapTexel );\n#endif\n";THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n";THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor \x3d metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness \x3d texture2D( metalnessMap, vUv );\n\tmetalnessFactor *\x3d texelMetalness.r;\n#endif\n";
THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal +\x3d ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal +\x3d ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal +\x3d ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal +\x3d ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";THREE.ShaderChunk.morphtarget_pars_vertex=
"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed +\x3d ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed +\x3d ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed +\x3d ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed +\x3d ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed +\x3d ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed +\x3d ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed +\x3d ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed +\x3d ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";
THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\n\tvec3 fdx \x3d vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy \x3d vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal \x3d normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal \x3d normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal \x3d normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal \x3d perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal \x3d perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";
THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 \x3d dFdx( eye_pos.xyz );\n\t\tvec3 q1 \x3d dFdy( eye_pos.xyz );\n\t\tvec2 st0 \x3d dFdx( vUv.st );\n\t\tvec2 st1 \x3d dFdy( vUv.st );\n\t\tvec3 S \x3d normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T \x3d normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N \x3d normalize( surf_norm );\n\t\tvec3 mapN \x3d texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy \x3d normalScale * mapN.xy;\n\t\tmat3 tsn \x3d mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";
THREE.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale \x3d 256. / 255.;const float UnpackDownscale \x3d 255. / 256.;\nconst vec3 PackFactors \x3d vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors \x3d UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 \x3d 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r \x3d vec4( fract( v * PackFactors ), v );\n\tr.yzw -\x3d r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";
THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *\x3d gl_FragColor.a;\n#endif\n";THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\n\tvec4 mvPosition \x3d modelViewMatrix * skinned;\n#else\n\tvec4 mvPosition \x3d modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position \x3d projectionMatrix * mvPosition;\n";THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor \x3d roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness \x3d texture2D( roughnessMap, vUv );\n\troughnessFactor *\x3d texelRoughness.r;\n#endif\n";
THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS \x3e 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS \x3e 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS \x3e 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset \x3d vec2( 0.0, 1.0 );\n\t\tvec2 texelSize \x3d vec2( 1.0 ) / size;\n\t\tvec2 centroidUV \x3d floor( uv * size + 0.5 ) / size;\n\t\tfloat lb \x3d texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt \x3d texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb \x3d texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt \x3d texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f \x3d fract( uv * size + 0.5 );\n\t\tfloat a \x3d mix( lb, lt, f.y );\n\t\tfloat b \x3d mix( rb, rt, f.y );\n\t\tfloat c \x3d mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tshadowCoord.xyz /\x3d shadowCoord.w;\n\t\tshadowCoord.z +\x3d shadowBias;\n\t\tbvec4 inFrustumVec \x3d bvec4 ( shadowCoord.x \x3e\x3d 0.0, shadowCoord.x \x3c\x3d 1.0, shadowCoord.y \x3e\x3d 0.0, shadowCoord.y \x3c\x3d 1.0 );\n\t\tbool inFrustum \x3d all( inFrustumVec );\n\t\tbvec2 frustumTestVec \x3d bvec2( inFrustum, shadowCoord.z \x3c\x3d 1.0 );\n\t\tbool frustumTest \x3d all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize \x3d vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 \x3d - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 \x3d - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 \x3d + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 \x3d + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize \x3d vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 \x3d - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 \x3d - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 \x3d + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 \x3d + texelSize.y * shadowRadius;\n\t\t\treturn (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn 1.0;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV \x3d abs( v );\n\t\tfloat scaleToCube \x3d 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *\x3d scaleToCube;\n\t\tv *\x3d scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar \x3d v.xy;\n\t\tfloat almostATexel \x3d 1.5 * texelSizeY;\n\t\tfloat almostOne \x3d 1.0 - almostATexel;\n\t\tif ( absV.z \x3e\x3d almostOne ) {\n\t\t\tif ( v.z \x3e 0.0 )\n\t\t\t\tplanar.x \x3d 4.0 - v.x;\n\t\t} else if ( absV.x \x3e\x3d almostOne ) {\n\t\t\tfloat signX \x3d sign( v.x );\n\t\t\tplanar.x \x3d v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y \x3e\x3d almostOne ) {\n\t\t\tfloat signY \x3d sign( v.y );\n\t\t\tplanar.x \x3d v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y \x3d v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tvec2 texelSize \x3d vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition \x3d shadowCoord.xyz;\n\t\tvec3 bd3D \x3d normalize( lightToPosition );\n\t\tfloat dp \x3d ( length( lightToPosition ) - shadowBias ) / 1000.0;\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset \x3d vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";
THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS \x3e 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS \x3e 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS \x3e 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";
THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] \x3d directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] \x3d spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS \x3e 0\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] \x3d pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";
THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow \x3d 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS \x3e 0\n\tDirectionalLight directionalLight;\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight \x3d directionalLights[ i ];\n\t\tshadow *\x3d bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS \x3e 0\n\tSpotLight spotLight;\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight \x3d spotLights[ i ];\n\t\tshadow *\x3d bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS \x3e 0\n\tPointLight pointLight;\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight \x3d pointLights[ i ];\n\t\tshadow *\x3d bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";
THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX \x3d getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY \x3d getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ \x3d getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW \x3d getBoneMatrix( skinIndex.w );\n#endif";THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j \x3d i * 4.0;\n\t\t\tfloat x \x3d mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y \x3d floor( j / float( boneTextureWidth ) );\n\t\t\tfloat dx \x3d 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy \x3d 1.0 / float( boneTextureHeight );\n\t\t\ty \x3d dy * ( y + 0.5 );\n\t\t\tvec4 v1 \x3d texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 \x3d texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 \x3d texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 \x3d texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone \x3d mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone \x3d boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";
THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex \x3d bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned \x3d vec4( 0.0 );\n\tskinned +\x3d boneMatX * skinVertex * skinWeight.x;\n\tskinned +\x3d boneMatY * skinVertex * skinWeight.y;\n\tskinned +\x3d boneMatZ * skinVertex * skinWeight.z;\n\tskinned +\x3d boneMatW * skinVertex * skinWeight.w;\n\tskinned  \x3d bindMatrixInverse * skinned;\n#endif\n";THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix \x3d mat4( 0.0 );\n\tskinMatrix +\x3d skinWeight.x * boneMatX;\n\tskinMatrix +\x3d skinWeight.y * boneMatY;\n\tskinMatrix +\x3d skinWeight.z * boneMatZ;\n\tskinMatrix +\x3d skinWeight.w * boneMatW;\n\tskinMatrix  \x3d bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal \x3d vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";
THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular \x3d texture2D( specularMap, vUv );\n\tspecularStrength \x3d texelSpecular.r;\n#else\n\tspecularStrength \x3d 1.0;\n#endif";THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb \x3d toneMapping( gl_FragColor.rgb );\n#endif\n";THREE.ShaderChunk.tonemapping_pars_fragment=
"#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *\x3d toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *\x3d toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *\x3d toneMappingExposure;\n  color \x3d max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";
THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 \x3d uv2;\n#endif";THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n";THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv \x3d uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";
THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\t#ifdef USE_SKINNING\n\t\tvec4 worldPosition \x3d modelMatrix * skinned;\n\t#else\n\t\tvec4 worldPosition \x3d modelMatrix * vec4( transformed, 1.0 );\n\t#endif\n#endif\n";THREE.UniformsUtils={merge:function(uniforms){for(var merged={},u=0;u<uniforms.length;u++){var tmp=this.clone(uniforms[u]),p;for(p in tmp)merged[p]=tmp[p]}return merged},clone:function(uniforms_src){var uniforms_dst=
{},u;for(u in uniforms_src){uniforms_dst[u]={};for(var p in uniforms_src[u]){var parameter_src=uniforms_src[u][p];parameter_src instanceof THREE.Color||parameter_src instanceof THREE.Vector2||parameter_src instanceof THREE.Vector3||parameter_src instanceof THREE.Vector4||parameter_src instanceof THREE.Matrix3||parameter_src instanceof THREE.Matrix4||parameter_src instanceof THREE.Texture?uniforms_dst[u][p]=parameter_src.clone():Array.isArray(parameter_src)?uniforms_dst[u][p]=parameter_src.slice():
uniforms_dst[u][p]=parameter_src}}return uniforms_dst}};THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"1f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"1f",value:-1},reflectivity:{type:"1f",value:1},refractionRatio:{type:"1f",value:.98}},aomap:{aoMap:{type:"t",value:null},aoMapIntensity:{type:"1f",
value:1}},lightmap:{lightMap:{type:"t",value:null},lightMapIntensity:{type:"1f",value:1}},emissivemap:{emissiveMap:{type:"t",value:null}},bumpmap:{bumpMap:{type:"t",value:null},bumpScale:{type:"1f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{type:"t",value:null},displacementScale:{type:"1f",value:1},displacementBias:{type:"1f",value:0}},roughnessmap:{roughnessMap:{type:"t",value:null}},metalnessmap:{metalnessMap:{type:"t",
value:null}},fog:{fogDensity:{type:"1f",value:2.5E-4},fogNear:{type:"1f",value:1},fogFar:{type:"1f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"3fv",value:[]},directionalLights:{type:"sa",value:[],properties:{direction:{type:"v3"},color:{type:"c"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},shadowMapSize:{type:"v2"}}},directionalShadowMap:{type:"tv",value:[]},directionalShadowMatrix:{type:"m4v",value:[]},spotLights:{type:"sa",
value:[],properties:{color:{type:"c"},position:{type:"v3"},direction:{type:"v3"},distance:{type:"1f"},coneCos:{type:"1f"},penumbraCos:{type:"1f"},decay:{type:"1f"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},shadowMapSize:{type:"v2"}}},spotShadowMap:{type:"tv",value:[]},spotShadowMatrix:{type:"m4v",value:[]},pointLights:{type:"sa",value:[],properties:{color:{type:"c"},position:{type:"v3"},decay:{type:"1f"},distance:{type:"1f"},shadow:{type:"1i"},shadowBias:{type:"1f"},shadowRadius:{type:"1f"},
shadowMapSize:{type:"v2"}}},pointShadowMap:{type:"tv",value:[]},pointShadowMatrix:{type:"m4v",value:[]},hemisphereLights:{type:"sa",value:[],properties:{direction:{type:"v3"},skyColor:{type:"c"},groundColor:{type:"c"}}}},points:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"1f",value:1},size:{type:"1f",value:1},scale:{type:"1f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)}}};THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tgl_FragColor \x3d textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\t#include \x3clogdepthbuf_fragment\x3e\n}\n";
THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\tvWorldPosition \x3d transformDirection( position, modelMatrix );\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n}\n";THREE.ShaderChunk.depth_frag="#if DEPTH_PACKING \x3d\x3d 3200\n\tuniform float opacity;\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( 1.0 );\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\t\tdiffuseColor.a \x3d opacity;\n\t#endif\n\t#include \x3cmap_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\t\tgl_FragColor \x3d vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING \x3d\x3d 3201\n\t\tgl_FragColor \x3d packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";
THREE.ShaderChunk.depth_vert="#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n}\n";
THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main () {\n\t#include \x3cclipping_planes_fragment\x3e\n\tgl_FragColor \x3d packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvWorldPosition \x3d worldPosition;\n}\n";
THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec3 direction \x3d normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y \x3d saturate( tFlip * direction.y * -0.5 + 0.5 );\n\tsampleUV.x \x3d atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor \x3d texture2D( tEquirect, sampleUV );\n\t#include \x3clogdepthbuf_fragment\x3e\n}\n";
THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\tvWorldPosition \x3d transformDirection( position, modelMatrix );\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n}\n";THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tif ( mod( vLineDistance, totalSize ) \x3e dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight \x3d vec3( 0.0 );\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\toutgoingLight \x3d diffuseColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3ccolor_vertex\x3e\n\tvLineDistance \x3d scale * lineDistance;\n\tvec4 mvPosition \x3d modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position \x3d projectionMatrix * mvPosition;\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n}\n";
THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\tReflectedLight reflectedLight;\n\treflectedLight.directDiffuse \x3d vec3( 0.0 );\n\treflectedLight.directSpecular \x3d vec3( 0.0 );\n\treflectedLight.indirectDiffuse \x3d diffuseColor.rgb;\n\treflectedLight.indirectSpecular \x3d vec3( 0.0 );\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.indirectDiffuse;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.meshbasic_vert="#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#ifdef USE_ENVMAP\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n}\n";
THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cshadowmask_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\treflectedLight.indirectDiffuse \x3d getAmbientLightIrradiance( ambientLightColor );\n\t#include \x3clightmap_fragment\x3e\n\treflectedLight.indirectDiffuse *\x3d BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse \x3d ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse \x3d vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *\x3d BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n\t#include \x3clights_lambert_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n}\n";
THREE.ShaderChunk.meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars\x3e\n#include \x3clights_phong_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\t#include \x3cnormal_fragment\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#include \x3clights_phong_fragment\x3e\n\t#include \x3clights_template\x3e\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n}\n";
THREE.ShaderChunk.meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3ccube_uv_reflection_fragment\x3e\n#include \x3clights_pars\x3e\n#include \x3clights_physical_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3croughnessmap_pars_fragment\x3e\n#include \x3cmetalnessmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\t#include \x3croughnessmap_fragment\x3e\n\t#include \x3cmetalnessmap_fragment\x3e\n\t#include \x3cnormal_fragment\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#include \x3clights_physical_fragment\x3e\n\t#include \x3clights_template\x3e\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n}\n";
THREE.ShaderChunk.normal_frag="uniform float opacity;\nvarying vec3 vNormal;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tgl_FragColor \x3d vec4( packNormalToRGB( vNormal ), opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n}\n";THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\n#include \x3ccommon\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\tvNormal \x3d normalize( normalMatrix * normal );\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n}\n";
THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cmap_particle_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec3 outgoingLight \x3d vec3( 0.0 );\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_particle_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\toutgoingLight \x3d diffuseColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}\n";
THREE.ShaderChunk.points_vert="uniform float size;\nuniform float scale;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize \x3d size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize \x3d size;\n\t#endif\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n}\n";
THREE.ShaderChunk.shadow_frag="uniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cshadowmask_pars_fragment\x3e\nvoid main() {\n\tgl_FragColor \x3d vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";THREE.ShaderChunk.shadow_vert="#include \x3cshadowmap_pars_vertex\x3e\nvoid main() {\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n}\n";
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,
fragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},shininess:{type:"1f",value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,
fragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{type:"c",value:new THREE.Color(0)},roughness:{type:"1f",value:.5},metalness:{type:"1f",value:0},
envMapIntensity:{type:"1f",value:1}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"1f",value:1},dashSize:{type:"1f",value:1},totalSize:{type:"1f",value:2}}]),
vertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.displacementmap]),vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{type:"1f",value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"1f",value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,
fragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"1f",value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{type:"v3",value:new THREE.Vector3}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}};THREE.ShaderLib.physical={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms,{}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,
fragmentShader:THREE.ShaderChunk.meshphysical_frag};THREE.WebGLRenderer=function(parameters$jscomp$0){function glClearColor(r,g,b,a){!0===_premultipliedAlpha&&(r*=a,g*=a,b*=a);state.clearColor(r,g,b,a)}function setDefaultGLState(){state.init();state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));glClearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha)}function resetGLState(){_currentCamera=
_currentProgram=null;_currentGeometryProgram="";_currentMaterialId=-1;state.reset()}function onContextLost(event){event.preventDefault();resetGLState();setDefaultGLState();properties.clear()}function onTextureDispose(event){event=event.target;event.removeEventListener("dispose",onTextureDispose);a:{var textureProperties=properties.get(event);if(event.image&&textureProperties.__image__webglTextureCube)_gl.deleteTexture(textureProperties.__image__webglTextureCube);else{if(void 0===textureProperties.__webglInit)break a;
_gl.deleteTexture(textureProperties.__webglTexture)}properties.delete(event)}_infoMemory.textures--}function onRenderTargetDispose(event){event=event.target;event.removeEventListener("dispose",onRenderTargetDispose);var renderTargetProperties=properties.get(event),textureProperties=properties.get(event.texture);if(event){void 0!==textureProperties.__webglTexture&&_gl.deleteTexture(textureProperties.__webglTexture);event.depthTexture&&event.depthTexture.dispose();if(event instanceof THREE.WebGLRenderTargetCube)for(textureProperties=
0;6>textureProperties;textureProperties++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[textureProperties]),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[textureProperties]);else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);properties.delete(event.texture);properties.delete(event)}_infoMemory.textures--}
function onMaterialDispose(event){event=event.target;event.removeEventListener("dispose",onMaterialDispose);releaseMaterialProgramReference(event);properties.delete(event)}function releaseMaterialProgramReference(material){var programInfo=properties.get(material).program;material.program=void 0;void 0!==programInfo&&programCache.releaseProgram(programInfo)}function absNumericalSort(a,b){return Math.abs(b[0])-Math.abs(a[0])}function painterSortStable(a,b){return a.object.renderOrder!==b.object.renderOrder?
a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function reversePainterSortStable(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function pushRenderItem(object,geometry,material,z,group){if(material.transparent){z=transparentObjects;var index=++transparentObjectsLastIndex}else z=opaqueObjects,index=++opaqueObjectsLastIndex;index=z[index];void 0!==
index?(index.id=object.id,index.object=object,index.geometry=geometry,index.material=material,index.z=_vector3.z,index.group=group):(index={id:object.id,object:object,geometry:geometry,material:material,z:_vector3.z,group:group},z.push(index))}function isSphereViewable(sphere){if(!_frustum.intersectsSphere(sphere))return!1;var numPlanes=_clipping.numPlanes;if(0===numPlanes)return!0;var planes=_this.clippingPlanes,center=sphere.center;sphere=-sphere.radius;var i=0;do if(planes[i].distanceToPoint(center)<
sphere)return!1;while(++i!==numPlanes);return!0}function projectObject(object,camera){if(!1!==object.visible){if(object.layers.test(camera.layers))if(object instanceof THREE.Light)lights.push(object);else if(object instanceof THREE.Sprite){var JSCompiler_temp;(JSCompiler_temp=!1===object.frustumCulled)||(_sphere.center.set(0,0,0),_sphere.radius=.7071067811865476,_sphere.applyMatrix4(object.matrixWorld),JSCompiler_temp=!0===isSphereViewable(_sphere));JSCompiler_temp&&sprites.push(object)}else if(object instanceof
THREE.LensFlare)lensFlares.push(object);else if(object instanceof THREE.ImmediateRenderObject)!0===_this.sortObjects&&(_vector3.setFromMatrixPosition(object.matrixWorld),_vector3.applyProjection(_projScreenMatrix)),pushRenderItem(object,null,object.material,_vector3.z,null);else if(object instanceof THREE.Mesh||object instanceof THREE.Line||object instanceof THREE.Points)if(object instanceof THREE.SkinnedMesh&&object.skeleton.update(),(JSCompiler_temp=!1===object.frustumCulled)||(JSCompiler_temp=
object.geometry,null===JSCompiler_temp.boundingSphere&&JSCompiler_temp.computeBoundingSphere(),_sphere.copy(JSCompiler_temp.boundingSphere).applyMatrix4(object.matrixWorld),JSCompiler_temp=!0===isSphereViewable(_sphere)),JSCompiler_temp){var material=object.material;if(!0===material.visible)if(!0===_this.sortObjects&&(_vector3.setFromMatrixPosition(object.matrixWorld),_vector3.applyProjection(_projScreenMatrix)),JSCompiler_temp=objects.update(object),material instanceof THREE.MultiMaterial){var groups=
JSCompiler_temp.groups,materials=material.materials;material=0;for(var l=groups.length;material<l;material++){var group=groups[material],groupMaterial=materials[group.materialIndex];!0===groupMaterial.visible&&pushRenderItem(object,JSCompiler_temp,groupMaterial,_vector3.z,group)}}else pushRenderItem(object,JSCompiler_temp,material,_vector3.z,null)}object=object.children;material=0;for(l=object.length;material<l;material++)projectObject(object[material],camera)}}function renderObjects(renderList,camera,
fog,overrideMaterial){for(var i=0,l=renderList.length;i<l;i++){var renderItem=renderList[i],object$jscomp$0=renderItem.object,geometry=renderItem.geometry,material=void 0===overrideMaterial?renderItem.material:overrideMaterial;renderItem=renderItem.group;object$jscomp$0.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object$jscomp$0.matrixWorld);object$jscomp$0.normalMatrix.getNormalMatrix(object$jscomp$0.modelViewMatrix);if(object$jscomp$0 instanceof THREE.ImmediateRenderObject){setMaterial(material);
var program=setProgram(camera,fog,material,object$jscomp$0);_currentGeometryProgram="";object$jscomp$0.render(function(object){_this.renderBufferImmediate(object,program,material)})}else _this.renderBufferDirect(camera,fog,geometry,material,object$jscomp$0,renderItem)}}function setMaterial(material){material.side!==THREE.DoubleSide?state.enable(_gl.CULL_FACE):state.disable(_gl.CULL_FACE);state.setFlipSided(material.side===THREE.BackSide);!0===material.transparent?state.setBlending(material.blending,
material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha):state.setBlending(THREE.NoBlending);state.setDepthFunc(material.depthFunc);state.setDepthTest(material.depthTest);state.setDepthWrite(material.depthWrite);state.setColorWrite(material.colorWrite);state.setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits)}function setProgram(camera,fog,material,
object){_usedTextureUnits=0;var materialProperties=properties.get(material);_clippingEnabled&&((_localClippingEnabled||camera!==_currentCamera)&&_clipping.setState(material.clippingPlanes,material.clipShadows,camera,materialProperties,camera===_currentCamera&&material.id===_currentMaterialId),void 0!==materialProperties.numClippingPlanes&&materialProperties.numClippingPlanes!==_clipping.numPlanes&&(material.needsUpdate=!0));void 0===materialProperties.program&&(material.needsUpdate=!0);void 0!==materialProperties.lightsHash&&
materialProperties.lightsHash!==_lights.hash&&(material.needsUpdate=!0);if(material.needsUpdate){a:{var materialProperties$jscomp$0=properties.get(material),parameters=programCache.getParameters(material,_lights,fog,_clipping.numPlanes,object),code=programCache.getProgramCode(material,parameters),program=materialProperties$jscomp$0.program,programChange=!0;if(void 0===program)material.addEventListener("dispose",onMaterialDispose);else if(program.code!==code)releaseMaterialProgramReference(material);
else if(void 0!==parameters.shaderID)break a;else programChange=!1;programChange&&(parameters.shaderID?(program=THREE.ShaderLib[parameters.shaderID],materialProperties$jscomp$0.__webglShader={name:material.type,uniforms:THREE.UniformsUtils.clone(program.uniforms),vertexShader:program.vertexShader,fragmentShader:program.fragmentShader}):materialProperties$jscomp$0.__webglShader={name:material.type,uniforms:material.uniforms,vertexShader:material.vertexShader,fragmentShader:material.fragmentShader},
material.__webglShader=materialProperties$jscomp$0.__webglShader,program=programCache.acquireProgram(material,parameters,code),materialProperties$jscomp$0.program=program,material.program=program);parameters=program.getAttributes();if(material.morphTargets)for(code=material.numSupportedMorphTargets=0;code<_this.maxMorphTargets;code++)0<=parameters["morphTarget"+code]&&material.numSupportedMorphTargets++;if(material.morphNormals)for(code=material.numSupportedMorphNormals=0;code<_this.maxMorphNormals;code++)0<=
parameters["morphNormal"+code]&&material.numSupportedMorphNormals++;parameters=materialProperties$jscomp$0.__webglShader.uniforms;(material instanceof THREE.ShaderMaterial||material instanceof THREE.RawShaderMaterial)&&!0!==material.clipping||(materialProperties$jscomp$0.numClippingPlanes=_clipping.numPlanes,parameters.clippingPlanes=_clipping.uniform);material.lights&&(materialProperties$jscomp$0.lightsHash=_lights.hash,parameters.ambientLightColor.value=_lights.ambient,parameters.directionalLights.value=
_lights.directional,parameters.spotLights.value=_lights.spot,parameters.pointLights.value=_lights.point,parameters.hemisphereLights.value=_lights.hemi,parameters.directionalShadowMap.value=_lights.directionalShadowMap,parameters.directionalShadowMatrix.value=_lights.directionalShadowMatrix,parameters.spotShadowMap.value=_lights.spotShadowMap,parameters.spotShadowMatrix.value=_lights.spotShadowMatrix,parameters.pointShadowMap.value=_lights.pointShadowMap,parameters.pointShadowMatrix.value=_lights.pointShadowMatrix);
code=materialProperties$jscomp$0.program.getUniforms();code=THREE.WebGLUniforms.seqWithValue(code.seq,parameters);materialProperties$jscomp$0.uniformsList=code;materialProperties$jscomp$0.dynamicUniforms=THREE.WebGLUniforms.splitDynamic(code,parameters)}material.needsUpdate=!1}var refreshProgram=!1;programChange=program=!1;materialProperties$jscomp$0=materialProperties.program;code=materialProperties$jscomp$0.getUniforms();parameters=materialProperties.__webglShader.uniforms;materialProperties$jscomp$0.id!==
_currentProgram&&(_gl.useProgram(materialProperties$jscomp$0.program),_currentProgram=materialProperties$jscomp$0.id,programChange=program=refreshProgram=!0);material.id!==_currentMaterialId&&(_currentMaterialId=material.id,program=!0);if(refreshProgram||camera!==_currentCamera){code.set(_gl,camera,"projectionMatrix");capabilities.logarithmicDepthBuffer&&code.setValue(_gl,"logDepthBufFC",2/(Math.log(camera.far+1)/Math.LN2));camera!==_currentCamera&&(_currentCamera=camera,programChange=program=!0);
if(material instanceof THREE.ShaderMaterial||material instanceof THREE.MeshPhongMaterial||material instanceof THREE.MeshStandardMaterial||material.envMap)refreshProgram=code.map.cameraPosition,void 0!==refreshProgram&&refreshProgram.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld));(material instanceof THREE.MeshPhongMaterial||material instanceof THREE.MeshLambertMaterial||material instanceof THREE.MeshBasicMaterial||material instanceof THREE.MeshStandardMaterial||material instanceof
THREE.ShaderMaterial||material.skinning)&&code.setValue(_gl,"viewMatrix",camera.matrixWorldInverse);code.set(_gl,_this,"toneMappingExposure");code.set(_gl,_this,"toneMappingWhitePoint")}material.skinning&&(code.setOptional(_gl,object,"bindMatrix"),code.setOptional(_gl,object,"bindMatrixInverse"),refreshProgram=object.skeleton)&&(capabilities.floatVertexTextures&&refreshProgram.useVertexTexture?(code.set(_gl,refreshProgram,"boneTexture"),code.set(_gl,refreshProgram,"boneTextureWidth"),code.set(_gl,
refreshProgram,"boneTextureHeight")):code.setOptional(_gl,refreshProgram,"boneMatrices"));if(program){material.lights&&(program=programChange,parameters.ambientLightColor.needsUpdate=program,parameters.directionalLights.needsUpdate=program,parameters.pointLights.needsUpdate=program,parameters.spotLights.needsUpdate=program,parameters.hemisphereLights.needsUpdate=program);fog&&material.fog&&(parameters.fogColor.value=fog.color,fog instanceof THREE.Fog?(parameters.fogNear.value=fog.near,parameters.fogFar.value=
fog.far):fog instanceof THREE.FogExp2&&(parameters.fogDensity.value=fog.density));if(material instanceof THREE.MeshBasicMaterial||material instanceof THREE.MeshLambertMaterial||material instanceof THREE.MeshPhongMaterial||material instanceof THREE.MeshStandardMaterial||material instanceof THREE.MeshDepthMaterial){parameters.opacity.value=material.opacity;parameters.diffuse.value=material.color;material.emissive&&parameters.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
parameters.map.value=material.map;parameters.specularMap.value=material.specularMap;parameters.alphaMap.value=material.alphaMap;material.aoMap&&(parameters.aoMap.value=material.aoMap,parameters.aoMapIntensity.value=material.aoMapIntensity);if(material.map)var uvScaleMap=material.map;else material.specularMap?uvScaleMap=material.specularMap:material.displacementMap?uvScaleMap=material.displacementMap:material.normalMap?uvScaleMap=material.normalMap:material.bumpMap?uvScaleMap=material.bumpMap:material.roughnessMap?
uvScaleMap=material.roughnessMap:material.metalnessMap?uvScaleMap=material.metalnessMap:material.alphaMap?uvScaleMap=material.alphaMap:material.emissiveMap&&(uvScaleMap=material.emissiveMap);void 0!==uvScaleMap&&(uvScaleMap instanceof THREE.WebGLRenderTarget&&(uvScaleMap=uvScaleMap.texture),fog=uvScaleMap.offset,uvScaleMap=uvScaleMap.repeat,parameters.offsetRepeat.value.set(fog.x,fog.y,uvScaleMap.x,uvScaleMap.y));parameters.envMap.value=material.envMap;parameters.flipEnvMap.value=material.envMap instanceof
THREE.CubeTexture?-1:1;parameters.reflectivity.value=material.reflectivity;parameters.refractionRatio.value=material.refractionRatio}material instanceof THREE.LineBasicMaterial?(parameters.diffuse.value=material.color,parameters.opacity.value=material.opacity):material instanceof THREE.LineDashedMaterial?(parameters.diffuse.value=material.color,parameters.opacity.value=material.opacity,parameters.dashSize.value=material.dashSize,parameters.totalSize.value=material.dashSize+material.gapSize,parameters.scale.value=
material.scale):material instanceof THREE.PointsMaterial?(parameters.diffuse.value=material.color,parameters.opacity.value=material.opacity,parameters.size.value=material.size*_pixelRatio,parameters.scale.value=.5*_canvas.clientHeight,parameters.map.value=material.map,null!==material.map&&(uvScaleMap=material.map.offset,material=material.map.repeat,parameters.offsetRepeat.value.set(uvScaleMap.x,uvScaleMap.y,material.x,material.y))):material instanceof THREE.MeshLambertMaterial?(material.lightMap&&
(parameters.lightMap.value=material.lightMap,parameters.lightMapIntensity.value=material.lightMapIntensity),material.emissiveMap&&(parameters.emissiveMap.value=material.emissiveMap)):material instanceof THREE.MeshPhongMaterial?(parameters.specular.value=material.specular,parameters.shininess.value=Math.max(material.shininess,1E-4),material.lightMap&&(parameters.lightMap.value=material.lightMap,parameters.lightMapIntensity.value=material.lightMapIntensity),material.emissiveMap&&(parameters.emissiveMap.value=
material.emissiveMap),material.bumpMap&&(parameters.bumpMap.value=material.bumpMap,parameters.bumpScale.value=material.bumpScale),material.normalMap&&(parameters.normalMap.value=material.normalMap,parameters.normalScale.value.copy(material.normalScale)),material.displacementMap&&(parameters.displacementMap.value=material.displacementMap,parameters.displacementScale.value=material.displacementScale,parameters.displacementBias.value=material.displacementBias)):material instanceof THREE.MeshPhysicalMaterial?
refreshUniformsStandard(parameters,material):material instanceof THREE.MeshStandardMaterial?refreshUniformsStandard(parameters,material):material instanceof THREE.MeshDepthMaterial?material.displacementMap&&(parameters.displacementMap.value=material.displacementMap,parameters.displacementScale.value=material.displacementScale,parameters.displacementBias.value=material.displacementBias):material instanceof THREE.MeshNormalMaterial&&(parameters.opacity.value=material.opacity);THREE.WebGLUniforms.upload(_gl,
materialProperties.uniformsList,parameters,_this)}code.set(_gl,object,"modelViewMatrix");code.set(_gl,object,"normalMatrix");code.setValue(_gl,"modelMatrix",object.matrixWorld);materialProperties=materialProperties.dynamicUniforms;null!==materialProperties&&(THREE.WebGLUniforms.evalDynamic(materialProperties,parameters,object,camera),THREE.WebGLUniforms.upload(_gl,materialProperties,parameters,_this));return materialProperties$jscomp$0}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=
material.roughness;uniforms.metalness.value=material.metalness;material.roughnessMap&&(uniforms.roughnessMap.value=material.roughnessMap);material.metalnessMap&&(uniforms.metalnessMap.value=material.metalnessMap);material.lightMap&&(uniforms.lightMap.value=material.lightMap,uniforms.lightMapIntensity.value=material.lightMapIntensity);material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap);material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale);
material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale));material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias);material.envMap&&(uniforms.envMapIntensity.value=material.envMapIntensity)}function setTextureParameters(textureType,texture,isPowerOfTwoImage){isPowerOfTwoImage?(_gl.texParameteri(textureType,
_gl.TEXTURE_WRAP_S,paramThreeToGL(texture.wrapS)),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,paramThreeToGL(texture.wrapT)),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,paramThreeToGL(texture.magFilter)),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,paramThreeToGL(texture.minFilter))):(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,_gl.CLAMP_TO_EDGE),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,_gl.CLAMP_TO_EDGE),texture.wrapS===THREE.ClampToEdgeWrapping&&texture.wrapT===
THREE.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",texture),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterFallback(texture.magFilter)),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterFallback(texture.minFilter)),texture.minFilter!==THREE.NearestFilter&&texture.minFilter!==THREE.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",
texture));!(isPowerOfTwoImage=extensions.get("EXT_texture_filter_anisotropic"))||texture.type===THREE.FloatType&&null===extensions.get("OES_texture_float_linear")||texture.type===THREE.HalfFloatType&&null===extensions.get("OES_texture_half_float_linear")||!(1<texture.anisotropy||properties.get(texture).__currentAnisotropy)||(_gl.texParameterf(textureType,isPowerOfTwoImage.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,_this.getMaxAnisotropy())),properties.get(texture).__currentAnisotropy=
texture.anisotropy)}function clampToMaxSize(image,maxSize){if(image.width>maxSize||image.height>maxSize){maxSize/=Math.max(image.width,image.height);var canvas=document.createElement("canvas");canvas.width=Math.floor(image.width*maxSize);canvas.height=Math.floor(image.height*maxSize);canvas.getContext("2d").drawImage(image,0,0,image.width,image.height,0,0,canvas.width,canvas.height);console.warn("THREE.WebGLRenderer: image is too big ("+image.width+"x"+image.height+"). Resized to "+canvas.width+"x"+
canvas.height,image);return canvas}return image}function isPowerOfTwo(image){return THREE.Math.isPowerOfTwo(image.width)&&THREE.Math.isPowerOfTwo(image.height)}function setupFrameBufferTexture(framebuffer,renderTarget,attachment,textureTarget){var glFormat=paramThreeToGL(renderTarget.texture.format),glType=paramThreeToGL(renderTarget.texture.type);state.texImage2D(textureTarget,0,glFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null);_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer);
_gl.framebufferTexture2D(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(renderTarget.texture).__webglTexture,0);_gl.bindFramebuffer(_gl.FRAMEBUFFER,null)}function setupRenderBufferStorage(renderbuffer,renderTarget){_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderbuffer);renderTarget.depthBuffer&&!renderTarget.stencilBuffer?(_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_COMPONENT16,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.RENDERBUFFER,
renderbuffer)):renderTarget.depthBuffer&&renderTarget.stencilBuffer?(_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_STENCIL,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer)):_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.RGBA4,renderTarget.width,renderTarget.height);_gl.bindRenderbuffer(_gl.RENDERBUFFER,null)}function filterFallback(f){return f===THREE.NearestFilter||f===THREE.NearestMipMapNearestFilter||
f===THREE.NearestMipMapLinearFilter?_gl.NEAREST:_gl.LINEAR}function paramThreeToGL(p){if(p===THREE.RepeatWrapping)return _gl.REPEAT;if(p===THREE.ClampToEdgeWrapping)return _gl.CLAMP_TO_EDGE;if(p===THREE.MirroredRepeatWrapping)return _gl.MIRRORED_REPEAT;if(p===THREE.NearestFilter)return _gl.NEAREST;if(p===THREE.NearestMipMapNearestFilter)return _gl.NEAREST_MIPMAP_NEAREST;if(p===THREE.NearestMipMapLinearFilter)return _gl.NEAREST_MIPMAP_LINEAR;if(p===THREE.LinearFilter)return _gl.LINEAR;if(p===THREE.LinearMipMapNearestFilter)return _gl.LINEAR_MIPMAP_NEAREST;
if(p===THREE.LinearMipMapLinearFilter)return _gl.LINEAR_MIPMAP_LINEAR;if(p===THREE.UnsignedByteType)return _gl.UNSIGNED_BYTE;if(p===THREE.UnsignedShort4444Type)return _gl.UNSIGNED_SHORT_4_4_4_4;if(p===THREE.UnsignedShort5551Type)return _gl.UNSIGNED_SHORT_5_5_5_1;if(p===THREE.UnsignedShort565Type)return _gl.UNSIGNED_SHORT_5_6_5;if(p===THREE.ByteType)return _gl.BYTE;if(p===THREE.ShortType)return _gl.SHORT;if(p===THREE.UnsignedShortType)return _gl.UNSIGNED_SHORT;if(p===THREE.IntType)return _gl.INT;if(p===
THREE.UnsignedIntType)return _gl.UNSIGNED_INT;if(p===THREE.FloatType)return _gl.FLOAT;var extension=extensions.get("OES_texture_half_float");if(null!==extension&&p===THREE.HalfFloatType)return extension.HALF_FLOAT_OES;if(p===THREE.AlphaFormat)return _gl.ALPHA;if(p===THREE.RGBFormat)return _gl.RGB;if(p===THREE.RGBAFormat)return _gl.RGBA;if(p===THREE.LuminanceFormat)return _gl.LUMINANCE;if(p===THREE.LuminanceAlphaFormat)return _gl.LUMINANCE_ALPHA;if(p===THREE.DepthFormat)return _gl.DEPTH_COMPONENT;
if(p===THREE.AddEquation)return _gl.FUNC_ADD;if(p===THREE.SubtractEquation)return _gl.FUNC_SUBTRACT;if(p===THREE.ReverseSubtractEquation)return _gl.FUNC_REVERSE_SUBTRACT;if(p===THREE.ZeroFactor)return _gl.ZERO;if(p===THREE.OneFactor)return _gl.ONE;if(p===THREE.SrcColorFactor)return _gl.SRC_COLOR;if(p===THREE.OneMinusSrcColorFactor)return _gl.ONE_MINUS_SRC_COLOR;if(p===THREE.SrcAlphaFactor)return _gl.SRC_ALPHA;if(p===THREE.OneMinusSrcAlphaFactor)return _gl.ONE_MINUS_SRC_ALPHA;if(p===THREE.DstAlphaFactor)return _gl.DST_ALPHA;
if(p===THREE.OneMinusDstAlphaFactor)return _gl.ONE_MINUS_DST_ALPHA;if(p===THREE.DstColorFactor)return _gl.DST_COLOR;if(p===THREE.OneMinusDstColorFactor)return _gl.ONE_MINUS_DST_COLOR;if(p===THREE.SrcAlphaSaturateFactor)return _gl.SRC_ALPHA_SATURATE;extension=extensions.get("WEBGL_compressed_texture_s3tc");if(null!==extension){if(p===THREE.RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===THREE.RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===THREE.RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
if(p===THREE.RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT}extension=extensions.get("WEBGL_compressed_texture_pvrtc");if(null!==extension){if(p===THREE.RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===THREE.RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===THREE.RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===THREE.RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}extension=
extensions.get("WEBGL_compressed_texture_etc1");if(null!==extension&&p===THREE.RGB_ETC1_Format)return extension.COMPRESSED_RGB_ETC1_WEBGL;extension=extensions.get("EXT_blend_minmax");if(null!==extension){if(p===THREE.MinEquation)return extension.MIN_EXT;if(p===THREE.MaxEquation)return extension.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);parameters$jscomp$0=parameters$jscomp$0||{};var _canvas=void 0!==parameters$jscomp$0.canvas?parameters$jscomp$0.canvas:document.createElement("canvas"),
_context=void 0!==parameters$jscomp$0.context?parameters$jscomp$0.context:null,_alpha=void 0!==parameters$jscomp$0.alpha?parameters$jscomp$0.alpha:!1,_depth=void 0!==parameters$jscomp$0.depth?parameters$jscomp$0.depth:!0,_stencil=void 0!==parameters$jscomp$0.stencil?parameters$jscomp$0.stencil:!0,_antialias=void 0!==parameters$jscomp$0.antialias?parameters$jscomp$0.antialias:!1,_premultipliedAlpha=void 0!==parameters$jscomp$0.premultipliedAlpha?parameters$jscomp$0.premultipliedAlpha:!0,_preserveDrawingBuffer=
void 0!==parameters$jscomp$0.preserveDrawingBuffer?parameters$jscomp$0.preserveDrawingBuffer:!1,lights=[],opaqueObjects=[],opaqueObjectsLastIndex=-1,transparentObjects=[],transparentObjectsLastIndex=-1,morphInfluences=new Float32Array(8),sprites=[],lensFlares=[];this.domElement=_canvas;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=
this.gammaOutput=this.gammaInput=!1;this.toneMapping=THREE.LinearToneMapping;this.toneMappingWhitePoint=this.toneMappingExposure=1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;var _this=this,_currentProgram=null,_currentRenderTarget=null,_currentFramebuffer=null,_currentMaterialId=-1,_currentGeometryProgram="",_currentCamera=null,_currentScissor=new THREE.Vector4,_currentScissorTest=null,_currentViewport=new THREE.Vector4,_usedTextureUnits=0,_clearColor=new THREE.Color(0),
_clearAlpha=0,_width=_canvas.width,_height=_canvas.height,_pixelRatio=1,_scissor=new THREE.Vector4(0,0,_width,_height),_scissorTest=!1,_viewport=new THREE.Vector4(0,0,_width,_height),_frustum=new THREE.Frustum,_clipping=new THREE.WebGLClipping,_clippingEnabled=!1,_localClippingEnabled=!1,_sphere=new THREE.Sphere,_projScreenMatrix=new THREE.Matrix4,_vector3=new THREE.Vector3,_lights={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],
spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},_infoMemory={geometries:0,textures:0},_infoRender={calls:0,vertices:0,faces:0,points:0};this.info={render:_infoRender,memory:_infoMemory,programs:null};try{_alpha={alpha:_alpha,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer};var _gl=_context||_canvas.getContext("webgl",_alpha)||_canvas.getContext("experimental-webgl",_alpha);
if(null===_gl){if(null!==_canvas.getContext("webgl"))throw"Error creating WebGL context with your selected attributes.";throw"Error creating WebGL context.";}void 0===_gl.getShaderPrecisionFormat&&(_gl.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});_canvas.addEventListener("webglcontextlost",onContextLost,!1)}catch(error){console.error("THREE.WebGLRenderer: "+error)}var _isWebGL2="undefined"!==typeof WebGL2RenderingContext&&_gl instanceof WebGL2RenderingContext,extensions=
new THREE.WebGLExtensions(_gl);extensions.get("WEBGL_depth_texture");extensions.get("OES_texture_float");extensions.get("OES_texture_float_linear");extensions.get("OES_texture_half_float");extensions.get("OES_texture_half_float_linear");extensions.get("OES_standard_derivatives");extensions.get("ANGLE_instanced_arrays");extensions.get("OES_element_index_uint")&&(THREE.BufferGeometry.MaxIndex=4294967296);var capabilities=new THREE.WebGLCapabilities(_gl,extensions,parameters$jscomp$0),state=new THREE.WebGLState(_gl,
extensions,paramThreeToGL),properties=new THREE.WebGLProperties,objects=new THREE.WebGLObjects(_gl,properties,this.info),programCache=new THREE.WebGLPrograms(this,capabilities),lightCache=new THREE.WebGLLights;this.info.programs=programCache.programs;var bufferRenderer=new THREE.WebGLBufferRenderer(_gl,extensions,_infoRender),indexedBufferRenderer=new THREE.WebGLIndexedBufferRenderer(_gl,extensions,_infoRender);setDefaultGLState();this.context=_gl;this.capabilities=capabilities;this.extensions=extensions;
this.properties=properties;this.state=state;var shadowMap=new THREE.WebGLShadowMap(this,_lights,objects);this.shadowMap=shadowMap;var spritePlugin=new THREE.SpritePlugin(this,sprites),lensFlarePlugin=new THREE.LensFlarePlugin(this,lensFlares);this.getContext=function(){return _gl};this.getContextAttributes=function(){return _gl.getContextAttributes()};this.forceContextLoss=function(){extensions.get("WEBGL_lose_context").loseContext()};this.getMaxAnisotropy=function(){var value;return function(){if(void 0!==
value)return value;var extension=extensions.get("EXT_texture_filter_anisotropic");return value=null!==extension?_gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}();this.getPrecision=function(){return capabilities.precision};this.getPixelRatio=function(){return _pixelRatio};this.setPixelRatio=function(value){void 0!==value&&(_pixelRatio=value,this.setSize(_viewport.z,_viewport.w,!1))};this.getSize=function(){return{width:_width,height:_height}};this.setSize=function(width,height,updateStyle){_width=
width;_height=height;_canvas.width=width*_pixelRatio;_canvas.height=height*_pixelRatio;!1!==updateStyle&&(_canvas.style.width=width+"px",_canvas.style.height=height+"px");this.setViewport(0,0,width,height)};this.setViewport=function(x,y,width,height){state.viewport(_viewport.set(x,y,width,height))};this.setScissor=function(x,y,width,height){state.scissor(_scissor.set(x,y,width,height))};this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean)};this.getClearColor=function(){return _clearColor};
this.setClearColor=function(color,alpha){_clearColor.set(color);_clearAlpha=void 0!==alpha?alpha:1;glClearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha)};this.getClearAlpha=function(){return _clearAlpha};this.setClearAlpha=function(alpha){_clearAlpha=alpha;glClearColor(_clearColor.r,_clearColor.g,_clearColor.b,_clearAlpha)};this.clear=function(color,depth,stencil){var bits=0;if(void 0===color||color)bits|=_gl.COLOR_BUFFER_BIT;if(void 0===depth||depth)bits|=_gl.DEPTH_BUFFER_BIT;if(void 0===
stencil||stencil)bits|=_gl.STENCIL_BUFFER_BIT;_gl.clear(bits)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,!0)};this.clearTarget=function(renderTarget,color,depth,stencil){this.setRenderTarget(renderTarget);this.clear(color,depth,stencil)};this.resetGLState=resetGLState;this.dispose=function(){_canvas.removeEventListener("webglcontextlost",onContextLost,!1)};this.renderBufferImmediate=function(object,
program,material){state.initAttributes();var buffers=properties.get(object);object.hasPositions&&!buffers.position&&(buffers.position=_gl.createBuffer());object.hasNormals&&!buffers.normal&&(buffers.normal=_gl.createBuffer());object.hasUvs&&!buffers.uv&&(buffers.uv=_gl.createBuffer());object.hasColors&&!buffers.color&&(buffers.color=_gl.createBuffer());program=program.getAttributes();object.hasPositions&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.position),_gl.bufferData(_gl.ARRAY_BUFFER,object.positionArray,
_gl.DYNAMIC_DRAW),state.enableAttribute(program.position),_gl.vertexAttribPointer(program.position,3,_gl.FLOAT,!1,0,0));if(object.hasNormals){_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.normal);if("MeshPhongMaterial"!==material.type&&"MeshStandardMaterial"!==material.type&&"MeshPhysicalMaterial"!==material.type&&material.shading===THREE.FlatShading)for(var i=0,l=3*object.count;i<l;i+=9){var array=object.normalArray,nx=(array[i+0]+array[i+3]+array[i+6])/3,ny=(array[i+1]+array[i+4]+array[i+7])/3,nz=(array[i+
2]+array[i+5]+array[i+8])/3;array[i+0]=nx;array[i+1]=ny;array[i+2]=nz;array[i+3]=nx;array[i+4]=ny;array[i+5]=nz;array[i+6]=nx;array[i+7]=ny;array[i+8]=nz}_gl.bufferData(_gl.ARRAY_BUFFER,object.normalArray,_gl.DYNAMIC_DRAW);state.enableAttribute(program.normal);_gl.vertexAttribPointer(program.normal,3,_gl.FLOAT,!1,0,0)}object.hasUvs&&material.map&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.uv),_gl.bufferData(_gl.ARRAY_BUFFER,object.uvArray,_gl.DYNAMIC_DRAW),state.enableAttribute(program.uv),_gl.vertexAttribPointer(program.uv,
2,_gl.FLOAT,!1,0,0));object.hasColors&&material.vertexColors!==THREE.NoColors&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.color),_gl.bufferData(_gl.ARRAY_BUFFER,object.colorArray,_gl.DYNAMIC_DRAW),state.enableAttribute(program.color),_gl.vertexAttribPointer(program.color,3,_gl.FLOAT,!1,0,0));state.disableUnusedAttributes();_gl.drawArrays(_gl.TRIANGLES,0,object.count);object.count=0};this.renderBufferDirect=function(camera,fog,geometry,material,object,group){setMaterial(material);var program=setProgram(camera,
fog,material,object),updateBuffers=!1;camera=geometry.id+"_"+program.id+"_"+material.wireframe;camera!==_currentGeometryProgram&&(_currentGeometryProgram=camera,updateBuffers=!0);fog=object.morphTargetInfluences;if(void 0!==fog){camera=[];var i=0;for(updateBuffers=fog.length;i<updateBuffers;i++){var influence=fog[i];camera.push([influence,i])}camera.sort(absNumericalSort);8<camera.length&&(camera.length=8);var morphAttributes=geometry.morphAttributes;i=0;for(updateBuffers=camera.length;i<updateBuffers;i++)influence=
camera[i],morphInfluences[i]=influence[0],0!==influence[0]?(fog=influence[1],!0===material.morphTargets&&morphAttributes.position&&geometry.addAttribute("morphTarget"+i,morphAttributes.position[fog]),!0===material.morphNormals&&morphAttributes.normal&&geometry.addAttribute("morphNormal"+i,morphAttributes.normal[fog])):(!0===material.morphTargets&&geometry.removeAttribute("morphTarget"+i),!0===material.morphNormals&&geometry.removeAttribute("morphNormal"+i));program.getUniforms().setValue(_gl,"morphTargetInfluences",
morphInfluences);updateBuffers=!0}fog=geometry.index;i=geometry.attributes.position;!0===material.wireframe&&(fog=objects.getWireframeAttribute(geometry));null!==fog?(camera=indexedBufferRenderer,camera.setIndex(fog)):camera=bufferRenderer;if(updateBuffers){a:{updateBuffers=void 0;if(geometry instanceof THREE.InstancedBufferGeometry){var extension=extensions.get("ANGLE_instanced_arrays");if(null===extension){console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
break a}}void 0===updateBuffers&&(updateBuffers=0);state.initAttributes();influence=geometry.attributes;program=program.getAttributes();morphAttributes=material.defaultAttributeValues;for(var name in program){var programAttribute=program[name];if(0<=programAttribute){var geometryAttribute=influence[name];if(void 0!==geometryAttribute){var type=_gl.FLOAT,array=geometryAttribute.array,normalized=geometryAttribute.normalized;array instanceof Float32Array?type=_gl.FLOAT:array instanceof Float64Array?
console.warn("Unsupported data buffer format: Float64Array"):array instanceof Uint16Array?type=_gl.UNSIGNED_SHORT:array instanceof Int16Array?type=_gl.SHORT:array instanceof Uint32Array?type=_gl.UNSIGNED_INT:array instanceof Int32Array?type=_gl.INT:array instanceof Int8Array?type=_gl.BYTE:array instanceof Uint8Array&&(type=_gl.UNSIGNED_BYTE);array=geometryAttribute.itemSize;var buffer=objects.getAttributeBuffer(geometryAttribute);if(geometryAttribute instanceof THREE.InterleavedBufferAttribute){var data=
geometryAttribute.data,stride=data.stride;geometryAttribute=geometryAttribute.offset;data instanceof THREE.InstancedInterleavedBuffer?(state.enableAttributeAndDivisor(programAttribute,data.meshPerAttribute,extension),void 0===geometry.maxInstancedCount&&(geometry.maxInstancedCount=data.meshPerAttribute*data.count)):state.enableAttribute(programAttribute);_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer);_gl.vertexAttribPointer(programAttribute,array,type,normalized,stride*data.array.BYTES_PER_ELEMENT,(updateBuffers*
stride+geometryAttribute)*data.array.BYTES_PER_ELEMENT)}else geometryAttribute instanceof THREE.InstancedBufferAttribute?(state.enableAttributeAndDivisor(programAttribute,geometryAttribute.meshPerAttribute,extension),void 0===geometry.maxInstancedCount&&(geometry.maxInstancedCount=geometryAttribute.meshPerAttribute*geometryAttribute.count)):state.enableAttribute(programAttribute),_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer),_gl.vertexAttribPointer(programAttribute,array,type,normalized,0,updateBuffers*
array*geometryAttribute.array.BYTES_PER_ELEMENT)}else if(void 0!==morphAttributes&&(type=morphAttributes[name],void 0!==type))switch(type.length){case 2:_gl.vertexAttrib2fv(programAttribute,type);break;case 3:_gl.vertexAttrib3fv(programAttribute,type);break;case 4:_gl.vertexAttrib4fv(programAttribute,type);break;default:_gl.vertexAttrib1fv(programAttribute,type)}}}state.disableUnusedAttributes()}null!==fog&&_gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER,objects.getAttributeBuffer(fog))}extension=Infinity;
null!==fog?extension=fog.count:void 0!==i&&(extension=i.count);fog=geometry.drawRange.start;i=null!==group?group.start:0;name=Math.max(0,fog,i);group=Math.max(0,Math.min(0+extension,fog+geometry.drawRange.count,i+(null!==group?group.count:Infinity))-1-name+1);if(object instanceof THREE.Mesh)if(!0===material.wireframe)state.setLineWidth(material.wireframeLinewidth*(null===_currentRenderTarget?_pixelRatio:1)),camera.setMode(_gl.LINES);else switch(object.drawMode){case THREE.TrianglesDrawMode:camera.setMode(_gl.TRIANGLES);
break;case THREE.TriangleStripDrawMode:camera.setMode(_gl.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:camera.setMode(_gl.TRIANGLE_FAN)}else object instanceof THREE.Line?(material=material.linewidth,void 0===material&&(material=1),state.setLineWidth(material*(null===_currentRenderTarget?_pixelRatio:1)),object instanceof THREE.LineSegments?camera.setMode(_gl.LINES):camera.setMode(_gl.LINE_STRIP)):object instanceof THREE.Points&&camera.setMode(_gl.POINTS);geometry instanceof THREE.InstancedBufferGeometry?
0<geometry.maxInstancedCount&&camera.renderInstances(geometry,name,group):camera.render(name,group)};this.render=function(scene,camera,renderTarget,forceClear){if(!1===camera instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var fog=scene.fog;_currentGeometryProgram="";_currentMaterialId=-1;_currentCamera=null;!0===scene.autoUpdate&&scene.updateMatrixWorld();null===camera.parent&&camera.updateMatrixWorld();camera.matrixWorldInverse.getInverse(camera.matrixWorld);
_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse);_frustum.setFromMatrix(_projScreenMatrix);lights.length=0;transparentObjectsLastIndex=opaqueObjectsLastIndex=-1;sprites.length=0;lensFlares.length=0;_localClippingEnabled=this.localClippingEnabled;_clippingEnabled=_clipping.init(this.clippingPlanes,_localClippingEnabled,camera);projectObject(scene,camera);opaqueObjects.length=opaqueObjectsLastIndex+1;transparentObjects.length=transparentObjectsLastIndex+1;!0===_this.sortObjects&&
(opaqueObjects.sort(painterSortStable),transparentObjects.sort(reversePainterSortStable));_clippingEnabled&&_clipping.beginShadows();for(var lights$jscomp$0=lights,lightShadowsLength=0,i=0,l=lights$jscomp$0.length;i<l;i++){var light=lights$jscomp$0[i];light.castShadow&&(_lights.shadows[lightShadowsLength++]=light)}_lights.shadows.length=lightShadowsLength;shadowMap.render(scene,camera);lights$jscomp$0=lights;var g=light=0,b=0,viewMatrix=camera.matrixWorldInverse,directionalLength=0,pointLength=0,
spotLength=0,hemiLength=0;lightShadowsLength=0;for(i=lights$jscomp$0.length;lightShadowsLength<i;lightShadowsLength++){l=lights$jscomp$0[lightShadowsLength];var color=l.color;var intensity=l.intensity;var distance=l.distance;var shadowMap$jscomp$0=l.shadow&&l.shadow.map?l.shadow.map.texture:null;if(l instanceof THREE.AmbientLight)light+=color.r*intensity,g+=color.g*intensity,b+=color.b*intensity;else if(l instanceof THREE.DirectionalLight){var uniforms=lightCache.get(l);uniforms.color.copy(l.color).multiplyScalar(l.intensity);
uniforms.direction.setFromMatrixPosition(l.matrixWorld);_vector3.setFromMatrixPosition(l.target.matrixWorld);uniforms.direction.sub(_vector3);uniforms.direction.transformDirection(viewMatrix);if(uniforms.shadow=l.castShadow)uniforms.shadowBias=l.shadow.bias,uniforms.shadowRadius=l.shadow.radius,uniforms.shadowMapSize=l.shadow.mapSize;_lights.directionalShadowMap[directionalLength]=shadowMap$jscomp$0;_lights.directionalShadowMatrix[directionalLength]=l.shadow.matrix;_lights.directional[directionalLength++]=
uniforms}else if(l instanceof THREE.SpotLight){uniforms=lightCache.get(l);uniforms.position.setFromMatrixPosition(l.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);uniforms.color.copy(color).multiplyScalar(intensity);uniforms.distance=distance;uniforms.direction.setFromMatrixPosition(l.matrixWorld);_vector3.setFromMatrixPosition(l.target.matrixWorld);uniforms.direction.sub(_vector3);uniforms.direction.transformDirection(viewMatrix);uniforms.coneCos=Math.cos(l.angle);uniforms.penumbraCos=Math.cos(l.angle*
(1-l.penumbra));uniforms.decay=0===l.distance?0:l.decay;if(uniforms.shadow=l.castShadow)uniforms.shadowBias=l.shadow.bias,uniforms.shadowRadius=l.shadow.radius,uniforms.shadowMapSize=l.shadow.mapSize;_lights.spotShadowMap[spotLength]=shadowMap$jscomp$0;_lights.spotShadowMatrix[spotLength]=l.shadow.matrix;_lights.spot[spotLength++]=uniforms}else if(l instanceof THREE.PointLight){uniforms=lightCache.get(l);uniforms.position.setFromMatrixPosition(l.matrixWorld);uniforms.position.applyMatrix4(viewMatrix);
uniforms.color.copy(l.color).multiplyScalar(l.intensity);uniforms.distance=l.distance;uniforms.decay=0===l.distance?0:l.decay;if(uniforms.shadow=l.castShadow)uniforms.shadowBias=l.shadow.bias,uniforms.shadowRadius=l.shadow.radius,uniforms.shadowMapSize=l.shadow.mapSize;_lights.pointShadowMap[pointLength]=shadowMap$jscomp$0;void 0===_lights.pointShadowMatrix[pointLength]&&(_lights.pointShadowMatrix[pointLength]=new THREE.Matrix4);_vector3.setFromMatrixPosition(l.matrixWorld).negate();_lights.pointShadowMatrix[pointLength].identity().setPosition(_vector3);
_lights.point[pointLength++]=uniforms}else l instanceof THREE.HemisphereLight&&(uniforms=lightCache.get(l),uniforms.direction.setFromMatrixPosition(l.matrixWorld),uniforms.direction.transformDirection(viewMatrix),uniforms.direction.normalize(),uniforms.skyColor.copy(l.color).multiplyScalar(intensity),uniforms.groundColor.copy(l.groundColor).multiplyScalar(intensity),_lights.hemi[hemiLength++]=uniforms)}_lights.ambient[0]=light;_lights.ambient[1]=g;_lights.ambient[2]=b;_lights.directional.length=directionalLength;
_lights.spot.length=spotLength;_lights.point.length=pointLength;_lights.hemi.length=hemiLength;_lights.hash=directionalLength+","+pointLength+","+spotLength+","+hemiLength+","+_lights.shadows.length;_clippingEnabled&&_clipping.endShadows();_infoRender.calls=0;_infoRender.vertices=0;_infoRender.faces=0;_infoRender.points=0;void 0===renderTarget&&(renderTarget=null);this.setRenderTarget(renderTarget);(this.autoClear||forceClear)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);
scene.overrideMaterial?(forceClear=scene.overrideMaterial,renderObjects(opaqueObjects,camera,fog,forceClear),renderObjects(transparentObjects,camera,fog,forceClear)):(state.setBlending(THREE.NoBlending),renderObjects(opaqueObjects,camera,fog),renderObjects(transparentObjects,camera,fog));spritePlugin.render(scene,camera);lensFlarePlugin.render(scene,camera,_currentViewport);renderTarget&&(scene=renderTarget.texture,scene.generateMipmaps&&isPowerOfTwo(renderTarget)&&scene.minFilter!==THREE.NearestFilter&&
scene.minFilter!==THREE.LinearFilter&&(scene=renderTarget instanceof THREE.WebGLRenderTargetCube?_gl.TEXTURE_CUBE_MAP:_gl.TEXTURE_2D,renderTarget=properties.get(renderTarget.texture).__webglTexture,state.bindTexture(scene,renderTarget),_gl.generateMipmap(scene),state.bindTexture(scene,null)));state.setDepthTest(!0);state.setDepthWrite(!0);state.setColorWrite(!0)}};this.setFaceCulling=function(cullFace,frontFaceDirection){state.setCullFace(cullFace);state.setFlipSided(frontFaceDirection===THREE.FrontFaceDirectionCW)};
this.allocTextureUnit=function(){var textureUnit=_usedTextureUnits;textureUnit>=capabilities.maxTextures&&console.warn("WebGLRenderer: trying to use "+textureUnit+" texture units while this GPU supports only "+capabilities.maxTextures);_usedTextureUnits+=1;return textureUnit};this.setTexture2D=function(){var warned=!1;return function(texture,slot){texture instanceof THREE.WebGLRenderTarget&&(warned||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),
warned=!0),texture=texture.texture);var textureProperties=properties.get(texture);if(0<texture.version&&textureProperties.__version!==texture.version){var image=texture.image;if(void 0===image)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",texture);else if(!1===image.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",texture);else{void 0===textureProperties.__webglInit&&(textureProperties.__webglInit=!0,texture.addEventListener("dispose",
onTextureDispose),textureProperties.__webglTexture=_gl.createTexture(),_infoMemory.textures++);state.activeTexture(_gl.TEXTURE0+slot);state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha);_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,texture.unpackAlignment);var image$jscomp$0=clampToMaxSize(texture.image,capabilities.maxTextureSize);(texture.wrapS!==THREE.ClampToEdgeWrapping||
texture.wrapT!==THREE.ClampToEdgeWrapping||texture.minFilter!==THREE.NearestFilter&&texture.minFilter!==THREE.LinearFilter)&&!1===isPowerOfTwo(image$jscomp$0)&&(slot=image$jscomp$0,slot instanceof HTMLImageElement||slot instanceof HTMLCanvasElement?(image=document.createElement("canvas"),image.width=THREE.Math.nearestPowerOfTwo(slot.width),image.height=THREE.Math.nearestPowerOfTwo(slot.height),image.getContext("2d").drawImage(slot,0,0,image.width,image.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+
slot.width+"x"+slot.height+"). Resized to "+image.width+"x"+image.height,slot),image$jscomp$0=image):image$jscomp$0=slot);slot=isPowerOfTwo(image$jscomp$0);image=paramThreeToGL(texture.format);var glType=paramThreeToGL(texture.type);setTextureParameters(_gl.TEXTURE_2D,texture,slot);var mipmaps=texture.mipmaps;if(texture instanceof THREE.DepthTexture){mipmaps=_gl.DEPTH_COMPONENT;if(texture.type===THREE.FloatType){if(!_isWebGL2)throw Error("Float Depth Texture only supported in WebGL2.0");mipmaps=_gl.DEPTH_COMPONENT32F}else _isWebGL2&&
(mipmaps=_gl.DEPTH_COMPONENT16);state.texImage2D(_gl.TEXTURE_2D,0,mipmaps,image$jscomp$0.width,image$jscomp$0.height,0,image,glType,null)}else if(texture instanceof THREE.DataTexture)if(0<mipmaps.length&&slot){for(var i=0,il=mipmaps.length;i<il;i++)image$jscomp$0=mipmaps[i],state.texImage2D(_gl.TEXTURE_2D,i,image,image$jscomp$0.width,image$jscomp$0.height,0,image,glType,image$jscomp$0.data);texture.generateMipmaps=!1}else state.texImage2D(_gl.TEXTURE_2D,0,image,image$jscomp$0.width,image$jscomp$0.height,
0,image,glType,image$jscomp$0.data);else if(texture instanceof THREE.CompressedTexture)for(i=0,il=mipmaps.length;i<il;i++)image$jscomp$0=mipmaps[i],texture.format!==THREE.RGBAFormat&&texture.format!==THREE.RGBFormat?-1<state.getCompressedTextureFormats().indexOf(image)?state.compressedTexImage2D(_gl.TEXTURE_2D,i,image,image$jscomp$0.width,image$jscomp$0.height,0,image$jscomp$0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):state.texImage2D(_gl.TEXTURE_2D,
i,image,image$jscomp$0.width,image$jscomp$0.height,0,image,glType,image$jscomp$0.data);else if(0<mipmaps.length&&slot){i=0;for(il=mipmaps.length;i<il;i++)image$jscomp$0=mipmaps[i],state.texImage2D(_gl.TEXTURE_2D,i,image,image,glType,image$jscomp$0);texture.generateMipmaps=!1}else state.texImage2D(_gl.TEXTURE_2D,0,image,image,glType,image$jscomp$0);texture.generateMipmaps&&slot&&_gl.generateMipmap(_gl.TEXTURE_2D);textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture)}}else state.activeTexture(_gl.TEXTURE0+
slot),state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture)}}();this.setTexture=function(){var warned=!1;return function(texture,slot){warned||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),warned=!0);_this.setTexture2D(texture,slot)}}();this.setTextureCube=function(){var warned=!1;return function(texture,slot){texture instanceof THREE.WebGLRenderTargetCube&&(warned||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
warned=!0),texture=texture.texture);if(texture instanceof THREE.CubeTexture||Array.isArray(texture.image)&&6===texture.image.length){var textureProperties=properties.get(texture);if(6===texture.image.length)if(0<texture.version&&textureProperties.__version!==texture.version){textureProperties.__image__webglTextureCube||(texture.addEventListener("dispose",onTextureDispose),textureProperties.__image__webglTextureCube=_gl.createTexture(),_infoMemory.textures++);state.activeTexture(_gl.TEXTURE0+slot);
state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube);_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);slot=texture instanceof THREE.CompressedTexture;for(var isDataTexture=texture.image[0]instanceof THREE.DataTexture,cubeImage=[],i=0;6>i;i++)cubeImage[i]=!_this.autoScaleCubemaps||slot||isDataTexture?isDataTexture?texture.image[i].image:texture.image[i]:clampToMaxSize(texture.image[i],capabilities.maxCubemapSize);var isPowerOfTwoImage=isPowerOfTwo(cubeImage[0]),
glFormat=paramThreeToGL(texture.format),glType=paramThreeToGL(texture.type);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,isPowerOfTwoImage);for(i=0;6>i;i++)if(slot)for(var mipmap,mipmaps=cubeImage[i].mipmaps,j=0,jl=mipmaps.length;j<jl;j++)mipmap=mipmaps[j],texture.format!==THREE.RGBAFormat&&texture.format!==THREE.RGBFormat?-1<state.getCompressedTextureFormats().indexOf(glFormat)?state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glFormat,mipmap.width,mipmap.height,0,mipmap.data):
console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);else isDataTexture?state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glFormat,glFormat,glType,cubeImage[i]);texture.generateMipmaps&&
isPowerOfTwoImage&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);textureProperties.__version=texture.version;if(texture.onUpdate)texture.onUpdate(texture)}else state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube)}else state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,properties.get(texture).__webglTexture)}}();this.getCurrentRenderTarget=function(){return _currentRenderTarget};this.setRenderTarget=function(renderTarget){if((_currentRenderTarget=
renderTarget)&&void 0===properties.get(renderTarget).__webglFramebuffer){var renderTargetProperties=properties.get(renderTarget),textureProperties=properties.get(renderTarget.texture);renderTarget.addEventListener("dispose",onRenderTargetDispose);textureProperties.__webglTexture=_gl.createTexture();_infoMemory.textures++;var isCube=renderTarget instanceof THREE.WebGLRenderTargetCube,isTargetPowerOfTwo=THREE.Math.isPowerOfTwo(renderTarget.width)&&THREE.Math.isPowerOfTwo(renderTarget.height);if(isCube){renderTargetProperties.__webglFramebuffer=
[];for(var i=0;6>i;i++)renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer()}else renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isCube){state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture);setTextureParameters(_gl.TEXTURE_CUBE_MAP,renderTarget.texture,isTargetPowerOfTwo);for(i=0;6>i;i++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i);renderTarget.texture.generateMipmaps&&
isTargetPowerOfTwo&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);state.bindTexture(_gl.TEXTURE_CUBE_MAP,null)}else state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture),setTextureParameters(_gl.TEXTURE_2D,renderTarget.texture,isTargetPowerOfTwo),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D),renderTarget.texture.generateMipmaps&&isTargetPowerOfTwo&&_gl.generateMipmap(_gl.TEXTURE_2D),state.bindTexture(_gl.TEXTURE_2D,null);
if(renderTarget.depthBuffer){renderTargetProperties=properties.get(renderTarget);textureProperties=renderTarget instanceof THREE.WebGLRenderTargetCube;if(renderTarget.depthTexture){if(textureProperties)throw Error("target.depthTexture not supported in Cube render targets");if(renderTarget instanceof THREE.WebGLRenderTargetCube)throw Error("Depth Texture with cube render targets is not supported!");_gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer);if(!(renderTarget.depthTexture instanceof
THREE.DepthTexture))throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");properties.get(renderTarget.depthTexture).__webglTexture&&renderTarget.depthTexture.image.width===renderTarget.width&&renderTarget.depthTexture.image.height===renderTarget.height||(renderTarget.depthTexture.image.width=renderTarget.width,renderTarget.depthTexture.image.height=renderTarget.height,renderTarget.depthTexture.needsUpdate=!0);_this.setTexture2D(renderTarget.depthTexture,0);renderTargetProperties=
properties.get(renderTarget.depthTexture).__webglTexture;_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,renderTargetProperties,0)}else if(textureProperties)for(renderTargetProperties.__webglDepthbuffer=[],textureProperties=0;6>textureProperties;textureProperties++)_gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer[textureProperties]),renderTargetProperties.__webglDepthbuffer[textureProperties]=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[textureProperties],
renderTarget);else _gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget);_gl.bindFramebuffer(_gl.FRAMEBUFFER,null)}}renderTargetProperties=renderTarget instanceof THREE.WebGLRenderTargetCube;renderTarget?(textureProperties=properties.get(renderTarget),textureProperties=renderTargetProperties?textureProperties.__webglFramebuffer[renderTarget.activeCubeFace]:
textureProperties.__webglFramebuffer,_currentScissor.copy(renderTarget.scissor),_currentScissorTest=renderTarget.scissorTest,_currentViewport.copy(renderTarget.viewport)):(textureProperties=null,_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio),_currentScissorTest=_scissorTest,_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));_currentFramebuffer!==textureProperties&&(_gl.bindFramebuffer(_gl.FRAMEBUFFER,textureProperties),_currentFramebuffer=textureProperties);state.scissor(_currentScissor);
state.setScissorTest(_currentScissorTest);state.viewport(_currentViewport);renderTargetProperties&&(renderTargetProperties=properties.get(renderTarget.texture),_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+renderTarget.activeCubeFace,renderTargetProperties.__webglTexture,renderTarget.activeMipMapLevel))};this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer){if(!1===renderTarget instanceof THREE.WebGLRenderTarget)console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
else{var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(framebuffer){var restore=!1;framebuffer!==_currentFramebuffer&&(_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer),restore=!0);try{var texture=renderTarget.texture;texture.format!==THREE.RGBAFormat&&paramThreeToGL(texture.format)!==_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)?console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."):texture.type===THREE.UnsignedByteType||
paramThreeToGL(texture.type)===_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE)||texture.type===THREE.FloatType&&extensions.get("WEBGL_color_buffer_float")||texture.type===THREE.HalfFloatType&&extensions.get("EXT_color_buffer_half_float")?_gl.checkFramebufferStatus(_gl.FRAMEBUFFER)===_gl.FRAMEBUFFER_COMPLETE?0<=x&&x<=renderTarget.width-width&&0<=y&&y<=renderTarget.height-height&&_gl.readPixels(x,y,width,height,paramThreeToGL(texture.format),paramThreeToGL(texture.type),buffer):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."):
console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}finally{restore&&_gl.bindFramebuffer(_gl.FRAMEBUFFER,_currentFramebuffer)}}}}};THREE.WebGLRenderTarget=function(width,height,options){this.uuid=THREE.Math.generateUUID();this.width=width;this.height=height;this.scissor=new THREE.Vector4(0,0,width,height);this.scissorTest=!1;this.viewport=new THREE.Vector4(0,0,width,height);options=options||{};void 0===options.minFilter&&
(options.minFilter=THREE.LinearFilter);this.texture=new THREE.Texture(void 0,void 0,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding);this.depthBuffer=void 0!==options.depthBuffer?options.depthBuffer:!0;this.stencilBuffer=void 0!==options.stencilBuffer?options.stencilBuffer:!0;this.depthTexture=null};Object.assign(THREE.WebGLRenderTarget.prototype,THREE.EventDispatcher.prototype,{setSize:function(width,height){if(this.width!==
width||this.height!==height)this.width=width,this.height=height,this.dispose();this.viewport.set(0,0,width,height);this.scissor.set(0,0,width,height)},clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.width=source.width;this.height=source.height;this.viewport.copy(source.viewport);this.texture=source.texture.clone();this.depthBuffer=source.depthBuffer;this.stencilBuffer=source.stencilBuffer;this.depthTexture=source.depthTexture;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});
THREE.WebGLRenderTargetCube=function(width,height,options){THREE.WebGLRenderTarget.call(this,width,height,options);this.activeMipMapLevel=this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;THREE.WebGLBufferRenderer=function(_gl,extensions,_infoRender){var mode;this.setMode=function(value){mode=value};this.render=function(start,count){_gl.drawArrays(mode,start,count);
_infoRender.calls++;_infoRender.vertices+=count;mode===_gl.TRIANGLES&&(_infoRender.faces+=count/3)};this.renderInstances=function(geometry){var extension=extensions.get("ANGLE_instanced_arrays");if(null===extension)console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else{var position=geometry.attributes.position;position=position instanceof THREE.InterleavedBufferAttribute?position.data.count:position.count;
extension.drawArraysInstancedANGLE(mode,0,position,geometry.maxInstancedCount);_infoRender.calls++;_infoRender.vertices+=position*geometry.maxInstancedCount;mode===_gl.TRIANGLES&&(_infoRender.faces+=geometry.maxInstancedCount*position/3)}}};THREE.WebGLClipping=function(){function resetGlobalState(){uniform.value!==globalState&&(uniform.value=globalState,uniform.needsUpdate=0<numGlobalPlanes);scope.numPlanes=numGlobalPlanes}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=
null!==planes?planes.length:0,dstArray=null;if(0!==nPlanes){dstArray=uniform.value;if(!0!==skipTransform||null===dstArray){skipTransform=dstOffset+4*nPlanes;camera=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(camera);if(null===dstArray||dstArray.length<skipTransform)dstArray=new Float32Array(skipTransform);for(skipTransform=0;skipTransform!==nPlanes;++skipTransform,dstOffset+=4)plane.copy(planes[skipTransform]).applyMatrix4(camera,viewNormalMatrix),plane.normal.toArray(dstArray,dstOffset),
dstArray[dstOffset+3]=plane.constant}uniform.value=dstArray;uniform.needsUpdate=!0}scope.numPlanes=nPlanes;return dstArray}var scope=this,globalState=null,numGlobalPlanes=0,localClippingEnabled=!1,renderingShadows=!1,plane=new THREE.Plane,viewNormalMatrix=new THREE.Matrix3,uniform={value:null,needsUpdate:!1};this.uniform=uniform;this.numPlanes=0;this.init=function(planes,enableLocalClipping,camera){var enabled=0!==planes.length||enableLocalClipping||0!==numGlobalPlanes||localClippingEnabled;localClippingEnabled=
enableLocalClipping;globalState=projectPlanes(planes,camera,0);numGlobalPlanes=planes.length;return enabled};this.beginShadows=function(){renderingShadows=!0;projectPlanes(null)};this.endShadows=function(){renderingShadows=!1;resetGlobalState()};this.setState=function(planes,clipShadows,camera,cache,fromCache){if(!localClippingEnabled||null===planes||0===planes.length||renderingShadows&&!clipShadows)renderingShadows?projectPlanes(null):resetGlobalState();else{clipShadows=renderingShadows?0:numGlobalPlanes;
var lGlobal=4*clipShadows,dstArray=cache.clippingState||null;uniform.value=dstArray;dstArray=projectPlanes(planes,camera,lGlobal,fromCache);for(planes=0;planes!==lGlobal;++planes)dstArray[planes]=globalState[planes];cache.clippingState=dstArray;this.numPlanes+=clipShadows}}};THREE.WebGLIndexedBufferRenderer=function(_gl,extensions,_infoRender){var mode,type,size;this.setMode=function(value){mode=value};this.setIndex=function(index){index.array instanceof Uint32Array&&extensions.get("OES_element_index_uint")?
(type=_gl.UNSIGNED_INT,size=4):(type=_gl.UNSIGNED_SHORT,size=2)};this.render=function(start,count){_gl.drawElements(mode,count,type,start*size);_infoRender.calls++;_infoRender.vertices+=count;mode===_gl.TRIANGLES&&(_infoRender.faces+=count/3)};this.renderInstances=function(geometry,start,count){var extension=extensions.get("ANGLE_instanced_arrays");null===extension?console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):
(extension.drawElementsInstancedANGLE(mode,count,type,start*size,geometry.maxInstancedCount),_infoRender.calls++,_infoRender.vertices+=count*geometry.maxInstancedCount,mode===_gl.TRIANGLES&&(_infoRender.faces+=geometry.maxInstancedCount*count/3))}};THREE.WebGLExtensions=function(gl){var extensions={};this.get=function(name){if(void 0!==extensions[name])return extensions[name];switch(name){case "WEBGL_depth_texture":var extension=gl.getExtension("WEBGL_depth_texture")||gl.getExtension("MOZ_WEBGL_depth_texture")||
gl.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":extension=gl.getExtension("EXT_texture_filter_anisotropic")||gl.getExtension("MOZ_EXT_texture_filter_anisotropic")||gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":extension=gl.getExtension("WEBGL_compressed_texture_s3tc")||gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":extension=
gl.getExtension("WEBGL_compressed_texture_pvrtc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case "WEBGL_compressed_texture_etc1":extension=gl.getExtension("WEBGL_compressed_texture_etc1");break;default:extension=gl.getExtension(name)}null===extension&&console.warn("THREE.WebGLRenderer: "+name+" extension not supported.");return extensions[name]=extension}};THREE.WebGLCapabilities=function(gl,extensions,parameters){function getMaxPrecision(precision){if("highp"===precision){if(0<
gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.HIGH_FLOAT).precision&&0<gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.HIGH_FLOAT).precision)return"highp";precision="mediump"}return"mediump"===precision&&0<gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.MEDIUM_FLOAT).precision&&0<gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.MEDIUM_FLOAT).precision?"mediump":"lowp"}this.getMaxPrecision=getMaxPrecision;this.precision=void 0!==parameters.precision?parameters.precision:"highp";this.logarithmicDepthBuffer=
void 0!==parameters.logarithmicDepthBuffer?parameters.logarithmicDepthBuffer:!1;this.maxTextures=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);this.maxVertexTextures=gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.maxTextureSize=gl.getParameter(gl.MAX_TEXTURE_SIZE);this.maxCubemapSize=gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);this.maxAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS);this.maxVertexUniforms=gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);this.maxVaryings=gl.getParameter(gl.MAX_VARYING_VECTORS);
this.maxFragmentUniforms=gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);this.vertexTextures=0<this.maxVertexTextures;this.floatFragmentTextures=!!extensions.get("OES_texture_float");this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;parameters=getMaxPrecision(this.precision);parameters!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",parameters,"instead."),this.precision=parameters);this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=
!!extensions.get("EXT_frag_depth"))};THREE.WebGLGeometries=function(gl,properties,info){function onGeometryDispose(event){var geometry=event.target;event=geometries[geometry.id];null!==event.index&&deleteAttribute(event.index);var attributes=event.attributes;for(name in attributes)deleteAttribute(attributes[name]);geometry.removeEventListener("dispose",onGeometryDispose);delete geometries[geometry.id];var name=properties.get(geometry);name.wireframe&&deleteAttribute(name.wireframe);properties.delete(geometry);
geometry=properties.get(event);geometry.wireframe&&deleteAttribute(geometry.wireframe);properties.delete(event);info.memory.geometries--}function deleteAttribute(attribute){var buffer=attribute instanceof THREE.InterleavedBufferAttribute?properties.get(attribute.data).__webglBuffer:properties.get(attribute).__webglBuffer;void 0!==buffer&&(gl.deleteBuffer(buffer),attribute instanceof THREE.InterleavedBufferAttribute?properties.delete(attribute.data):properties.delete(attribute))}var geometries={};
this.get=function(object){var geometry=object.geometry;if(void 0!==geometries[geometry.id])return geometries[geometry.id];geometry.addEventListener("dispose",onGeometryDispose);if(geometry instanceof THREE.BufferGeometry)var buffergeometry=geometry;else geometry instanceof THREE.Geometry&&(void 0===geometry._bufferGeometry&&(geometry._bufferGeometry=(new THREE.BufferGeometry).setFromObject(object)),buffergeometry=geometry._bufferGeometry);geometries[geometry.id]=buffergeometry;info.memory.geometries++;
return buffergeometry}};THREE.WebGLLights=function(){var lights={};this.get=function(light){if(void 0!==lights[light.id])return lights[light.id];switch(light.type){case "DirectionalLight":var uniforms={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case "SpotLight":uniforms={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,
shadowMapSize:new THREE.Vector2};break;case "PointLight":uniforms={position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case "HemisphereLight":uniforms={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return lights[light.id]=uniforms}};THREE.WebGLObjects=function(gl,properties,info){function updateAttribute(attribute,bufferType){attribute=attribute instanceof THREE.InterleavedBufferAttribute?
attribute.data:attribute;var attributeProperties=properties.get(attribute);void 0===attributeProperties.__webglBuffer?(attributeProperties.__webglBuffer=gl.createBuffer(),gl.bindBuffer(bufferType,attributeProperties.__webglBuffer),gl.bufferData(bufferType,attribute.array,attribute.dynamic?gl.DYNAMIC_DRAW:gl.STATIC_DRAW),attributeProperties.version=attribute.version):attributeProperties.version!==attribute.version&&(gl.bindBuffer(bufferType,attributeProperties.__webglBuffer),!1===attribute.dynamic||
-1===attribute.updateRange.count?gl.bufferSubData(bufferType,0,attribute.array):0===attribute.updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(gl.bufferSubData(bufferType,attribute.updateRange.offset*attribute.array.BYTES_PER_ELEMENT,attribute.array.subarray(attribute.updateRange.offset,attribute.updateRange.offset+attribute.updateRange.count)),
attribute.updateRange.count=0),attributeProperties.version=attribute.version)}function checkEdge(edges,a,b){if(a>b){var tmp=a;a=b;b=tmp}tmp=edges[a];return void 0===tmp?(edges[a]=[b],!0):-1===tmp.indexOf(b)?(tmp.push(b),!0):!1}var geometries=new THREE.WebGLGeometries(gl,properties,info);this.getAttributeBuffer=function(attribute){return attribute instanceof THREE.InterleavedBufferAttribute?properties.get(attribute.data).__webglBuffer:properties.get(attribute).__webglBuffer};this.getWireframeAttribute=
function(geometry){var property=properties.get(geometry);if(void 0!==property.wireframe)return property.wireframe;var indices=[],index=geometry.index,attributes=geometry.attributes;geometry=attributes.position;if(null!==index){attributes={};index=index.array;for(var i=0,l=index.length;i<l;i+=3){var a=index[i+0],b=index[i+1],c=index[i+2];checkEdge(attributes,a,b)&&indices.push(a,b);checkEdge(attributes,b,c)&&indices.push(b,c);checkEdge(attributes,c,a)&&indices.push(c,a)}}else for(index=attributes.position.array,
i=0,l=index.length/3-1;i<l;i+=3)a=i+0,b=i+1,c=i+2,indices.push(a,b,b,c,c,a);indices=new THREE.BufferAttribute(new (65535<geometry.count?Uint32Array:Uint16Array)(indices),1);updateAttribute(indices,gl.ELEMENT_ARRAY_BUFFER);return property.wireframe=indices};this.update=function(object){var geometry=geometries.get(object);object.geometry instanceof THREE.Geometry&&geometry.updateFromObject(object);object=geometry.index;var attributes=geometry.attributes;null!==object&&updateAttribute(object,gl.ELEMENT_ARRAY_BUFFER);
for(var name in attributes)updateAttribute(attributes[name],gl.ARRAY_BUFFER);object=geometry.morphAttributes;for(name in object){attributes=object[name];for(var i=0,l=attributes.length;i<l;i++)updateAttribute(attributes[i],gl.ARRAY_BUFFER)}return geometry}};THREE.WebGLProgram=function(){function getEncodingComponents(encoding){switch(encoding){case THREE.LinearEncoding:return["Linear","( value )"];case THREE.sRGBEncoding:return["sRGB","( value )"];case THREE.RGBEEncoding:return["RGBE","( value )"];
case THREE.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case THREE.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case THREE.RGBDEncoding:return["RGBD","( value, 256.0 )"];case THREE.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw Error("unsupported encoding: "+encoding);}}function getTexelDecodingFunction(functionName,encoding){encoding=getEncodingComponents(encoding);return"vec4 "+functionName+"( vec4 value ) { return "+encoding[0]+"ToLinear"+encoding[1]+"; }"}function getTexelEncodingFunction(functionName,
encoding){encoding=getEncodingComponents(encoding);return"vec4 "+functionName+"( vec4 value ) { return LinearTo"+encoding[0]+encoding[1]+"; }"}function getToneMappingFunction(functionName,toneMapping){switch(toneMapping){case THREE.LinearToneMapping:toneMapping="Linear";break;case THREE.ReinhardToneMapping:toneMapping="Reinhard";break;case THREE.Uncharted2ToneMapping:toneMapping="Uncharted2";break;case THREE.CineonToneMapping:toneMapping="OptimizedCineon";break;default:throw Error("unsupported toneMapping: "+
toneMapping);}return"vec3 "+functionName+"( vec3 color ) { return "+toneMapping+"ToneMapping( color ); }"}function generateExtensions(extensions,parameters,rendererExtensions){extensions=extensions||{};return[extensions.derivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.normalMap||parameters.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(extensions.fragDepth||parameters.logarithmicDepthBuffer)&&rendererExtensions.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":
"",extensions.drawBuffers&&rendererExtensions.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(extensions.shaderTextureLOD||parameters.envMap)&&rendererExtensions.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(filterEmptyLine).join("\n")}function generateDefines(defines){var chunks=[],name;for(name in defines){var value=defines[name];!1!==value&&chunks.push("#define "+name+" "+value)}return chunks.join("\n")}function filterEmptyLine(string){return""!==
string}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights)}function parseIncludes(string){return string.replace(/#include +<([\w\d.]+)>/g,function(match,include){match=THREE.ShaderChunk[include];if(void 0===match)throw Error("Can not resolve #include \x3c"+include+"\x3e");return parseIncludes(match)})}
function unrollLoops(string){return string.replace(/for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(match,start,end,snippet){match="";for(start=parseInt(start);start<parseInt(end);start++)match+=snippet.replace(/\[ i \]/g,"[ "+start+" ]");return match})}var programIdCount=0;return function(renderer,code,material,parameters){var gl=renderer.context,extensions=material.extensions,defines=material.defines,vertexShader=material.__webglShader.vertexShader,fragmentShader=material.__webglShader.fragmentShader,
shadowMapTypeDefine="SHADOWMAP_TYPE_BASIC";parameters.shadowMapType===THREE.PCFShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF":parameters.shadowMapType===THREE.PCFSoftShadowMap&&(shadowMapTypeDefine="SHADOWMAP_TYPE_PCF_SOFT");var envMapTypeDefine="ENVMAP_TYPE_CUBE",envMapModeDefine="ENVMAP_MODE_REFLECTION",envMapBlendingDefine="ENVMAP_BLENDING_MULTIPLY";if(parameters.envMap){switch(material.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE";
break;case THREE.CubeUVReflectionMapping:case THREE.CubeUVRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE_UV";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:envMapTypeDefine="ENVMAP_TYPE_SPHERE"}switch(material.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:envMapModeDefine="ENVMAP_MODE_REFRACTION"}switch(material.combine){case THREE.MultiplyOperation:envMapBlendingDefine=
"ENVMAP_BLENDING_MULTIPLY";break;case THREE.MixOperation:envMapBlendingDefine="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:envMapBlendingDefine="ENVMAP_BLENDING_ADD"}}var gammaFactorDefine=0<renderer.gammaFactor?renderer.gammaFactor:1;extensions=generateExtensions(extensions,parameters,renderer.extensions);var customDefines=generateDefines(defines),program=gl.createProgram();material instanceof THREE.RawShaderMaterial?shadowMapTypeDefine=defines="":(defines=["precision "+parameters.precision+
" float;","precision "+parameters.precision+" int;","#define SHADER_NAME "+material.__webglShader.name,customDefines,parameters.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+gammaFactorDefine,"#define MAX_BONES "+parameters.maxBones,parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":
"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.displacementMap&&parameters.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.skinning?
"#define USE_SKINNING":"",parameters.useVertexTexture?"#define BONE_TEXTURE":"",parameters.morphTargets?"#define USE_MORPHTARGETS":"",parameters.morphNormals&&!1===parameters.flatShading?"#define USE_MORPHNORMALS":"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+parameters.numClippingPlanes,parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.sizeAttenuation?
"#define USE_SIZEATTENUATION":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&renderer.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;",
"#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif",
"#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),shadowMapTypeDefine=[extensions,"precision "+parameters.precision+" float;","precision "+parameters.precision+" int;","#define SHADER_NAME "+material.__webglShader.name,customDefines,parameters.alphaTest?"#define ALPHATEST "+parameters.alphaTest:"","#define GAMMA_FACTOR "+gammaFactorDefine,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp?
"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapTypeDefine:"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.envMap?"#define "+envMapBlendingDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.specularMap?
"#define USE_SPECULARMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+parameters.numClippingPlanes,parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?
"#define "+shadowMapTypeDefine:"",parameters.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",parameters.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&renderer.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",parameters.envMap&&renderer.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",parameters.toneMapping!==
THREE.NoToneMapping?"#define TONE_MAPPING":"",parameters.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:"",parameters.toneMapping!==THREE.NoToneMapping?getToneMappingFunction("toneMapping",parameters.toneMapping):"",parameters.outputEncoding||parameters.mapEncoding||parameters.envMapEncoding||parameters.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:"",parameters.mapEncoding?getTexelDecodingFunction("mapTexelToLinear",parameters.mapEncoding):"",parameters.envMapEncoding?
getTexelDecodingFunction("envMapTexelToLinear",parameters.envMapEncoding):"",parameters.emissiveMapEncoding?getTexelDecodingFunction("emissiveMapTexelToLinear",parameters.emissiveMapEncoding):"",parameters.outputEncoding?getTexelEncodingFunction("linearToOutputTexel",parameters.outputEncoding):"",parameters.depthPacking?"#define DEPTH_PACKING "+material.depthPacking:"","\n"].filter(filterEmptyLine).join("\n"));vertexShader=parseIncludes(vertexShader,parameters);vertexShader=replaceLightNums(vertexShader,
parameters);fragmentShader=parseIncludes(fragmentShader,parameters);fragmentShader=replaceLightNums(fragmentShader,parameters);!1===material instanceof THREE.ShaderMaterial&&(vertexShader=unrollLoops(vertexShader),fragmentShader=unrollLoops(fragmentShader));fragmentShader=shadowMapTypeDefine+fragmentShader;vertexShader=THREE.WebGLShader(gl,gl.VERTEX_SHADER,defines+vertexShader);fragmentShader=THREE.WebGLShader(gl,gl.FRAGMENT_SHADER,fragmentShader);gl.attachShader(program,vertexShader);gl.attachShader(program,
fragmentShader);void 0!==material.index0AttributeName?gl.bindAttribLocation(program,0,material.index0AttributeName):!0===parameters.morphTargets&&gl.bindAttribLocation(program,0,"position");gl.linkProgram(program);parameters=gl.getProgramInfoLog(program);envMapTypeDefine=gl.getShaderInfoLog(vertexShader);envMapModeDefine=gl.getShaderInfoLog(fragmentShader);gammaFactorDefine=envMapBlendingDefine=!0;if(!1===gl.getProgramParameter(program,gl.LINK_STATUS))envMapBlendingDefine=!1,console.error("THREE.WebGLProgram: shader error: ",
gl.getError(),"gl.VALIDATE_STATUS",gl.getProgramParameter(program,gl.VALIDATE_STATUS),"gl.getProgramInfoLog",parameters,envMapTypeDefine,envMapModeDefine);else if(""!==parameters)console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",parameters);else if(""===envMapTypeDefine||""===envMapModeDefine)gammaFactorDefine=!1;gammaFactorDefine&&(this.diagnostics={runnable:envMapBlendingDefine,material:material,programLog:parameters,vertexShader:{log:envMapTypeDefine,prefix:defines},fragmentShader:{log:envMapModeDefine,
prefix:shadowMapTypeDefine}});gl.deleteShader(vertexShader);gl.deleteShader(fragmentShader);var cachedUniforms;this.getUniforms=function(){void 0===cachedUniforms&&(cachedUniforms=new THREE.WebGLUniforms(gl,program,renderer));return cachedUniforms};var cachedAttributes;this.getAttributes=function(){if(void 0===cachedAttributes){for(var attributes={},n=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES),i=0;i<n;i++){var name=gl.getActiveAttrib(program,i).name;attributes[name]=gl.getAttribLocation(program,
name)}cachedAttributes=attributes}return cachedAttributes};this.destroy=function(){gl.deleteProgram(program);this.program=void 0};Object.defineProperties(this,{uniforms:{get:function(){console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms()}},attributes:{get:function(){console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");return this.getAttributes()}}});this.id=programIdCount++;this.code=code;this.usedTimes=1;this.program=program;this.vertexShader=
vertexShader;this.fragmentShader=fragmentShader;return this}}();THREE.WebGLPrograms=function(renderer,capabilities){function getTextureEncodingFromMap(map,gammaOverrideLinear){if(map)map instanceof THREE.Texture?encoding=map.encoding:map instanceof THREE.WebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),encoding=map.texture.encoding);else var encoding=THREE.LinearEncoding;encoding===THREE.LinearEncoding&&
gammaOverrideLinear&&(encoding=THREE.GammaEncoding);return encoding}var programs=[],shaderIDs={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},parameterNames="precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes depthPacking".split(" ");
this.getParameters=function(material,lights,fog,nClipPlanes,object){var shaderID=shaderIDs[material.type];if(capabilities.floatVertexTextures&&object&&object.skeleton&&object.skeleton.useVertexTexture)var maxBones=1024;else maxBones=Math.floor((capabilities.maxVertexUniforms-20)/4),void 0!==object&&object instanceof THREE.SkinnedMesh&&(maxBones=Math.min(object.skeleton.bones.length,maxBones),maxBones<object.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+object.skeleton.bones.length+
", this GPU supports just "+maxBones+" (try OpenGL instead of ANGLE)"));var precision=renderer.getPrecision();null!==material.precision&&(precision=capabilities.getMaxPrecision(material.precision),precision!==material.precision&&console.warn("THREE.WebGLProgram.getParameters:",material.precision,"not supported, using",precision,"instead."));var currentRenderTarget=renderer.getCurrentRenderTarget();return{shaderID:shaderID,precision:precision,supportsVertexTextures:capabilities.vertexTextures,outputEncoding:getTextureEncodingFromMap(currentRenderTarget?
currentRenderTarget.texture:null,renderer.gammaOutput),map:!!material.map,mapEncoding:getTextureEncodingFromMap(material.map,renderer.gammaInput),envMap:!!material.envMap,envMapMode:material.envMap&&material.envMap.mapping,envMapEncoding:getTextureEncodingFromMap(material.envMap,renderer.gammaInput),envMapCubeUV:!!material.envMap&&(material.envMap.mapping===THREE.CubeUVReflectionMapping||material.envMap.mapping===THREE.CubeUVRefractionMapping),lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,
emissiveMapEncoding:getTextureEncodingFromMap(material.emissiveMap,renderer.gammaInput),bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,alphaMap:!!material.alphaMap,combine:material.combine,vertexColors:material.vertexColors,fog:fog,useFog:material.fog,fogExp:fog instanceof THREE.FogExp2,flatShading:material.shading===THREE.FlatShading,sizeAttenuation:material.sizeAttenuation,
logarithmicDepthBuffer:capabilities.logarithmicDepthBuffer,skinning:material.skinning,maxBones:maxBones,useVertexTexture:capabilities.floatVertexTextures&&object&&object.skeleton&&object.skeleton.useVertexTexture,morphTargets:material.morphTargets,morphNormals:material.morphNormals,maxMorphTargets:renderer.maxMorphTargets,maxMorphNormals:renderer.maxMorphNormals,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numHemiLights:lights.hemi.length,
numClippingPlanes:nClipPlanes,shadowMapEnabled:renderer.shadowMap.enabled&&object.receiveShadow&&0<lights.shadows.length,shadowMapType:renderer.shadowMap.type,toneMapping:renderer.toneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,alphaTest:material.alphaTest,doubleSided:material.side===THREE.DoubleSide,flipSided:material.side===THREE.BackSide,depthPacking:void 0!==material.depthPacking?material.depthPacking:!1}};this.getProgramCode=
function(material,parameters){var array=[];parameters.shaderID?array.push(parameters.shaderID):(array.push(material.fragmentShader),array.push(material.vertexShader));if(void 0!==material.defines)for(var name in material.defines)array.push(name),array.push(material.defines[name]);for(material=0;material<parameterNames.length;material++)array.push(parameters[parameterNames[material]]);return array.join()};this.acquireProgram=function(material,parameters,code){for(var program,p=0,pl=programs.length;p<
pl;p++){var programInfo=programs[p];if(programInfo.code===code){program=programInfo;++program.usedTimes;break}}void 0===program&&(program=new THREE.WebGLProgram(renderer,code,material,parameters),programs.push(program));return program};this.releaseProgram=function(program){if(0===--program.usedTimes){var i=programs.indexOf(program);programs[i]=programs[programs.length-1];programs.pop();program.destroy()}};this.programs=programs};THREE.WebGLProperties=function(){var properties={};this.get=function(object){object=
object.uuid;var map=properties[object];void 0===map&&(map={},properties[object]=map);return map};this.delete=function(object){delete properties[object.uuid]};this.clear=function(){properties={}}};THREE.WebGLShader=function(){function addLineNumbers(string){string=string.split("\n");for(var i=0;i<string.length;i++)string[i]=i+1+": "+string[i];return string.join("\n")}return function(gl,type,string){var shader=gl.createShader(type);gl.shaderSource(shader,string);gl.compileShader(shader);!1===gl.getShaderParameter(shader,
gl.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile.");""!==gl.getShaderInfoLog(shader)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",type===gl.VERTEX_SHADER?"vertex":"fragment",gl.getShaderInfoLog(shader),addLineNumbers(string));return shader}}();THREE.WebGLShadowMap=function(_renderer,_lights,_objects){function getDepthMaterial(object,material,isPointLight,lightPositionWorld){var geometry=object.geometry,materialVariants=_depthMaterials,customMaterial=object.customDepthMaterial;
isPointLight&&(materialVariants=_distanceMaterials,customMaterial=object.customDistanceMaterial);customMaterial?geometry=customMaterial:(object=object instanceof THREE.SkinnedMesh&&material.skinning,customMaterial=0,void 0!==geometry.morphTargets&&0<geometry.morphTargets.length&&material.morphTargets&&(customMaterial|=1),object&&(customMaterial|=2),geometry=materialVariants[customMaterial]);_renderer.localClippingEnabled&&!0===material.clipShadows&&0!==material.clippingPlanes.length&&(customMaterial=
geometry.uuid,materialVariants=material.uuid,object=_materialCache[customMaterial],void 0===object&&(object={},_materialCache[customMaterial]=object),customMaterial=object[materialVariants],void 0===customMaterial&&(customMaterial=geometry.clone(),object[materialVariants]=customMaterial),geometry=customMaterial);geometry.visible=material.visible;geometry.wireframe=material.wireframe;materialVariants=material.side;scope.renderSingleSided&&materialVariants==THREE.DoubleSide&&(materialVariants=THREE.FrontSide);
scope.renderReverseSided&&(materialVariants===THREE.FrontSide?materialVariants=THREE.BackSide:materialVariants===THREE.BackSide&&(materialVariants=THREE.FrontSide));geometry.side=materialVariants;geometry.clipShadows=material.clipShadows;geometry.clippingPlanes=material.clippingPlanes;geometry.wireframeLinewidth=material.wireframeLinewidth;geometry.linewidth=material.linewidth;isPointLight&&void 0!==geometry.uniforms.lightPos&&geometry.uniforms.lightPos.value.copy(lightPositionWorld);return geometry}
function projectObject(object,camera,shadowCamera){if(!1!==object.visible){object.layers.test(camera.layers)&&(object instanceof THREE.Mesh||object instanceof THREE.Line||object instanceof THREE.Points)&&object.castShadow&&(!1===object.frustumCulled||!0===_frustum.intersectsObject(object))&&!0===object.material.visible&&(object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld),_renderList.push(object));object=object.children;for(var i=0,l=object.length;i<l;i++)projectObject(object[i],
camera,shadowCamera)}}var _gl=_renderer.context,_state=_renderer.state,_frustum=new THREE.Frustum,_projScreenMatrix=new THREE.Matrix4,_lightShadows=_lights.shadows,_shadowMapSize=new THREE.Vector2,_lookTarget=new THREE.Vector3,_lightPositionWorld=new THREE.Vector3,_renderList=[],_depthMaterials=Array(4),_distanceMaterials=Array(4),_materialCache={},cubeDirections=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,
-1,0)],cubeUps=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],cube2DViewPorts=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4];_lights=new THREE.MeshDepthMaterial;_lights.depthPacking=THREE.RGBADepthPacking;_lights.clipping=!0;for(var distanceShader=THREE.ShaderLib.distanceRGBA,distanceUniforms=THREE.UniformsUtils.clone(distanceShader.uniforms),
i$jscomp$0=0;4!==i$jscomp$0;++i$jscomp$0){var useMorphing=0!==(i$jscomp$0&1),useSkinning=0!==(i$jscomp$0&2),depthMaterial=_lights.clone();depthMaterial.morphTargets=useMorphing;depthMaterial.skinning=useSkinning;_depthMaterials[i$jscomp$0]=depthMaterial;useMorphing=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:distanceUniforms,vertexShader:distanceShader.vertexShader,fragmentShader:distanceShader.fragmentShader,morphTargets:useMorphing,skinning:useSkinning,clipping:!0});_distanceMaterials[i$jscomp$0]=
useMorphing}var scope=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=THREE.PCFShadowMap;this.renderSingleSided=this.renderReverseSided=!0;this.render=function(scene,camera){if(!1!==scope.enabled&&(!1!==scope.autoUpdate||!1!==scope.needsUpdate)&&0!==_lightShadows.length){_state.clearColor(1,1,1,1);_state.disable(_gl.BLEND);_state.setDepthTest(!0);_state.setScissorTest(!1);for(var faceCount,isPointLight,i=0,il=_lightShadows.length;i<il;i++){var light=_lightShadows[i],shadow=light.shadow;
if(void 0===shadow)console.warn("THREE.WebGLShadowMap:",light,"has no shadow.");else{var shadowCamera=shadow.camera;_shadowMapSize.copy(shadow.mapSize);if(light instanceof THREE.PointLight){faceCount=6;isPointLight=!0;var vpWidth=_shadowMapSize.x,vpHeight=_shadowMapSize.y;cube2DViewPorts[0].set(2*vpWidth,vpHeight,vpWidth,vpHeight);cube2DViewPorts[1].set(0,vpHeight,vpWidth,vpHeight);cube2DViewPorts[2].set(3*vpWidth,vpHeight,vpWidth,vpHeight);cube2DViewPorts[3].set(vpWidth,vpHeight,vpWidth,vpHeight);
cube2DViewPorts[4].set(3*vpWidth,0,vpWidth,vpHeight);cube2DViewPorts[5].set(vpWidth,0,vpWidth,vpHeight);_shadowMapSize.x*=4;_shadowMapSize.y*=2}else faceCount=1,isPointLight=!1;null===shadow.map&&(shadow.map=new THREE.WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat}),shadowCamera.updateProjectionMatrix());shadow instanceof THREE.SpotLightShadow&&shadow.update(light);vpWidth=shadow.map;shadow=shadow.matrix;_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
shadowCamera.position.copy(_lightPositionWorld);_renderer.setRenderTarget(vpWidth);_renderer.clear();for(vpWidth=0;vpWidth<faceCount;vpWidth++){isPointLight?(_lookTarget.copy(shadowCamera.position),_lookTarget.add(cubeDirections[vpWidth]),shadowCamera.up.copy(cubeUps[vpWidth]),shadowCamera.lookAt(_lookTarget),_state.viewport(cube2DViewPorts[vpWidth])):(_lookTarget.setFromMatrixPosition(light.target.matrixWorld),shadowCamera.lookAt(_lookTarget));shadowCamera.updateMatrixWorld();shadowCamera.matrixWorldInverse.getInverse(shadowCamera.matrixWorld);
shadow.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);shadow.multiply(shadowCamera.projectionMatrix);shadow.multiply(shadowCamera.matrixWorldInverse);_projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse);_frustum.setFromMatrix(_projScreenMatrix);_renderList.length=0;projectObject(scene,camera,shadowCamera);vpHeight=0;for(var jl=_renderList.length;vpHeight<jl;vpHeight++){var object=_renderList[vpHeight],geometry=_objects.update(object),material=object.material;
if(material instanceof THREE.MultiMaterial){var groups=geometry.groups;material=material.materials;for(var k=0,kl=groups.length;k<kl;k++){var group=groups[k],groupMaterial=material[group.materialIndex];!0===groupMaterial.visible&&(groupMaterial=getDepthMaterial(object,groupMaterial,isPointLight,_lightPositionWorld),_renderer.renderBufferDirect(shadowCamera,null,geometry,groupMaterial,object,group))}}else groupMaterial=getDepthMaterial(object,material,isPointLight,_lightPositionWorld),_renderer.renderBufferDirect(shadowCamera,
null,geometry,groupMaterial,object,null)}}}}scene=_renderer.getClearColor();camera=_renderer.getClearAlpha();_renderer.setClearColor(scene,camera);scope.needsUpdate=!1}}};THREE.WebGLState=function(gl,extensions,paramThreeToGL){function createTexture(type,target,count){var data=new Uint8Array(3),texture=gl.createTexture();gl.bindTexture(type,texture);gl.texParameteri(type,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(type,gl.TEXTURE_MAG_FILTER,gl.NEAREST);for(type=0;type<count;type++)gl.texImage2D(target+
type,0,gl.RGB,1,1,0,gl.RGB,gl.UNSIGNED_BYTE,data);return texture}var _this=this;this.buffers={color:new THREE.WebGLColorBuffer(gl,this),depth:new THREE.WebGLDepthBuffer(gl,this),stencil:new THREE.WebGLStencilBuffer(gl,this)};var maxVertexAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS),newAttributes=new Uint8Array(maxVertexAttributes),enabledAttributes=new Uint8Array(maxVertexAttributes),attributeDivisors=new Uint8Array(maxVertexAttributes),capabilities={},compressedTextureFormats=null,currentBlending=
null,currentBlendEquation=null,currentBlendSrc=null,currentBlendDst=null,currentBlendEquationAlpha=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null,currentPremultipledAlpha=!1,currentFlipSided=null,currentCullFace=null,currentLineWidth=null,currentPolygonOffsetFactor=null,currentPolygonOffsetUnits=null,currentScissorTest=null,maxTextures=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),currentTextureSlot=null,currentBoundTextures={},currentScissor=new THREE.Vector4,currentViewport=new THREE.Vector4,
emptyTextures={};emptyTextures[gl.TEXTURE_2D]=createTexture(gl.TEXTURE_2D,gl.TEXTURE_2D,1);emptyTextures[gl.TEXTURE_CUBE_MAP]=createTexture(gl.TEXTURE_CUBE_MAP,gl.TEXTURE_CUBE_MAP_POSITIVE_X,6);this.init=function(){this.clearColor(0,0,0,1);this.clearDepth(1);this.clearStencil(0);this.enable(gl.DEPTH_TEST);this.setDepthFunc(THREE.LessEqualDepth);this.setFlipSided(!1);this.setCullFace(THREE.CullFaceBack);this.enable(gl.CULL_FACE);this.enable(gl.BLEND);this.setBlending(THREE.NormalBlending)};this.initAttributes=
function(){for(var i=0,l=newAttributes.length;i<l;i++)newAttributes[i]=0};this.enableAttribute=function(attribute){newAttributes[attribute]=1;0===enabledAttributes[attribute]&&(gl.enableVertexAttribArray(attribute),enabledAttributes[attribute]=1);0!==attributeDivisors[attribute]&&(extensions.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(attribute,0),attributeDivisors[attribute]=0)};this.enableAttributeAndDivisor=function(attribute,meshPerAttribute,extension){newAttributes[attribute]=1;0===
enabledAttributes[attribute]&&(gl.enableVertexAttribArray(attribute),enabledAttributes[attribute]=1);attributeDivisors[attribute]!==meshPerAttribute&&(extension.vertexAttribDivisorANGLE(attribute,meshPerAttribute),attributeDivisors[attribute]=meshPerAttribute)};this.disableUnusedAttributes=function(){for(var i=0,l=enabledAttributes.length;i!==l;++i)enabledAttributes[i]!==newAttributes[i]&&(gl.disableVertexAttribArray(i),enabledAttributes[i]=0)};this.enable=function(id){!0!==capabilities[id]&&(gl.enable(id),
capabilities[id]=!0)};this.disable=function(id){!1!==capabilities[id]&&(gl.disable(id),capabilities[id]=!1)};this.getCompressedTextureFormats=function(){if(null===compressedTextureFormats&&(compressedTextureFormats=[],extensions.get("WEBGL_compressed_texture_pvrtc")||extensions.get("WEBGL_compressed_texture_s3tc")||extensions.get("WEBGL_compressed_texture_etc1")))for(var formats=gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS),i=0;i<formats.length;i++)compressedTextureFormats.push(formats[i]);return compressedTextureFormats};
this.setBlending=function(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){if(blending!==THREE.NoBlending){this.enable(gl.BLEND);if(blending!==currentBlending||premultipliedAlpha!==currentPremultipledAlpha)blending===THREE.AdditiveBlending?premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ONE,gl.ONE,gl.ONE,gl.ONE)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.SRC_ALPHA,gl.ONE)):blending===THREE.SubtractiveBlending?
premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ZERO,gl.ZERO,gl.ONE_MINUS_SRC_COLOR,gl.ONE_MINUS_SRC_ALPHA)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.ZERO,gl.ONE_MINUS_SRC_COLOR)):blending===THREE.MultiplyBlending?premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ZERO,gl.SRC_COLOR,gl.ZERO,gl.SRC_ALPHA)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.ZERO,gl.SRC_COLOR)):premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,
gl.FUNC_ADD),gl.blendFuncSeparate(gl.ONE,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA)):(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA)),currentBlending=blending,currentPremultipledAlpha=premultipliedAlpha;if(blending===THREE.CustomBlending){blendEquationAlpha=blendEquationAlpha||blendEquation;blendSrcAlpha=blendSrcAlpha||blendSrc;blendDstAlpha=blendDstAlpha||blendDst;if(blendEquation!==currentBlendEquation||
blendEquationAlpha!==currentBlendEquationAlpha)gl.blendEquationSeparate(paramThreeToGL(blendEquation),paramThreeToGL(blendEquationAlpha)),currentBlendEquation=blendEquation,currentBlendEquationAlpha=blendEquationAlpha;if(blendSrc!==currentBlendSrc||blendDst!==currentBlendDst||blendSrcAlpha!==currentBlendSrcAlpha||blendDstAlpha!==currentBlendDstAlpha)gl.blendFuncSeparate(paramThreeToGL(blendSrc),paramThreeToGL(blendDst),paramThreeToGL(blendSrcAlpha),paramThreeToGL(blendDstAlpha)),currentBlendSrc=blendSrc,
currentBlendDst=blendDst,currentBlendSrcAlpha=blendSrcAlpha,currentBlendDstAlpha=blendDstAlpha}else currentBlendDstAlpha=currentBlendSrcAlpha=currentBlendEquationAlpha=currentBlendDst=currentBlendSrc=currentBlendEquation=null}else this.disable(gl.BLEND),currentBlending=blending};this.setColorWrite=function(colorWrite){this.buffers.color.setMask(colorWrite)};this.setDepthTest=function(depthTest){this.buffers.depth.setTest(depthTest)};this.setDepthWrite=function(depthWrite){this.buffers.depth.setMask(depthWrite)};
this.setDepthFunc=function(depthFunc){this.buffers.depth.setFunc(depthFunc)};this.setStencilTest=function(stencilTest){this.buffers.stencil.setTest(stencilTest)};this.setStencilWrite=function(stencilWrite){this.buffers.stencil.setMask(stencilWrite)};this.setStencilFunc=function(stencilFunc,stencilRef,stencilMask){this.buffers.stencil.setFunc(stencilFunc,stencilRef,stencilMask)};this.setStencilOp=function(stencilFail,stencilZFail,stencilZPass){this.buffers.stencil.setOp(stencilFail,stencilZFail,stencilZPass)};
this.setFlipSided=function(flipSided){currentFlipSided!==flipSided&&(flipSided?gl.frontFace(gl.CW):gl.frontFace(gl.CCW),currentFlipSided=flipSided)};this.setCullFace=function(cullFace){cullFace!==THREE.CullFaceNone?(this.enable(gl.CULL_FACE),cullFace!==currentCullFace&&(cullFace===THREE.CullFaceBack?gl.cullFace(gl.BACK):cullFace===THREE.CullFaceFront?gl.cullFace(gl.FRONT):gl.cullFace(gl.FRONT_AND_BACK))):this.disable(gl.CULL_FACE);currentCullFace=cullFace};this.setLineWidth=function(width){width!==
currentLineWidth&&(gl.lineWidth(width),currentLineWidth=width)};this.setPolygonOffset=function(polygonOffset,factor,units){if(polygonOffset){if(this.enable(gl.POLYGON_OFFSET_FILL),currentPolygonOffsetFactor!==factor||currentPolygonOffsetUnits!==units)gl.polygonOffset(factor,units),currentPolygonOffsetFactor=factor,currentPolygonOffsetUnits=units}else this.disable(gl.POLYGON_OFFSET_FILL)};this.getScissorTest=function(){return currentScissorTest};this.setScissorTest=function(scissorTest){(currentScissorTest=
scissorTest)?this.enable(gl.SCISSOR_TEST):this.disable(gl.SCISSOR_TEST)};this.activeTexture=function(webglSlot){void 0===webglSlot&&(webglSlot=gl.TEXTURE0+maxTextures-1);currentTextureSlot!==webglSlot&&(gl.activeTexture(webglSlot),currentTextureSlot=webglSlot)};this.bindTexture=function(webglType,webglTexture){null===currentTextureSlot&&_this.activeTexture();var boundTexture=currentBoundTextures[currentTextureSlot];void 0===boundTexture&&(boundTexture={type:void 0,texture:void 0},currentBoundTextures[currentTextureSlot]=
boundTexture);if(boundTexture.type!==webglType||boundTexture.texture!==webglTexture)gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]),boundTexture.type=webglType,boundTexture.texture=webglTexture};this.compressedTexImage2D=function(){try{gl.compressedTexImage2D.apply(gl,arguments)}catch(error){console.error(error)}};this.texImage2D=function(){try{gl.texImage2D.apply(gl,arguments)}catch(error){console.error(error)}};this.clearColor=function(r,g,b,a){this.buffers.color.setClear(r,g,b,
a)};this.clearDepth=function(depth){this.buffers.depth.setClear(depth)};this.clearStencil=function(stencil){this.buffers.stencil.setClear(stencil)};this.scissor=function(scissor){!1===currentScissor.equals(scissor)&&(gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w),currentScissor.copy(scissor))};this.viewport=function(viewport){!1===currentViewport.equals(viewport)&&(gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w),currentViewport.copy(viewport))};this.reset=function(){for(var i=0;i<enabledAttributes.length;i++)1===
enabledAttributes[i]&&(gl.disableVertexAttribArray(i),enabledAttributes[i]=0);capabilities={};currentTextureSlot=compressedTextureFormats=null;currentBoundTextures={};currentCullFace=currentFlipSided=currentBlending=null;this.buffers.color.reset();this.buffers.depth.reset();this.buffers.stencil.reset()}};THREE.WebGLColorBuffer=function(gl,state){var locked=!1,color=new THREE.Vector4,currentColorMask=null,currentColorClear=new THREE.Vector4;this.setMask=function(colorMask){currentColorMask===colorMask||
locked||(gl.colorMask(colorMask,colorMask,colorMask,colorMask),currentColorMask=colorMask)};this.setLocked=function(lock){locked=lock};this.setClear=function(r,g,b,a){color.set(r,g,b,a);!1===currentColorClear.equals(color)&&(gl.clearColor(r,g,b,a),currentColorClear.copy(color))};this.reset=function(){locked=!1;currentColorMask=null;currentColorClear=new THREE.Vector4}};THREE.WebGLDepthBuffer=function(gl,state){var locked=!1,currentDepthMask=null,currentDepthFunc=null,currentDepthClear=null;this.setTest=
function(depthTest){depthTest?state.enable(gl.DEPTH_TEST):state.disable(gl.DEPTH_TEST)};this.setMask=function(depthMask){currentDepthMask===depthMask||locked||(gl.depthMask(depthMask),currentDepthMask=depthMask)};this.setFunc=function(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc)switch(depthFunc){case THREE.NeverDepth:gl.depthFunc(gl.NEVER);break;case THREE.AlwaysDepth:gl.depthFunc(gl.ALWAYS);break;case THREE.LessDepth:gl.depthFunc(gl.LESS);break;case THREE.LessEqualDepth:gl.depthFunc(gl.LEQUAL);
break;case THREE.EqualDepth:gl.depthFunc(gl.EQUAL);break;case THREE.GreaterEqualDepth:gl.depthFunc(gl.GEQUAL);break;case THREE.GreaterDepth:gl.depthFunc(gl.GREATER);break;case THREE.NotEqualDepth:gl.depthFunc(gl.NOTEQUAL);break;default:gl.depthFunc(gl.LEQUAL)}else gl.depthFunc(gl.LEQUAL);currentDepthFunc=depthFunc}};this.setLocked=function(lock){locked=lock};this.setClear=function(depth){currentDepthClear!==depth&&(gl.clearDepth(depth),currentDepthClear=depth)};this.reset=function(){locked=!1;currentDepthClear=
currentDepthFunc=currentDepthMask=null}};THREE.WebGLStencilBuffer=function(gl,state){var locked=!1,currentStencilMask=null,currentStencilFunc=null,currentStencilRef=null,currentStencilFuncMask=null,currentStencilFail=null,currentStencilZFail=null,currentStencilZPass=null,currentStencilClear=null;this.setTest=function(stencilTest){stencilTest?state.enable(gl.STENCIL_TEST):state.disable(gl.STENCIL_TEST)};this.setMask=function(stencilMask){currentStencilMask===stencilMask||locked||(gl.stencilMask(stencilMask),
currentStencilMask=stencilMask)};this.setFunc=function(stencilFunc,stencilRef,stencilMask){if(currentStencilFunc!==stencilFunc||currentStencilRef!==stencilRef||currentStencilFuncMask!==stencilMask)gl.stencilFunc(stencilFunc,stencilRef,stencilMask),currentStencilFunc=stencilFunc,currentStencilRef=stencilRef,currentStencilFuncMask=stencilMask};this.setOp=function(stencilFail,stencilZFail,stencilZPass){if(currentStencilFail!==stencilFail||currentStencilZFail!==stencilZFail||currentStencilZPass!==stencilZPass)gl.stencilOp(stencilFail,
stencilZFail,stencilZPass),currentStencilFail=stencilFail,currentStencilZFail=stencilZFail,currentStencilZPass=stencilZPass};this.setLocked=function(lock){locked=lock};this.setClear=function(stencil){currentStencilClear!==stencil&&(gl.clearStencil(stencil),currentStencilClear=stencil)};this.reset=function(){locked=!1;currentStencilClear=currentStencilZPass=currentStencilZFail=currentStencilFail=currentStencilFuncMask=currentStencilRef=currentStencilFunc=currentStencilMask=null}};THREE.WebGLUniforms=
function(){var arrayCacheF32=[],arrayCacheI32=[],flatten=function(array,nBlocks,blockSize){var firstElem=array[0];if(0>=firstElem||0<firstElem)return array;var n=nBlocks*blockSize,r=arrayCacheF32[n];void 0===r&&(r=new Float32Array(n),arrayCacheF32[n]=r);if(0!==nBlocks)for(firstElem.toArray(r,0),firstElem=1,n=0;firstElem!==nBlocks;++firstElem)n+=blockSize,array[firstElem].toArray(r,n);return r},allocTexUnits=function(renderer,n){var r=arrayCacheI32[n];void 0===r&&(r=new Int32Array(n),arrayCacheI32[n]=
r);for(var i=0;i!==n;++i)r[i]=renderer.allocTextureUnit();return r},setValue1f=function(gl,v){gl.uniform1f(this.addr,v)},setValue1i=function(gl,v){gl.uniform1i(this.addr,v)},setValue2fv=function(gl,v){void 0===v.x?gl.uniform2fv(this.addr,v):gl.uniform2f(this.addr,v.x,v.y)},setValue3fv=function(gl,v){void 0!==v.x?gl.uniform3f(this.addr,v.x,v.y,v.z):void 0!==v.r?gl.uniform3f(this.addr,v.r,v.g,v.b):gl.uniform3fv(this.addr,v)},setValue4fv=function(gl,v){void 0===v.x?gl.uniform4fv(this.addr,v):gl.uniform4f(this.addr,
v.x,v.y,v.z,v.w)},setValue2fm=function(gl,v){gl.uniformMatrix2fv(this.addr,!1,v.elements||v)},setValue3fm=function(gl,v){gl.uniformMatrix3fv(this.addr,!1,v.elements||v)},setValue4fm=function(gl,v){gl.uniformMatrix4fv(this.addr,!1,v.elements||v)},setValueT1=function(gl,v,renderer){var unit=renderer.allocTextureUnit();gl.uniform1i(this.addr,unit);v&&renderer.setTexture2D(v,unit)},setValueT6=function(gl,v,renderer){var unit=renderer.allocTextureUnit();gl.uniform1i(this.addr,unit);v&&renderer.setTextureCube(v,
unit)},setValue2iv=function(gl,v){gl.uniform2iv(this.addr,v)},setValue3iv=function(gl,v){gl.uniform3iv(this.addr,v)},setValue4iv=function(gl,v){gl.uniform4iv(this.addr,v)},getSingularSetter=function(type){switch(type){case 5126:return setValue1f;case 35664:return setValue2fv;case 35665:return setValue3fv;case 35666:return setValue4fv;case 35674:return setValue2fm;case 35675:return setValue3fm;case 35676:return setValue4fm;case 35678:return setValueT1;case 35680:return setValueT6;case 5124:case 35670:return setValue1i;
case 35667:case 35671:return setValue2iv;case 35668:case 35672:return setValue3iv;case 35669:case 35673:return setValue4iv}},setValue1fv=function(gl,v){gl.uniform1fv(this.addr,v)},setValue1iv=function(gl,v){gl.uniform1iv(this.addr,v)},setValueV2a=function(gl,v){gl.uniform2fv(this.addr,flatten(v,this.size,2))},setValueV3a=function(gl,v){gl.uniform3fv(this.addr,flatten(v,this.size,3))},setValueV4a=function(gl,v){gl.uniform4fv(this.addr,flatten(v,this.size,4))},setValueM2a=function(gl,v){gl.uniformMatrix2fv(this.addr,
!1,flatten(v,this.size,4))},setValueM3a=function(gl,v){gl.uniformMatrix3fv(this.addr,!1,flatten(v,this.size,9))},setValueM4a=function(gl,v){gl.uniformMatrix4fv(this.addr,!1,flatten(v,this.size,16))},setValueT1a=function(gl,v,renderer){var n=v.length,units=allocTexUnits(renderer,n);gl.uniform1iv(this.addr,units);for(gl=0;gl!==n;++gl){var tex=v[gl];tex&&renderer.setTexture2D(tex,units[gl])}},setValueT6a=function(gl,v,renderer){var n=v.length,units=allocTexUnits(renderer,n);gl.uniform1iv(this.addr,units);
for(gl=0;gl!==n;++gl){var tex=v[gl];tex&&renderer.setTextureCube(tex,units[gl])}},getPureArraySetter=function(type){switch(type){case 5126:return setValue1fv;case 35664:return setValueV2a;case 35665:return setValueV3a;case 35666:return setValueV4a;case 35674:return setValueM2a;case 35675:return setValueM3a;case 35676:return setValueM4a;case 35678:return setValueT1a;case 35680:return setValueT6a;case 5124:case 35670:return setValue1iv;case 35667:case 35671:return setValue2iv;case 35668:case 35672:return setValue3iv;
case 35669:case 35673:return setValue4iv}},SingleUniform=function(id,activeInfo,addr){this.id=id;this.addr=addr;this.setValue=getSingularSetter(activeInfo.type)},PureArrayUniform=function(id,activeInfo,addr){this.id=id;this.addr=addr;this.size=activeInfo.size;this.setValue=getPureArraySetter(activeInfo.type)},StructuredUniform=function(id){this.id=id;this.seq=[];this.map={}};StructuredUniform.prototype.setValue=function(gl,value){for(var seq=this.seq,i=0,n=seq.length;i!==n;++i){var u=seq[i];u.setValue(gl,
value[u.id])}};var RePathPart=/([\w\d_]+)(\])?(\[|\.)?/g,WebGLUniforms=function(gl,program,renderer){this.seq=[];this.map={};this.renderer=renderer;renderer=gl.getProgramParameter(program,gl.ACTIVE_UNIFORMS);for(var i=0;i!==renderer;++i){var info=gl.getActiveUniform(program,i),addr=gl.getUniformLocation(program,info.name),container=this,path=info.name,pathLength=path.length;for(RePathPart.lastIndex=0;;){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex,id=match[1],subscript=match[3];"]"===
match[2]&&(id|=0);if(void 0===subscript||"["===subscript&&matchEnd+2===pathLength){path=container;info=void 0===subscript?new SingleUniform(id,info,addr):new PureArrayUniform(id,info,addr);path.seq.push(info);path.map[info.id]=info;break}else subscript=container.map[id],void 0===subscript&&(subscript=new StructuredUniform(id),id=container,container=subscript,id.seq.push(container),id.map[container.id]=container),container=subscript}}};WebGLUniforms.prototype.setValue=function(gl,name,value){name=
this.map[name];void 0!==name&&name.setValue(gl,value,this.renderer)};WebGLUniforms.prototype.set=function(gl,object,name){var u=this.map[name];void 0!==u&&u.setValue(gl,object[name],this.renderer)};WebGLUniforms.prototype.setOptional=function(gl,object,name){object=object[name];void 0!==object&&this.setValue(gl,name,object)};WebGLUniforms.upload=function(gl,seq,values,renderer){for(var i=0,n=seq.length;i!==n;++i){var u=seq[i],v=values[u.id];!1!==v.needsUpdate&&u.setValue(gl,v.value,renderer)}};WebGLUniforms.seqWithValue=
function(seq,values){for(var r=[],i=0,n=seq.length;i!==n;++i){var u=seq[i];u.id in values&&r.push(u)}return r};WebGLUniforms.splitDynamic=function(seq,values){for(var r=null,n=seq.length,w=0,i=0;i!==n;++i){var u=seq[i],v=values[u.id];v&&!0===v.dynamic?(null===r&&(r=[]),r.push(u)):(w<i&&(seq[w]=u),++w)}w<n&&(seq.length=w);return r};WebGLUniforms.evalDynamic=function(seq,values,object,camera){for(var i=0,n=seq.length;i!==n;++i){var v=values[seq[i].id],f=v.onUpdateCallback;void 0!==f&&f.call(v,object,
camera)}};return WebGLUniforms}();THREE.LensFlarePlugin=function(renderer,flares){var JSCompiler_object_inline_renderType_304,JSCompiler_object_inline_map_305,JSCompiler_object_inline_occlusionMap_306,JSCompiler_object_inline_opacity_307,JSCompiler_object_inline_color_308,JSCompiler_object_inline_scale_309,JSCompiler_object_inline_rotation_310,JSCompiler_object_inline_screenPosition_311,JSCompiler_object_inline_vertex_302,JSCompiler_object_inline_uv_303,gl=renderer.context,state=renderer.state,vertexBuffer,
elementBuffer,shader,program,tempTexture,occlusionTexture;this.render=function(scene,camera,viewport){if(0!==flares.length){scene=new THREE.Vector3;var invAspect=viewport.w/viewport.z,halfViewportWidth=.5*viewport.z,halfViewportHeight=.5*viewport.w,size=16/viewport.w,scale=new THREE.Vector2(size*invAspect,size),screenPosition=new THREE.Vector3(1,1,0),screenPositionPixels=new THREE.Vector2(1,1),validArea=new THREE.Box2;validArea.min.set(0,0);validArea.max.set(viewport.z-16,viewport.w-16);if(void 0===
program){size=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]);var faces=new Uint16Array([0,1,2,0,2,3]);vertexBuffer=gl.createBuffer();elementBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.bufferData(gl.ARRAY_BUFFER,size,gl.STATIC_DRAW);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,faces,gl.STATIC_DRAW);tempTexture=gl.createTexture();occlusionTexture=gl.createTexture();state.bindTexture(gl.TEXTURE_2D,tempTexture);gl.texImage2D(gl.TEXTURE_2D,
0,gl.RGB,16,16,0,gl.RGB,gl.UNSIGNED_BYTE,null);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);state.bindTexture(gl.TEXTURE_2D,occlusionTexture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,16,16,0,gl.RGBA,gl.UNSIGNED_BYTE,null);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);size=shader={vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV \x3d uv;\nvec2 pos \x3d position;\nif ( renderType \x3d\x3d 2 ) {\nvec4 visibility \x3d texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility \x3d        visibility.r / 9.0;\nvVisibility *\x3d 1.0 - visibility.g / 9.0;\nvVisibility *\x3d       visibility.b / 9.0;\nvVisibility *\x3d 1.0 - visibility.a / 9.0;\npos.x \x3d cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y \x3d sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position \x3d vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif ( renderType \x3d\x3d 0 ) {\ngl_FragColor \x3d vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if ( renderType \x3d\x3d 1 ) {\ngl_FragColor \x3d texture2D( map, vUV );\n} else {\nvec4 texture \x3d texture2D( map, vUV );\ntexture.a *\x3d opacity * vVisibility;\ngl_FragColor \x3d texture;\ngl_FragColor.rgb *\x3d color;\n}\n}"};faces=
gl.createProgram();var fragmentShader=gl.createShader(gl.FRAGMENT_SHADER),vertexShader=gl.createShader(gl.VERTEX_SHADER),prefix="precision "+renderer.getPrecision()+" float;\n";gl.shaderSource(fragmentShader,prefix+size.fragmentShader);gl.shaderSource(vertexShader,prefix+size.vertexShader);gl.compileShader(fragmentShader);gl.compileShader(vertexShader);gl.attachShader(faces,fragmentShader);gl.attachShader(faces,vertexShader);gl.linkProgram(faces);program=faces;JSCompiler_object_inline_vertex_302=
gl.getAttribLocation(program,"position");JSCompiler_object_inline_uv_303=gl.getAttribLocation(program,"uv");JSCompiler_object_inline_renderType_304=gl.getUniformLocation(program,"renderType");JSCompiler_object_inline_map_305=gl.getUniformLocation(program,"map");JSCompiler_object_inline_occlusionMap_306=gl.getUniformLocation(program,"occlusionMap");JSCompiler_object_inline_opacity_307=gl.getUniformLocation(program,"opacity");JSCompiler_object_inline_color_308=gl.getUniformLocation(program,"color");
JSCompiler_object_inline_scale_309=gl.getUniformLocation(program,"scale");JSCompiler_object_inline_rotation_310=gl.getUniformLocation(program,"rotation");JSCompiler_object_inline_screenPosition_311=gl.getUniformLocation(program,"screenPosition")}gl.useProgram(program);state.initAttributes();state.enableAttribute(JSCompiler_object_inline_vertex_302);state.enableAttribute(JSCompiler_object_inline_uv_303);state.disableUnusedAttributes();gl.uniform1i(JSCompiler_object_inline_occlusionMap_306,0);gl.uniform1i(JSCompiler_object_inline_map_305,
1);gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.vertexAttribPointer(JSCompiler_object_inline_vertex_302,2,gl.FLOAT,!1,16,0);gl.vertexAttribPointer(JSCompiler_object_inline_uv_303,2,gl.FLOAT,!1,16,8);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer);state.disable(gl.CULL_FACE);state.setDepthWrite(!1);faces=0;for(fragmentShader=flares.length;faces<fragmentShader;faces++)if(size=16/viewport.w,scale.set(size*invAspect,size),vertexShader=flares[faces],scene.set(vertexShader.matrixWorld.elements[12],
vertexShader.matrixWorld.elements[13],vertexShader.matrixWorld.elements[14]),scene.applyMatrix4(camera.matrixWorldInverse),scene.applyProjection(camera.projectionMatrix),screenPosition.copy(scene),screenPositionPixels.x=viewport.x+screenPosition.x*halfViewportWidth+halfViewportWidth-8,screenPositionPixels.y=viewport.y+screenPosition.y*halfViewportHeight+halfViewportHeight-8,!0===validArea.containsPoint(screenPositionPixels)){state.activeTexture(gl.TEXTURE0);state.bindTexture(gl.TEXTURE_2D,null);state.activeTexture(gl.TEXTURE1);
state.bindTexture(gl.TEXTURE_2D,tempTexture);gl.copyTexImage2D(gl.TEXTURE_2D,0,gl.RGB,screenPositionPixels.x,screenPositionPixels.y,16,16,0);gl.uniform1i(JSCompiler_object_inline_renderType_304,0);gl.uniform2f(JSCompiler_object_inline_scale_309,scale.x,scale.y);gl.uniform3f(JSCompiler_object_inline_screenPosition_311,screenPosition.x,screenPosition.y,screenPosition.z);state.disable(gl.BLEND);state.enable(gl.DEPTH_TEST);gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0);state.activeTexture(gl.TEXTURE0);
state.bindTexture(gl.TEXTURE_2D,occlusionTexture);gl.copyTexImage2D(gl.TEXTURE_2D,0,gl.RGBA,screenPositionPixels.x,screenPositionPixels.y,16,16,0);gl.uniform1i(JSCompiler_object_inline_renderType_304,1);state.disable(gl.DEPTH_TEST);state.activeTexture(gl.TEXTURE1);state.bindTexture(gl.TEXTURE_2D,tempTexture);gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0);vertexShader.positionScreen.copy(screenPosition);vertexShader.customUpdateCallback?vertexShader.customUpdateCallback(vertexShader):vertexShader.updateLensFlares();
gl.uniform1i(JSCompiler_object_inline_renderType_304,2);state.enable(gl.BLEND);prefix=0;for(var jl=vertexShader.lensFlares.length;prefix<jl;prefix++){var sprite=vertexShader.lensFlares[prefix];.001<sprite.opacity&&.001<sprite.scale&&(screenPosition.x=sprite.x,screenPosition.y=sprite.y,screenPosition.z=sprite.z,size=sprite.size*sprite.scale/viewport.w,scale.x=size*invAspect,scale.y=size,gl.uniform3f(JSCompiler_object_inline_screenPosition_311,screenPosition.x,screenPosition.y,screenPosition.z),gl.uniform2f(JSCompiler_object_inline_scale_309,
scale.x,scale.y),gl.uniform1f(JSCompiler_object_inline_rotation_310,sprite.rotation),gl.uniform1f(JSCompiler_object_inline_opacity_307,sprite.opacity),gl.uniform3f(JSCompiler_object_inline_color_308,sprite.color.r,sprite.color.g,sprite.color.b),state.setBlending(sprite.blending,sprite.blendEquation,sprite.blendSrc,sprite.blendDst),renderer.setTexture2D(sprite.texture,1),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0))}}state.enable(gl.CULL_FACE);state.enable(gl.DEPTH_TEST);state.setDepthWrite(!0);
renderer.resetGLState()}}};THREE.SpritePlugin=function(renderer,sprites){var JSCompiler_object_inline_uvOffset_314,JSCompiler_object_inline_uvScale_315,JSCompiler_object_inline_rotation_316,JSCompiler_object_inline_scale_317,JSCompiler_object_inline_color_318,JSCompiler_object_inline_map_319,JSCompiler_object_inline_opacity_320,JSCompiler_object_inline_modelViewMatrix_321,JSCompiler_object_inline_projectionMatrix_322,JSCompiler_object_inline_fogType_323,JSCompiler_object_inline_fogDensity_324,JSCompiler_object_inline_fogNear_325,
JSCompiler_object_inline_fogFar_326,JSCompiler_object_inline_fogColor_327,JSCompiler_object_inline_alphaTest_328,JSCompiler_object_inline_position_312,JSCompiler_object_inline_uv_313;function painterSortStable(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var gl=renderer.context,state=renderer.state,vertexBuffer,elementBuffer,program,texture,spritePosition=new THREE.Vector3,spriteRotation=new THREE.Quaternion,spriteScale=new THREE.Vector3;this.render=
function(scene,camera){if(0!==sprites.length){if(void 0===program){var vertices=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),faces=new Uint16Array([0,1,2,0,2,3]);vertexBuffer=gl.createBuffer();elementBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.bufferData(gl.ARRAY_BUFFER,vertices,gl.STATIC_DRAW);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,faces,gl.STATIC_DRAW);vertices=gl.createProgram();faces=gl.createShader(gl.VERTEX_SHADER);
var fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(faces,["precision "+renderer.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV \x3d uvOffset + uv * uvScale;\nvec2 alignedPosition \x3d position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x \x3d cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y \x3d sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition \x3d modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy +\x3d rotatedPosition;\nfinalPosition \x3d projectionMatrix * finalPosition;\ngl_Position \x3d finalPosition;\n}"].join("\n"));
gl.shaderSource(fragmentShader,["precision "+renderer.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture \x3d texture2D( map, vUV );\nif ( texture.a \x3c alphaTest ) discard;\ngl_FragColor \x3d vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType \x3e 0 ) {\nfloat depth \x3d gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor \x3d 0.0;\nif ( fogType \x3d\x3d 1 ) {\nfogFactor \x3d smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 \x3d 1.442695;\nfogFactor \x3d exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor \x3d 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor \x3d mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
gl.compileShader(faces);gl.compileShader(fragmentShader);gl.attachShader(vertices,faces);gl.attachShader(vertices,fragmentShader);gl.linkProgram(vertices);program=vertices;JSCompiler_object_inline_position_312=gl.getAttribLocation(program,"position");JSCompiler_object_inline_uv_313=gl.getAttribLocation(program,"uv");JSCompiler_object_inline_uvOffset_314=gl.getUniformLocation(program,"uvOffset");JSCompiler_object_inline_uvScale_315=gl.getUniformLocation(program,"uvScale");JSCompiler_object_inline_rotation_316=
gl.getUniformLocation(program,"rotation");JSCompiler_object_inline_scale_317=gl.getUniformLocation(program,"scale");JSCompiler_object_inline_color_318=gl.getUniformLocation(program,"color");JSCompiler_object_inline_map_319=gl.getUniformLocation(program,"map");JSCompiler_object_inline_opacity_320=gl.getUniformLocation(program,"opacity");JSCompiler_object_inline_modelViewMatrix_321=gl.getUniformLocation(program,"modelViewMatrix");JSCompiler_object_inline_projectionMatrix_322=gl.getUniformLocation(program,
"projectionMatrix");JSCompiler_object_inline_fogType_323=gl.getUniformLocation(program,"fogType");JSCompiler_object_inline_fogDensity_324=gl.getUniformLocation(program,"fogDensity");JSCompiler_object_inline_fogNear_325=gl.getUniformLocation(program,"fogNear");JSCompiler_object_inline_fogFar_326=gl.getUniformLocation(program,"fogFar");JSCompiler_object_inline_fogColor_327=gl.getUniformLocation(program,"fogColor");JSCompiler_object_inline_alphaTest_328=gl.getUniformLocation(program,"alphaTest");vertices=
document.createElement("canvas");vertices.width=8;vertices.height=8;faces=vertices.getContext("2d");faces.fillStyle="white";faces.fillRect(0,0,8,8);texture=new THREE.Texture(vertices);texture.needsUpdate=!0}gl.useProgram(program);state.initAttributes();state.enableAttribute(JSCompiler_object_inline_position_312);state.enableAttribute(JSCompiler_object_inline_uv_313);state.disableUnusedAttributes();state.disable(gl.CULL_FACE);state.enable(gl.BLEND);gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.vertexAttribPointer(JSCompiler_object_inline_position_312,
2,gl.FLOAT,!1,16,0);gl.vertexAttribPointer(JSCompiler_object_inline_uv_313,2,gl.FLOAT,!1,16,8);gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer);gl.uniformMatrix4fv(JSCompiler_object_inline_projectionMatrix_322,!1,camera.projectionMatrix.elements);state.activeTexture(gl.TEXTURE0);gl.uniform1i(JSCompiler_object_inline_map_319,0);faces=vertices=0;(fragmentShader=scene.fog)?(gl.uniform3f(JSCompiler_object_inline_fogColor_327,fragmentShader.color.r,fragmentShader.color.g,fragmentShader.color.b),fragmentShader instanceof
THREE.Fog?(gl.uniform1f(JSCompiler_object_inline_fogNear_325,fragmentShader.near),gl.uniform1f(JSCompiler_object_inline_fogFar_326,fragmentShader.far),gl.uniform1i(JSCompiler_object_inline_fogType_323,1),faces=vertices=1):fragmentShader instanceof THREE.FogExp2&&(gl.uniform1f(JSCompiler_object_inline_fogDensity_324,fragmentShader.density),gl.uniform1i(JSCompiler_object_inline_fogType_323,2),faces=vertices=2)):(gl.uniform1i(JSCompiler_object_inline_fogType_323,0),faces=vertices=0);fragmentShader=0;
for(var l=sprites.length;fragmentShader<l;fragmentShader++){var sprite=sprites[fragmentShader];sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,sprite.matrixWorld);sprite.z=-sprite.modelViewMatrix.elements[14]}sprites.sort(painterSortStable);camera=[];fragmentShader=0;for(l=sprites.length;fragmentShader<l;fragmentShader++){sprite=sprites[fragmentShader];var material=sprite.material;gl.uniform1f(JSCompiler_object_inline_alphaTest_328,material.alphaTest);gl.uniformMatrix4fv(JSCompiler_object_inline_modelViewMatrix_321,
!1,sprite.modelViewMatrix.elements);sprite.matrixWorld.decompose(spritePosition,spriteRotation,spriteScale);camera[0]=spriteScale.x;camera[1]=spriteScale.y;sprite=0;scene.fog&&material.fog&&(sprite=faces);vertices!==sprite&&(gl.uniform1i(JSCompiler_object_inline_fogType_323,sprite),vertices=sprite);null!==material.map?(gl.uniform2f(JSCompiler_object_inline_uvOffset_314,material.map.offset.x,material.map.offset.y),gl.uniform2f(JSCompiler_object_inline_uvScale_315,material.map.repeat.x,material.map.repeat.y)):
(gl.uniform2f(JSCompiler_object_inline_uvOffset_314,0,0),gl.uniform2f(JSCompiler_object_inline_uvScale_315,1,1));gl.uniform1f(JSCompiler_object_inline_opacity_320,material.opacity);gl.uniform3f(JSCompiler_object_inline_color_318,material.color.r,material.color.g,material.color.b);gl.uniform1f(JSCompiler_object_inline_rotation_316,material.rotation);gl.uniform2fv(JSCompiler_object_inline_scale_317,camera);state.setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst);
state.setDepthTest(material.depthTest);state.setDepthWrite(material.depthWrite);material.map?renderer.setTexture2D(material.map,0):renderer.setTexture2D(texture,0);gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0)}state.enable(gl.CULL_FACE);renderer.resetGLState()}}};Object.assign(THREE,{Face4:function(a,b,c,d,normal,color,materialIndex){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a,b,c,normal,color,materialIndex)},LineStrip:0,LinePieces:1,
MeshFaceMaterial:THREE.MultiMaterial,PointCloud:function(geometry,material){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new THREE.Points(geometry,material)},Particle:THREE.Sprite,ParticleSystem:function(geometry,material){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new THREE.Points(geometry,material)},PointCloudMaterial:function(parameters){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(parameters)},
ParticleBasicMaterial:function(parameters){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(parameters)},ParticleSystemMaterial:function(parameters){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new THREE.PointsMaterial(parameters)},Vertex:function(x,y,z){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new THREE.Vector3(x,y,z)}});Object.assign(THREE.Box2.prototype,
{empty:function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(box){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(box)}});Object.assign(THREE.Box3.prototype,{empty:function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(box){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
return this.intersectsBox(box)},isIntersectionSphere:function(sphere){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(sphere)}});Object.assign(THREE.Matrix3.prototype,{multiplyVector3:function(vector){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return vector.applyMatrix3(this)},multiplyVector3Array:function(a){console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
return this.applyToVector3Array(a)}});Object.assign(THREE.Matrix4.prototype,{extractPosition:function(m){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(m)},setRotationFromQuaternion:function(q){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(q)},multiplyVector3:function(vector){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return vector.applyProjection(this)},multiplyVector4:function(vector){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return vector.applyMatrix4(this)},multiplyVector3Array:function(a){console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a)},rotateAxis:function(v){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
v.transformDirection(this)},crossVector:function(vector){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return vector.applyMatrix4(this)},translate:function(v){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(angle){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(angle){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(angle){console.error("THREE.Matrix4: .rotateZ() has been removed.")},
rotateByAxis:function(axis,angle){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")}});Object.assign(THREE.Plane.prototype,{isIntersectionLine:function(line){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(line)}});Object.assign(THREE.Quaternion.prototype,{multiplyVector3:function(vector){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
return vector.applyQuaternion(this)}});Object.assign(THREE.Ray.prototype,{isIntersectionBox:function(box){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(box)},isIntersectionPlane:function(plane){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(plane)},isIntersectionSphere:function(sphere){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
return this.intersectsSphere(sphere)}});Object.assign(THREE.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(m){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
return this.setFromMatrixPosition(m)},getScaleFromMatrix:function(m){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(m)},getColumnFromMatrix:function(index,matrix){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(matrix,index)}});Object.assign(THREE.Object3D.prototype,{getChildByName:function(name){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
return this.getObjectByName(name)},renderDepth:function(value){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(distance,axis){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(axis,distance)}});Object.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order},
set:function(value){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=value}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(value){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.defineProperties(THREE.LOD.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");
return this.levels}}});THREE.PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0!==filmGauge&&(this.filmGauge=filmGauge);this.setFocalLength(focalLength)};Object.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(value){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(value){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
this.shadow.camera.fov=value}},shadowCameraLeft:{set:function(value){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=value}},shadowCameraRight:{set:function(value){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=value}},shadowCameraTop:{set:function(value){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=value}},shadowCameraBottom:{set:function(value){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
this.shadow.camera.bottom=value}},shadowCameraNear:{set:function(value){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=value}},shadowCameraFar:{set:function(value){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=value}},shadowCameraVisible:{set:function(value){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(value){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
this.shadow.bias=value}},shadowDarkness:{set:function(value){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(value){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=value}},shadowMapHeight:{set:function(value){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=value}}});Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count.");
return this.array.length}}});Object.assign(THREE.BufferGeometry.prototype,{addIndex:function(index){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(index)},addDrawCall:function(start,count,indexOffset){void 0!==indexOffset&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(start,count)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}});Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
return this.groups}}});Object.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){console.warn("THREE."+this.type+": .wrapAround has been removed.")},set:function(value){console.warn("THREE."+this.type+": .wrapAround has been removed.")}},wrapRGB:{get:function(){console.warn("THREE."+this.type+": .wrapRGB has been removed.");return new THREE.Color}}});Object.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
return!1},set:function(value){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(value){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=value}}});
THREE.EventDispatcher.prototype=Object.assign(Object.create({constructor:THREE.EventDispatcher,apply:function(target){console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in.");Object.assign(target,this)}}),THREE.EventDispatcher.prototype);Object.assign(THREE.WebGLRenderer.prototype,{supportsFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")},
supportsHalfFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
return this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},
supportsInstancedArrays:function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(boolean){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(boolean)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},
addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}});Object.defineProperties(THREE.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=value}},shadowMapType:{get:function(){return this.shadowMap.type},
set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=value}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");this.shadowMap.cullFace=value}}});Object.defineProperties(THREE.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?THREE.CullFaceFront:THREE.CullFaceBack},set:function(cullFace){cullFace=
cullFace!==THREE.CullFaceBack;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+cullFace+".");this.renderReverseSided=cullFace}}});Object.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(value){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS=value}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
return this.texture.wrapT},set:function(value){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=value}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(value){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=value}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
return this.texture.minFilter},set:function(value){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=value}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(value){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=value}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
return this.texture.offset},set:function(value){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=value}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(value){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=value}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format},
set:function(value){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=value}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(value){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=value}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},
set:function(value){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=value}}});Object.assign(THREE.Audio.prototype,{load:function(file){console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var scope=this;(new THREE.AudioLoader).load(file,function(buffer){scope.setBuffer(buffer)});return this}});Object.assign(THREE.AudioAnalyser.prototype,{getData:function(file){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
return this.getFrequencyData()}});THREE.GeometryUtils={merge:function(geometry1,geometry2,materialIndexOffset){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");if(geometry2 instanceof THREE.Mesh){geometry2.matrixAutoUpdate&&geometry2.updateMatrix();var matrix=geometry2.matrix;geometry2=geometry2.geometry}geometry1.merge(geometry2,matrix,materialIndexOffset)},center:function(geometry){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
return geometry.center()}};THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(url,mapping,onLoad,onError){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var loader=new THREE.TextureLoader;loader.setCrossOrigin(this.crossOrigin);url=loader.load(url,onLoad,void 0,onError);mapping&&(url.mapping=mapping);return url},loadTextureCube:function(urls,mapping,onLoad,onError){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
var loader=new THREE.CubeTextureLoader;loader.setCrossOrigin(this.crossOrigin);urls=loader.load(urls,onLoad,void 0,onError);mapping&&(urls.mapping=mapping);return urls},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};THREE.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
this.projectVector=function(vector,camera){console.warn("THREE.Projector: .projectVector() is now vector.project().");vector.project(camera)};this.unprojectVector=function(vector,camera){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");vector.unproject(camera)};this.pickingRay=function(vector,camera){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};THREE.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
this.domElement=document.createElement("canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};THREE.CurveUtils={tangentQuadraticBezier:function(t,p0,p1,p2){return 2*(1-t)*(p1-p0)+2*t*(p2-p1)},tangentCubicBezier:function(t,p0,p1,p2,p3){return-3*p0*(1-t)*(1-t)+3*p1*(1-t)*(1-t)-6*t*p1*(1-t)+6*t*p2*(1-t)-3*t*t*p2+3*t*t*p3},tangentSpline:function(t,p0,p1,p2,p3){return 6*t*t-6*t+(3*t*t-4*t+1)+(-6*t*t+6*t)+(3*t*t-2*t)},interpolate:function(p0,
p1,p2,p3,t){p0=.5*(p2-p0);p3=.5*(p3-p1);var t2=t*t;return(2*p1-2*p2+p0+p3)*t*t2+(-3*p1+3*p2-2*p0-p3)*t2+p0*t+p1}};THREE.SceneUtils={createMultiMaterialObject:function(geometry,materials){for(var group=new THREE.Group,i=0,l=materials.length;i<l;i++)group.add(new THREE.Mesh(geometry,materials[i]));return group},detach:function(child,parent,scene){child.applyMatrix(parent.matrixWorld);parent.remove(child);scene.add(child)},attach:function(child,scene,parent){var matrixWorldInverse=new THREE.Matrix4;
matrixWorldInverse.getInverse(parent.matrixWorld);child.applyMatrix(matrixWorldInverse);scene.remove(child);parent.add(child)}};THREE.ShapeUtils={area:function(contour){for(var n=contour.length,a=0,p=n-1,q=0;q<n;p=q++)a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;return.5*a},triangulate:function(){return function(contour,indices){var n=contour.length;if(3>n)return null;var result=[],verts=[],vertIndices=[],v;if(0<THREE.ShapeUtils.area(contour))for(v=0;v<n;v++)verts[v]=v;else for(v=0;v<n;v++)verts[v]=
n-1-v;var count=2*n;for(v=n-1;2<n;){if(0>=count--){console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()");break}var u=v;n<=u&&(u=0);v=u+1;n<=v&&(v=0);var w=v+1;n<=w&&(w=0);a:{var p;var ax=contour[verts[u]].x;var ay=contour[verts[u]].y;var bx=contour[verts[v]].x;var by=contour[verts[v]].y;var cx=contour[verts[w]].x;var cy=contour[verts[w]].y;if(Number.EPSILON>(bx-ax)*(cy-ay)-(by-ay)*(cx-ax))var JSCompiler_inline_result=!1;else{var aX=cx-bx;var aY=cy-by;var bX=ax-cx;var bY=
ay-cy;var cX=bx-ax;JSCompiler_inline_result=by-ay;for(p=0;p<n;p++){var bCROSScp=contour[verts[p]].x;var cpy=contour[verts[p]].y;if(!(bCROSScp===ax&&cpy===ay||bCROSScp===bx&&cpy===by||bCROSScp===cx&&cpy===cy)){var apx=bCROSScp-ax;var cCROSSap=cpy-ay;var bpx=bCROSScp-bx;var aCROSSbp=cpy-by;bCROSScp-=cx;cpy-=cy;aCROSSbp=aX*aCROSSbp-aY*bpx;cCROSSap=cX*cCROSSap-JSCompiler_inline_result*apx;bCROSScp=bX*cpy-bY*bCROSScp;if(aCROSSbp>=-Number.EPSILON&&bCROSScp>=-Number.EPSILON&&cCROSSap>=-Number.EPSILON){JSCompiler_inline_result=
!1;break a}}}JSCompiler_inline_result=!0}}if(JSCompiler_inline_result){result.push([contour[verts[u]],contour[verts[v]],contour[verts[w]]]);vertIndices.push([verts[u],verts[v],verts[w]]);u=v;for(w=v+1;w<n;u++,w++)verts[u]=verts[w];n--;count=2*n}}return indices?vertIndices:result}}(),triangulateShape:function(contour$jscomp$0,holes){function point_in_segment_2D_colin(inSegPt1,inSegPt2,inOtherPt){return inSegPt1.x!==inSegPt2.x?inSegPt1.x<inSegPt2.x?inSegPt1.x<=inOtherPt.x&&inOtherPt.x<=inSegPt2.x:inSegPt2.x<=
inOtherPt.x&&inOtherPt.x<=inSegPt1.x:inSegPt1.y<inSegPt2.y?inSegPt1.y<=inOtherPt.y&&inOtherPt.y<=inSegPt2.y:inSegPt2.y<=inOtherPt.y&&inOtherPt.y<=inSegPt1.y}function intersect_segments_2D(inSeg1Pt1,inSeg1Pt2,inSeg2Pt1,inSeg2Pt2,inExcludeAdjacentSegs){var seg1dx=inSeg1Pt2.x-inSeg1Pt1.x,seg1dy=inSeg1Pt2.y-inSeg1Pt1.y,seg2dx=inSeg2Pt2.x-inSeg2Pt1.x,seg2dy=inSeg2Pt2.y-inSeg2Pt1.y,seg1seg2dx=inSeg1Pt1.x-inSeg2Pt1.x,seg1seg2dy=inSeg1Pt1.y-inSeg2Pt1.y,limit=seg1dy*seg2dx-seg1dx*seg2dy,perpSeg1=seg1dy*seg1seg2dx-
seg1dx*seg1seg2dy;if(Math.abs(limit)>Number.EPSILON){if(0<limit){if(0>perpSeg1||perpSeg1>limit)return[];seg2dx=seg2dy*seg1seg2dx-seg2dx*seg1seg2dy;if(0>seg2dx||seg2dx>limit)return[]}else{if(0<perpSeg1||perpSeg1<limit)return[];seg2dx=seg2dy*seg1seg2dx-seg2dx*seg1seg2dy;if(0<seg2dx||seg2dx<limit)return[]}if(0===seg2dx)return!inExcludeAdjacentSegs||0!==perpSeg1&&perpSeg1!==limit?[inSeg1Pt1]:[];if(seg2dx===limit)return!inExcludeAdjacentSegs||0!==perpSeg1&&perpSeg1!==limit?[inSeg1Pt2]:[];if(0===perpSeg1)return[inSeg2Pt1];
if(perpSeg1===limit)return[inSeg2Pt2];inExcludeAdjacentSegs=seg2dx/limit;return[{x:inSeg1Pt1.x+inExcludeAdjacentSegs*seg1dx,y:inSeg1Pt1.y+inExcludeAdjacentSegs*seg1dy}]}if(0!==perpSeg1||seg2dy*seg1seg2dx!==seg2dx*seg1seg2dy)return[];seg1dy=0===seg1dx&&0===seg1dy;seg2dx=0===seg2dx&&0===seg2dy;if(seg1dy&&seg2dx)return inSeg1Pt1.x!==inSeg2Pt1.x||inSeg1Pt1.y!==inSeg2Pt1.y?[]:[inSeg1Pt1];if(seg1dy)return point_in_segment_2D_colin(inSeg2Pt1,inSeg2Pt2,inSeg1Pt1)?[inSeg1Pt1]:[];if(seg2dx)return point_in_segment_2D_colin(inSeg1Pt1,
inSeg1Pt2,inSeg2Pt1)?[inSeg2Pt1]:[];0!==seg1dx?(inSeg1Pt1.x<inSeg1Pt2.x?(seg1dx=inSeg1Pt1,seg2dx=inSeg1Pt1.x,seg1dy=inSeg1Pt2,inSeg1Pt1=inSeg1Pt2.x):(seg1dx=inSeg1Pt2,seg2dx=inSeg1Pt2.x,seg1dy=inSeg1Pt1,inSeg1Pt1=inSeg1Pt1.x),inSeg2Pt1.x<inSeg2Pt2.x?(inSeg1Pt2=inSeg2Pt1,limit=inSeg2Pt1.x,seg2dy=inSeg2Pt2,inSeg2Pt1=inSeg2Pt2.x):(inSeg1Pt2=inSeg2Pt2,limit=inSeg2Pt2.x,seg2dy=inSeg2Pt1,inSeg2Pt1=inSeg2Pt1.x)):(inSeg1Pt1.y<inSeg1Pt2.y?(seg1dx=inSeg1Pt1,seg2dx=inSeg1Pt1.y,seg1dy=inSeg1Pt2,inSeg1Pt1=inSeg1Pt2.y):
(seg1dx=inSeg1Pt2,seg2dx=inSeg1Pt2.y,seg1dy=inSeg1Pt1,inSeg1Pt1=inSeg1Pt1.y),inSeg2Pt1.y<inSeg2Pt2.y?(inSeg1Pt2=inSeg2Pt1,limit=inSeg2Pt1.y,seg2dy=inSeg2Pt2,inSeg2Pt1=inSeg2Pt2.y):(inSeg1Pt2=inSeg2Pt2,limit=inSeg2Pt2.y,seg2dy=inSeg2Pt1,inSeg2Pt1=inSeg2Pt1.y));return seg2dx<=limit?inSeg1Pt1<limit?[]:inSeg1Pt1===limit?inExcludeAdjacentSegs?[]:[inSeg1Pt2]:inSeg1Pt1<=inSeg2Pt1?[inSeg1Pt2,seg1dy]:[inSeg1Pt2,seg2dy]:seg2dx>inSeg2Pt1?[]:seg2dx===inSeg2Pt1?inExcludeAdjacentSegs?[]:[seg1dx]:inSeg1Pt1<=inSeg2Pt1?
[seg1dx,seg1dy]:[seg1dx,seg2dy]}function isPointInsideAngle(inVertex,inLegFromPt,inLegToPt,inOtherPt){var legFromPtX=inLegFromPt.x-inVertex.x,legFromPtY=inLegFromPt.y-inVertex.y;inLegFromPt=inLegToPt.x-inVertex.x;inLegToPt=inLegToPt.y-inVertex.y;var otherPtX=inOtherPt.x-inVertex.x;inOtherPt=inOtherPt.y-inVertex.y;inVertex=legFromPtX*inLegToPt-legFromPtY*inLegFromPt;legFromPtX=legFromPtX*inOtherPt-legFromPtY*otherPtX;return Math.abs(inVertex)>Number.EPSILON?(inLegFromPt=otherPtX*inLegToPt-inOtherPt*
inLegFromPt,0<inVertex?0<=legFromPtX&&0<=inLegFromPt:0<=legFromPtX||0<=inLegFromPt):0<legFromPtX}var il,allPointsMap={},allpoints=contour$jscomp$0.concat();var i=0;for(il=holes.length;i<il;i++)Array.prototype.push.apply(allpoints,holes[i]);i=0;for(il=allpoints.length;i<il;i++){var key=allpoints[i].x+":"+allpoints[i].y;void 0!==allPointsMap[key]&&console.warn("THREE.Shape: Duplicate point",key);allPointsMap[key]=i}i=function(contour,holes){function isCutLineInsideAngles(inShapeIdx,inHoleIdx){var lastShapeIdx=
shape.length-1,prevShapeIdx=inShapeIdx-1;0>prevShapeIdx&&(prevShapeIdx=lastShapeIdx);var nextShapeIdx=inShapeIdx+1;nextShapeIdx>lastShapeIdx&&(nextShapeIdx=0);lastShapeIdx=isPointInsideAngle(shape[inShapeIdx],shape[prevShapeIdx],shape[nextShapeIdx],hole[inHoleIdx]);if(!lastShapeIdx)return!1;lastShapeIdx=hole.length-1;prevShapeIdx=inHoleIdx-1;0>prevShapeIdx&&(prevShapeIdx=lastShapeIdx);nextShapeIdx=inHoleIdx+1;nextShapeIdx>lastShapeIdx&&(nextShapeIdx=0);return(lastShapeIdx=isPointInsideAngle(hole[inHoleIdx],
hole[prevShapeIdx],hole[nextShapeIdx],shape[inShapeIdx]))?!0:!1}function intersectsShapeEdge(inShapePt,inHolePt){var sIdx;for(sIdx=0;sIdx<shape.length;sIdx++){var nextIdx=sIdx+1;nextIdx%=shape.length;nextIdx=intersect_segments_2D(inShapePt,inHolePt,shape[sIdx],shape[nextIdx],!0);if(0<nextIdx.length)return!0}return!1}function intersectsHoleEdge(inShapePt,inHolePt){var ihIdx,hIdx;for(ihIdx=0;ihIdx<indepHoles.length;ihIdx++){var chkHole=holes[indepHoles[ihIdx]];for(hIdx=0;hIdx<chkHole.length;hIdx++){var nextIdx=
hIdx+1;nextIdx%=chkHole.length;nextIdx=intersect_segments_2D(inShapePt,inHolePt,chkHole[hIdx],chkHole[nextIdx],!0);if(0<nextIdx.length)return!0}}return!1}var shape=contour.concat(),indepHoles=[],holeIndex,shapeIndex;contour=[];var tmpHole1,h=0;for(holeIndex=holes.length;h<holeIndex;h++)indepHoles.push(h);var tmpShape1=0;for(var counter=2*indepHoles.length;0<indepHoles.length;){counter--;if(0>counter){console.log("Infinite Loop! Holes left:"+indepHoles.length+", Probably Hole outside Shape!");break}for(shapeIndex=
tmpShape1;shapeIndex<shape.length;shapeIndex++){var shapePt=shape[shapeIndex];holeIndex=-1;for(h=0;h<indepHoles.length;h++){var holePt=indepHoles[h];var cutKey=shapePt.x+":"+shapePt.y+":"+holePt;if(void 0===contour[cutKey]){var hole=holes[holePt];for(tmpHole1=0;tmpHole1<hole.length;tmpHole1++)if(holePt=hole[tmpHole1],isCutLineInsideAngles(shapeIndex,tmpHole1)&&!intersectsShapeEdge(shapePt,holePt)&&!intersectsHoleEdge(shapePt,holePt)){holeIndex=tmpHole1;indepHoles.splice(h,1);tmpShape1=shape.slice(0,
shapeIndex+1);holePt=shape.slice(shapeIndex);tmpHole1=hole.slice(holeIndex);var tmpHole2=hole.slice(0,holeIndex+1);shape=tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(holePt);tmpShape1=shapeIndex;break}if(0<=holeIndex)break;contour[cutKey]=!0}}if(0<=holeIndex)break}}return shape}(contour$jscomp$0,holes);allpoints=THREE.ShapeUtils.triangulate(i,!1);i=0;for(il=allpoints.length;i<il;i++)for(holes=allpoints[i],contour$jscomp$0=0;3>contour$jscomp$0;contour$jscomp$0++)key=holes[contour$jscomp$0].x+
":"+holes[contour$jscomp$0].y,key=allPointsMap[key],void 0!==key&&(holes[contour$jscomp$0]=key);return allpoints.concat()},isClockWise:function(pts){return 0>THREE.ShapeUtils.area(pts)},b2:function(){return function(t,p0,p1,p2){var k=1-t;return k*k*p0+2*(1-t)*t*p1+t*t*p2}}(),b3:function(){return function(t,p0,p1,p2,p3){var k=1-t,k$jscomp$0=1-t;return k*k*k*p0+3*k$jscomp$0*k$jscomp$0*t*p1+3*(1-t)*t*t*p2+t*t*t*p3}}()};THREE.Curve=function(){};THREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(t){console.warn("THREE.Curve: Warning, getPoint() not implemented!");
return null},getPointAt:function(u){u=this.getUtoTmapping(u);return this.getPoint(u)},getPoints:function(divisions){divisions||(divisions=5);var d,pts=[];for(d=0;d<=divisions;d++)pts.push(this.getPoint(d/divisions));return pts},getSpacedPoints:function(divisions){divisions||(divisions=5);var d,pts=[];for(d=0;d<=divisions;d++)pts.push(this.getPointAt(d/divisions));return pts},getLength:function(){var lengths=this.getLengths();return lengths[lengths.length-1]},getLengths:function(divisions){divisions||
(divisions=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var cache=[],last=this.getPoint(0),p,sum=0;cache.push(0);for(p=1;p<=divisions;p++){var current=this.getPoint(p/divisions);sum+=current.distanceTo(last);cache.push(sum);last=current}return this.cacheArcLengths=cache},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(u,
distance){var arcLengths=this.getLengths(),il=arcLengths.length;distance=distance?distance:u*arcLengths[il-1];for(var low=0,high=il-1,comparison;low<=high;)if(u=Math.floor(low+(high-low)/2),comparison=arcLengths[u]-distance,0>comparison)low=u+1;else if(0<comparison)high=u-1;else{high=u;break}u=high;if(arcLengths[u]===distance)return u/(il-1);low=arcLengths[u];return(u+(distance-low)/(arcLengths[u+1]-low))/(il-1)},getTangent:function(t){var t1=t-1E-4;t+=1E-4;0>t1&&(t1=0);1<t&&(t=1);t1=this.getPoint(t1);
return this.getPoint(t).clone().sub(t1).normalize()},getTangentAt:function(u){u=this.getUtoTmapping(u);return this.getTangent(u)}};THREE.Curve.create=function(constructor,getPointFunc){constructor.prototype=Object.create(THREE.Curve.prototype);constructor.prototype.constructor=constructor;constructor.prototype.getPoint=getPointFunc;return constructor};THREE.CurvePath=function(){this.curves=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.assign(Object.create(THREE.Curve.prototype),{constructor:THREE.CurvePath,
add:function(curve){this.curves.push(curve)},closePath:function(){var startPoint=this.curves[0].getPoint(0),endPoint=this.curves[this.curves.length-1].getPoint(1);startPoint.equals(endPoint)||this.curves.push(new THREE.LineCurve(endPoint,startPoint))},getPoint:function(t){for(var d=t*this.getLength(),curveLengths=this.getCurveLengths(),i=0;i<curveLengths.length;){if(curveLengths[i]>=d)return t=this.curves[i],d=1-(curveLengths[i]-d)/t.getLength(),t.getPointAt(d);i++}return null},getLength:function(){var lens=
this.getCurveLengths();return lens[lens.length-1]},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var lengths=[],sums=0,i=0,l=this.curves.length;i<l;i++)sums+=this.curves[i].getLength(),lengths.push(sums);return this.cacheLengths=lengths},createPointsGeometry:function(divisions){divisions=this.getPoints(divisions);return this.createGeometry(divisions)},createSpacedPointsGeometry:function(divisions){divisions=this.getSpacedPoints(divisions);
return this.createGeometry(divisions)},createGeometry:function(points){for(var geometry=new THREE.Geometry,i=0,l=points.length;i<l;i++){var point=points[i];geometry.vertices.push(new THREE.Vector3(point.x,point.y,point.z||0))}return geometry}});THREE.Font=function(data){this.data=data};Object.assign(THREE.Font.prototype,{generateShapes:function(text,size,divisions){void 0===size&&(size=100);void 0===divisions&&(divisions=4);var data=this.data;text=String(text).split("");var scale=size/data.resolution,
offset=0;size=[];for(var i=0;i<text.length;i++){var laste;var ret=scale;var offset$jscomp$0=offset,glyph=data.glyphs[text[i]]||data.glyphs["?"];if(glyph){var path=new THREE.Path,pts=[],b2=THREE.ShapeUtils.b2,b3=THREE.ShapeUtils.b3;if(glyph.o)for(var outline=glyph._cachedOutline||(glyph._cachedOutline=glyph.o.split(" ")),i$jscomp$0=0,l=outline.length;i$jscomp$0<l;)switch(outline[i$jscomp$0++]){case "m":var cpx2=outline[i$jscomp$0++]*ret+offset$jscomp$0;var cpy2=outline[i$jscomp$0++]*ret;path.moveTo(cpx2,
cpy2);break;case "l":cpx2=outline[i$jscomp$0++]*ret+offset$jscomp$0;cpy2=outline[i$jscomp$0++]*ret;path.lineTo(cpx2,cpy2);break;case "q":var cpx=outline[i$jscomp$0++]*ret+offset$jscomp$0;var cpy=outline[i$jscomp$0++]*ret;var cpx1=outline[i$jscomp$0++]*ret+offset$jscomp$0;var cpy1=outline[i$jscomp$0++]*ret;path.quadraticCurveTo(cpx1,cpy1,cpx,cpy);if(laste=pts[pts.length-1]){var cpx0=laste.x;laste=laste.y;for(var i2=1;i2<=divisions;i2++){var t=i2/divisions;b2(t,cpx0,cpx1,cpx);b2(t,laste,cpy1,cpy)}}break;
case "b":if(cpx=outline[i$jscomp$0++]*ret+offset$jscomp$0,cpy=outline[i$jscomp$0++]*ret,cpx1=outline[i$jscomp$0++]*ret+offset$jscomp$0,cpy1=outline[i$jscomp$0++]*ret,cpx2=outline[i$jscomp$0++]*ret+offset$jscomp$0,cpy2=outline[i$jscomp$0++]*ret,path.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,cpx,cpy),laste=pts[pts.length-1])for(cpx0=laste.x,laste=laste.y,i2=1;i2<=divisions;i2++)t=i2/divisions,b3(t,cpx0,cpx1,cpx2,cpx),b3(t,laste,cpy1,cpy2,cpy)}ret={offset:glyph.ha*ret,path:path}}else ret=void 0;offset+=ret.offset;
size.push(ret.path)}divisions=[];data=0;for(text=size.length;data<text;data++)Array.prototype.push.apply(divisions,size[data].toShapes());return divisions}});THREE.Path=function(points){THREE.CurvePath.call(this);this.actions=[];points&&this.fromPoints(points)};THREE.Path.prototype=Object.assign(Object.create(THREE.CurvePath.prototype),{constructor:THREE.Path,fromPoints:function(vectors){this.moveTo(vectors[0].x,vectors[0].y);for(var i=1,l=vectors.length;i<l;i++)this.lineTo(vectors[i].x,vectors[i].y)},
moveTo:function(x,y){this.actions.push({action:"moveTo",args:[x,y]})},lineTo:function(x,y){var lastargs=this.actions[this.actions.length-1].args;lastargs=new THREE.LineCurve(new THREE.Vector2(lastargs[lastargs.length-2],lastargs[lastargs.length-1]),new THREE.Vector2(x,y));this.curves.push(lastargs);this.actions.push({action:"lineTo",args:[x,y]})},quadraticCurveTo:function(aCPx,aCPy,aX,aY){var lastargs=this.actions[this.actions.length-1].args;lastargs=new THREE.QuadraticBezierCurve(new THREE.Vector2(lastargs[lastargs.length-
2],lastargs[lastargs.length-1]),new THREE.Vector2(aCPx,aCPy),new THREE.Vector2(aX,aY));this.curves.push(lastargs);this.actions.push({action:"quadraticCurveTo",args:[aCPx,aCPy,aX,aY]})},bezierCurveTo:function(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var lastargs=this.actions[this.actions.length-1].args;lastargs=new THREE.CubicBezierCurve(new THREE.Vector2(lastargs[lastargs.length-2],lastargs[lastargs.length-1]),new THREE.Vector2(aCP1x,aCP1y),new THREE.Vector2(aCP2x,aCP2y),new THREE.Vector2(aX,aY));this.curves.push(lastargs);
this.actions.push({action:"bezierCurveTo",args:[aCP1x,aCP1y,aCP2x,aCP2y,aX,aY]})},splineThru:function(pts){var args=Array.prototype.slice.call(arguments),lastargs=this.actions[this.actions.length-1].args;lastargs=[new THREE.Vector2(lastargs[lastargs.length-2],lastargs[lastargs.length-1])];Array.prototype.push.apply(lastargs,pts);lastargs=new THREE.SplineCurve(lastargs);this.curves.push(lastargs);this.actions.push({action:"splineThru",args:args})},arc:function(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var lastargs=
this.actions[this.actions.length-1].args;this.absarc(aX+lastargs[lastargs.length-2],aY+lastargs[lastargs.length-1],aRadius,aStartAngle,aEndAngle,aClockwise)},absarc:function(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise)},ellipse:function(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var lastargs=this.actions[this.actions.length-1].args;this.absellipse(aX+lastargs[lastargs.length-2],aY+lastargs[lastargs.length-
1],xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation)},absellipse:function(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var args=[aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation||0];aX=new THREE.EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);this.curves.push(aX);aX=aX.getPoint(1);args.push(aX.x);args.push(aX.y);this.actions.push({action:"ellipse",args:args})},getSpacedPoints:function(divisions){divisions||(divisions=40);
for(var points=[],i=0;i<divisions;i++)points.push(this.getPoint(i/divisions));this.autoClose&&points.push(points[0]);return points},getPoints:function(divisions){divisions=divisions||12;for(var b2=THREE.ShapeUtils.b2,b3=THREE.ShapeUtils.b3,points=[],cpx,cpy,cpx2,cpy2,cpx1,cpy1,cpx0,cpy0,laste,ty,i=0,l=this.actions.length;i<l;i++){laste=this.actions[i];var args=laste.args;switch(laste.action){case "moveTo":points.push(new THREE.Vector2(args[0],args[1]));break;case "lineTo":points.push(new THREE.Vector2(args[0],
args[1]));break;case "quadraticCurveTo":cpx=args[2];cpy=args[3];cpx1=args[0];cpy1=args[1];0<points.length?(laste=points[points.length-1],cpx0=laste.x,cpy0=laste.y):(laste=this.actions[i-1].args,cpx0=laste[laste.length-2],cpy0=laste[laste.length-1]);for(args=1;args<=divisions;args++)ty=args/divisions,laste=b2(ty,cpx0,cpx1,cpx),ty=b2(ty,cpy0,cpy1,cpy),points.push(new THREE.Vector2(laste,ty));break;case "bezierCurveTo":cpx=args[4];cpy=args[5];cpx1=args[0];cpy1=args[1];cpx2=args[2];cpy2=args[3];0<points.length?
(laste=points[points.length-1],cpx0=laste.x,cpy0=laste.y):(laste=this.actions[i-1].args,cpx0=laste[laste.length-2],cpy0=laste[laste.length-1]);for(args=1;args<=divisions;args++)ty=args/divisions,laste=b3(ty,cpx0,cpx1,cpx2,cpx),ty=b3(ty,cpy0,cpy1,cpy2,cpy),points.push(new THREE.Vector2(laste,ty));break;case "splineThru":laste=this.actions[i-1].args;ty=[new THREE.Vector2(laste[laste.length-2],laste[laste.length-1])];laste=divisions*args[0].length;ty=ty.concat(args[0]);ty=new THREE.SplineCurve(ty);for(args=
1;args<=laste;args++)points.push(ty.getPointAt(args/laste));break;case "arc":cpx=args[0];cpy=args[1];cpy1=args[2];cpx2=args[3];laste=args[4];cpx1=!!args[5];cpx0=laste-cpx2;cpy0=2*divisions;for(args=1;args<=cpy0;args++)ty=args/cpy0,cpx1||(ty=1-ty),ty=cpx2+ty*cpx0,laste=cpx+cpy1*Math.cos(ty),ty=cpy+cpy1*Math.sin(ty),points.push(new THREE.Vector2(laste,ty));break;case "ellipse":cpx=args[0];cpy=args[1];cpy1=args[2];cpy2=args[3];cpx2=args[4];laste=args[5];cpx1=!!args[6];var aRotation=args[7];cpx0=laste-
cpx2;cpy0=2*divisions;if(0!==aRotation){var cos=Math.cos(aRotation);var sin=Math.sin(aRotation)}for(args=1;args<=cpy0;args++){ty=args/cpy0;cpx1||(ty=1-ty);ty=cpx2+ty*cpx0;laste=cpx+cpy1*Math.cos(ty);ty=cpy+cpy2*Math.sin(ty);if(0!==aRotation){var x=laste;laste=(x-cpx)*cos-(ty-cpy)*sin+cpx;ty=(x-cpx)*sin+(ty-cpy)*cos+cpy}points.push(new THREE.Vector2(laste,ty))}}}divisions=points[points.length-1];Math.abs(divisions.x-points[0].x)<Number.EPSILON&&Math.abs(divisions.y-points[0].y)<Number.EPSILON&&points.splice(points.length-
1,1);this.autoClose&&points.push(points[0]);return points},toShapes:function(isCCW,noHoles){function toShapesNoHoles(inSubpaths){for(var shapes=[],i=0,l=inSubpaths.length;i<l;i++){var tmpPath=inSubpaths[i],tmpShape=new THREE.Shape;tmpShape.actions=tmpPath.actions;tmpShape.curves=tmpPath.curves;shapes.push(tmpShape)}return shapes}function isPointInsidePolygon(inPt,inPolygon){for(var polyLen=inPolygon.length,inside=!1,p=polyLen-1,q=0;q<polyLen;p=q++){var edgeLowPt=inPolygon[p],edgeHighPt=inPolygon[q],
edgeDx=edgeHighPt.x-edgeLowPt.x,edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){if(0>edgeDy&&(edgeLowPt=inPolygon[q],edgeDx=-edgeDx,edgeHighPt=inPolygon[p],edgeDy=-edgeDy),!(inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y))if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return!0}else{p=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(0===p)return!0;0>p||(inside=!inside)}}else if(inPt.y===edgeLowPt.y&&(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x))return!0}return inside}
var isClockWise=THREE.ShapeUtils.isClockWise,subPaths=function(inActions){for(var subPaths=[],lastPath=new THREE.Path,i=0,l=inActions.length;i<l;i++){var item=inActions[i],args=item.args;item=item.action;"moveTo"===item&&0!==lastPath.actions.length&&(subPaths.push(lastPath),lastPath=new THREE.Path);lastPath[item].apply(lastPath,args)}0!==lastPath.actions.length&&subPaths.push(lastPath);return subPaths}(this.actions);if(0===subPaths.length)return[];if(!0===noHoles)return toShapesNoHoles(subPaths);
noHoles=[];if(1===subPaths.length){var tmpPath=subPaths[0];var tmpShape=new THREE.Shape;tmpShape.actions=tmpPath.actions;tmpShape.curves=tmpPath.curves;noHoles.push(tmpShape);return noHoles}var holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;tmpShape=[];var newShapes=[],newShapeHoles=[],mainIdx=0;newShapes[mainIdx]=void 0;newShapeHoles[mainIdx]=[];for(var i$jscomp$0=0,l$jscomp$0=subPaths.length;i$jscomp$0<l$jscomp$0;i$jscomp$0++){tmpPath=subPaths[i$jscomp$0];
var tmpPoints=tmpPath.getPoints();var solid=isClockWise(tmpPoints);(solid=isCCW?!solid:solid)?(!holesFirst&&newShapes[mainIdx]&&mainIdx++,newShapes[mainIdx]={s:new THREE.Shape,p:tmpPoints},newShapes[mainIdx].s.actions=tmpPath.actions,newShapes[mainIdx].s.curves=tmpPath.curves,holesFirst&&mainIdx++,newShapeHoles[mainIdx]=[]):newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]})}if(!newShapes[0])return toShapesNoHoles(subPaths);if(1<newShapes.length){i$jscomp$0=!1;isCCW=[];isClockWise=0;for(subPaths=
newShapes.length;isClockWise<subPaths;isClockWise++)tmpShape[isClockWise]=[];isClockWise=0;for(subPaths=newShapes.length;isClockWise<subPaths;isClockWise++)for(tmpPath=newShapeHoles[isClockWise],solid=0;solid<tmpPath.length;solid++){holesFirst=tmpPath[solid];mainIdx=!0;for(tmpPoints=0;tmpPoints<newShapes.length;tmpPoints++)isPointInsidePolygon(holesFirst.p,newShapes[tmpPoints].p)&&(isClockWise!==tmpPoints&&isCCW.push({froms:isClockWise,tos:tmpPoints,hole:solid}),mainIdx?(mainIdx=!1,tmpShape[tmpPoints].push(holesFirst)):
i$jscomp$0=!0);mainIdx&&tmpShape[isClockWise].push(holesFirst)}0<isCCW.length&&(i$jscomp$0||(newShapeHoles=tmpShape))}i$jscomp$0=0;for(isClockWise=newShapes.length;i$jscomp$0<isClockWise;i$jscomp$0++)for(tmpShape=newShapes[i$jscomp$0].s,noHoles.push(tmpShape),isCCW=newShapeHoles[i$jscomp$0],subPaths=0,tmpPath=isCCW.length;subPaths<tmpPath;subPaths++)tmpShape.holes.push(isCCW[subPaths].h);return noHoles}});THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=
Object.assign(Object.create(THREE.Path.prototype),{constructor:THREE.Shape,extrude:function(options){return new THREE.ExtrudeGeometry(this,options)},makeGeometry:function(options){return new THREE.ShapeGeometry(this,options)},getPointsHoles:function(divisions){for(var holesPts=[],i=0,l=this.holes.length;i<l;i++)holesPts[i]=this.holes[i].getPoints(divisions);return holesPts},extractAllPoints:function(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)}},extractPoints:function(divisions){return this.extractAllPoints(divisions)}});
THREE.LineCurve=function(v1,v2){this.v1=v1;this.v2=v2};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(t){var point=this.v2.clone().sub(this.v1);point.multiplyScalar(t).add(this.v1);return point};THREE.LineCurve.prototype.getPointAt=function(u){return this.getPoint(u)};THREE.LineCurve.prototype.getTangent=function(t){return this.v2.clone().sub(this.v1).normalize()};THREE.QuadraticBezierCurve=
function(v0,v1,v2){this.v0=v0;this.v1=v1;this.v2=v2};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;THREE.QuadraticBezierCurve.prototype.getPoint=function(t){var b2=THREE.ShapeUtils.b2;return new THREE.Vector2(b2(t,this.v0.x,this.v1.x,this.v2.x),b2(t,this.v0.y,this.v1.y,this.v2.y))};THREE.QuadraticBezierCurve.prototype.getTangent=function(t){var tangentQuadraticBezier=THREE.CurveUtils.tangentQuadraticBezier;
return(new THREE.Vector2(tangentQuadraticBezier(t,this.v0.x,this.v1.x,this.v2.x),tangentQuadraticBezier(t,this.v0.y,this.v1.y,this.v2.y))).normalize()};THREE.CubicBezierCurve=function(v0,v1,v2,v3){this.v0=v0;this.v1=v1;this.v2=v2;this.v3=v3};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;THREE.CubicBezierCurve.prototype.getPoint=function(t){var b3=THREE.ShapeUtils.b3;return new THREE.Vector2(b3(t,this.v0.x,
this.v1.x,this.v2.x,this.v3.x),b3(t,this.v0.y,this.v1.y,this.v2.y,this.v3.y))};THREE.CubicBezierCurve.prototype.getTangent=function(t){var tangentCubicBezier=THREE.CurveUtils.tangentCubicBezier;return(new THREE.Vector2(tangentCubicBezier(t,this.v0.x,this.v1.x,this.v2.x,this.v3.x),tangentCubicBezier(t,this.v0.y,this.v1.y,this.v2.y,this.v3.y))).normalize()};THREE.SplineCurve=function(points){this.points=void 0==points?[]:points};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor=
THREE.SplineCurve;THREE.SplineCurve.prototype.getPoint=function(t){var points=this.points;t*=points.length-1;var intPoint=Math.floor(t);t-=intPoint;var point0=points[0===intPoint?intPoint:intPoint-1],point1=points[intPoint],point2=points[intPoint>points.length-2?points.length-1:intPoint+1];points=points[intPoint>points.length-3?points.length-1:intPoint+2];intPoint=THREE.CurveUtils.interpolate;return new THREE.Vector2(intPoint(point0.x,point1.x,point2.x,points.x,t),intPoint(point0.y,point1.y,point2.y,
points.y,t))};THREE.EllipseCurve=function(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){this.aX=aX;this.aY=aY;this.xRadius=xRadius;this.yRadius=yRadius;this.aStartAngle=aStartAngle;this.aEndAngle=aEndAngle;this.aClockwise=aClockwise;this.aRotation=aRotation||0};THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve;THREE.EllipseCurve.prototype.getPoint=function(t){var deltaAngle=this.aEndAngle-this.aStartAngle;
0>deltaAngle&&(deltaAngle+=2*Math.PI);deltaAngle>2*Math.PI&&(deltaAngle-=2*Math.PI);deltaAngle=!0===this.aClockwise?this.aEndAngle+(1-t)*(2*Math.PI-deltaAngle):this.aStartAngle+t*deltaAngle;t=this.aX+this.xRadius*Math.cos(deltaAngle);var y=this.aY+this.yRadius*Math.sin(deltaAngle);if(0!==this.aRotation){deltaAngle=Math.cos(this.aRotation);var sin=Math.sin(this.aRotation),tx=t;t=(tx-this.aX)*deltaAngle-(y-this.aY)*sin+this.aX;y=(tx-this.aX)*sin+(y-this.aY)*deltaAngle+this.aY}return new THREE.Vector2(t,
y)};THREE.ArcCurve=function(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){THREE.EllipseCurve.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.LineCurve3=THREE.Curve.create(function(v1,v2){this.v1=v1;this.v2=v2},function(t){var vector=new THREE.Vector3;vector.subVectors(this.v2,this.v1);vector.multiplyScalar(t);vector.add(this.v1);return vector});THREE.QuadraticBezierCurve3=
THREE.Curve.create(function(v0,v1,v2){this.v0=v0;this.v1=v1;this.v2=v2},function(t){var b2=THREE.ShapeUtils.b2;return new THREE.Vector3(b2(t,this.v0.x,this.v1.x,this.v2.x),b2(t,this.v0.y,this.v1.y,this.v2.y),b2(t,this.v0.z,this.v1.z,this.v2.z))});THREE.CubicBezierCurve3=THREE.Curve.create(function(v0,v1,v2,v3){this.v0=v0;this.v1=v1;this.v2=v2;this.v3=v3},function(t){var b3=THREE.ShapeUtils.b3;return new THREE.Vector3(b3(t,this.v0.x,this.v1.x,this.v2.x,this.v3.x),b3(t,this.v0.y,this.v1.y,this.v2.y,
this.v3.y),b3(t,this.v0.z,this.v1.z,this.v2.z,this.v3.z))});THREE.SplineCurve3=THREE.Curve.create(function(points){console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3");this.points=void 0==points?[]:points},function(t){var points=this.points;t*=points.length-1;var intPoint=Math.floor(t);t-=intPoint;var point0=points[0==intPoint?intPoint:intPoint-1],point1=points[intPoint],point2=points[intPoint>points.length-2?points.length-1:intPoint+1];points=points[intPoint>points.length-
3?points.length-1:intPoint+2];intPoint=THREE.CurveUtils.interpolate;return new THREE.Vector3(intPoint(point0.x,point1.x,point2.x,points.x,t),intPoint(point0.y,point1.y,point2.y,points.y,t),intPoint(point0.z,point1.z,point2.z,points.z,t))});THREE.CatmullRomCurve3=function(){function CubicPoly(){}var tmp=new THREE.Vector3,px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly;CubicPoly.prototype.init=function(x0,x1,t0,t1){this.c0=x0;this.c1=t0;this.c2=-3*x0+3*x1-2*t0-t1;this.c3=2*x0-2*x1+t0+t1};CubicPoly.prototype.initNonuniformCatmullRom=
function(x0,x1,x2,x3,dt0,dt1,dt2){this.init(x1,x2,((x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1)*dt1,((x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2)*dt1)};CubicPoly.prototype.initCatmullRom=function(x0,x1,x2,x3,tension){this.init(x1,x2,tension*(x2-x0),tension*(x3-x1))};CubicPoly.prototype.calc=function(t){var t2=t*t;return this.c0+this.c1*t+this.c2*t2+this.c3*t2*t};return THREE.Curve.create(function(p){this.points=p||[];this.closed=!1},function(t){var points=this.points;var l=points.length;2>l&&console.log("duh, you need at least 2 points");
t*=l-(this.closed?0:1);var intPoint=Math.floor(t);t-=intPoint;this.closed?intPoint+=0<intPoint?0:(Math.floor(Math.abs(intPoint)/points.length)+1)*points.length:0===t&&intPoint===l-1&&(intPoint=l-2,t=1);if(this.closed||0<intPoint)var p0=points[(intPoint-1)%l];else tmp.subVectors(points[0],points[1]).add(points[0]),p0=tmp;var p1=points[intPoint%l];var p2=points[(intPoint+1)%l];this.closed||intPoint+2<l?points=points[(intPoint+2)%l]:(tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]),points=tmp);
if(void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var pow="chordal"===this.type?.5:.25;l=Math.pow(p0.distanceToSquared(p1),pow);intPoint=Math.pow(p1.distanceToSquared(p2),pow);pow=Math.pow(p2.distanceToSquared(points),pow);1E-4>intPoint&&(intPoint=1);1E-4>l&&(l=intPoint);1E-4>pow&&(pow=intPoint);px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,points.x,l,intPoint,pow);py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,points.y,l,intPoint,pow);pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,points.z,
l,intPoint,pow)}else"catmullrom"===this.type&&(l=void 0!==this.tension?this.tension:.5,px.initCatmullRom(p0.x,p1.x,p2.x,points.x,l),py.initCatmullRom(p0.y,p1.y,p2.y,points.y,l),pz.initCatmullRom(p0.z,p1.z,p2.z,points.z,l));return new THREE.Vector3(px.calc(t),py.calc(t),pz.calc(t))})}();THREE.ClosedSplineCurve3=function(points){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.");THREE.CatmullRomCurve3.call(this,points);this.type="catmullrom";this.closed=
!0};THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype);THREE.BoxGeometry=function(width,height,depth,widthSegments,heightSegments,depthSegments){THREE.Geometry.call(this);this.type="BoxGeometry";this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};this.fromBufferGeometry(new THREE.BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments));this.mergeVertices()};
THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry;THREE.CubeGeometry=THREE.BoxGeometry;THREE.BoxBufferGeometry=function(width$jscomp$0,height$jscomp$0,depth$jscomp$0,widthSegments,heightSegments,depthSegments){function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var segmentWidth=width/gridX,segmentHeight=height/gridY,widthHalf=width/2,heightHalf=height/2,depthHalf=depth/2;height=gridX+1;for(var gridY1=
gridY+1,groupCount=width=0,vector=new THREE.Vector3,iy=0;iy<gridY1;iy++)for(var y=iy*segmentHeight-heightHalf,ix=0;ix<height;ix++)vector[u]=(ix*segmentWidth-widthHalf)*udir,vector[v]=y*vdir,vector[w]=depthHalf,vertices[vertexBufferOffset]=vector.x,vertices[vertexBufferOffset+1]=vector.y,vertices[vertexBufferOffset+2]=vector.z,vector[u]=0,vector[v]=0,vector[w]=0<depth?1:-1,normals[vertexBufferOffset]=vector.x,normals[vertexBufferOffset+1]=vector.y,normals[vertexBufferOffset+2]=vector.z,uvs[uvBufferOffset]=
ix/gridX,uvs[uvBufferOffset+1]=1-iy/gridY,vertexBufferOffset+=3,uvBufferOffset+=2,width+=1;for(iy=0;iy<gridY;iy++)for(ix=0;ix<gridX;ix++)u=numberOfVertices+ix+height*(iy+1),v=numberOfVertices+(ix+1)+height*(iy+1),w=numberOfVertices+(ix+1)+height*iy,indices[indexBufferOffset]=numberOfVertices+ix+height*iy,indices[indexBufferOffset+1]=u,indices[indexBufferOffset+2]=w,indices[indexBufferOffset+3]=u,indices[indexBufferOffset+4]=v,indices[indexBufferOffset+5]=w,indexBufferOffset+=6,groupCount+=6;scope.addGroup(groupStart,
groupCount,materialIndex);groupStart+=groupCount;numberOfVertices+=width}THREE.BufferGeometry.call(this);this.type="BoxBufferGeometry";this.parameters={width:width$jscomp$0,height:height$jscomp$0,depth:depth$jscomp$0,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=this;widthSegments=Math.floor(widthSegments)||1;heightSegments=Math.floor(heightSegments)||1;depthSegments=Math.floor(depthSegments)||1;var vertexCount=function(w,h,d){return w=(w+1)*(h+1)*
2+(w+1)*(d+1)*2+(d+1)*(h+1)*2}(widthSegments,heightSegments,depthSegments),indexCount=function(w,h,d){w=w*h*2+w*d*2+d*h*2;return 6*w}(widthSegments,heightSegments,depthSegments),indices=new (65535<indexCount?Uint32Array:Uint16Array)(indexCount),vertices=new Float32Array(3*vertexCount),normals=new Float32Array(3*vertexCount),uvs=new Float32Array(2*vertexCount),vertexBufferOffset=0,uvBufferOffset=0,indexBufferOffset=0,numberOfVertices=0,groupStart=0;buildPlane("z","y","x",-1,-1,depth$jscomp$0,height$jscomp$0,
width$jscomp$0,depthSegments,heightSegments,0);buildPlane("z","y","x",1,-1,depth$jscomp$0,height$jscomp$0,-width$jscomp$0,depthSegments,heightSegments,1);buildPlane("x","z","y",1,1,width$jscomp$0,depth$jscomp$0,height$jscomp$0,widthSegments,depthSegments,2);buildPlane("x","z","y",1,-1,width$jscomp$0,depth$jscomp$0,-height$jscomp$0,widthSegments,depthSegments,3);buildPlane("x","y","z",1,-1,width$jscomp$0,height$jscomp$0,depth$jscomp$0,widthSegments,heightSegments,4);buildPlane("x","y","z",-1,-1,width$jscomp$0,
height$jscomp$0,-depth$jscomp$0,widthSegments,heightSegments,5);this.setIndex(new THREE.BufferAttribute(indices,1));this.addAttribute("position",new THREE.BufferAttribute(vertices,3));this.addAttribute("normal",new THREE.BufferAttribute(normals,3));this.addAttribute("uv",new THREE.BufferAttribute(uvs,2))};THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry;THREE.CircleGeometry=function(radius,segments,
thetaStart,thetaLength){THREE.Geometry.call(this);this.type="CircleGeometry";this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new THREE.CircleBufferGeometry(radius,segments,thetaStart,thetaLength))};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry;THREE.CircleBufferGeometry=function(radius,segments,thetaStart,thetaLength){THREE.BufferGeometry.call(this);
this.type="CircleBufferGeometry";this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||50;segments=void 0!==segments?Math.max(3,segments):8;thetaStart=void 0!==thetaStart?thetaStart:0;thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI;var vertices=segments+2,positions=new Float32Array(3*vertices),normals=new Float32Array(3*vertices);vertices=new Float32Array(2*vertices);normals[2]=1;vertices[0]=.5;vertices[1]=.5;for(var s=0,i=3,ii=2;s<=
segments;s++,i+=3,ii+=2){var segment=thetaStart+s/segments*thetaLength;positions[i]=radius*Math.cos(segment);positions[i+1]=radius*Math.sin(segment);normals[i+2]=1;vertices[ii]=(positions[i]/radius+1)/2;vertices[ii+1]=(positions[i+1]/radius+1)/2}thetaStart=[];for(i=1;i<=segments;i++)thetaStart.push(i,i+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(thetaStart),1));this.addAttribute("position",new THREE.BufferAttribute(positions,3));this.addAttribute("normal",new THREE.BufferAttribute(normals,
3));this.addAttribute("uv",new THREE.BufferAttribute(vertices,2));this.boundingSphere=new THREE.Sphere(new THREE.Vector3,radius)};THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry;THREE.CylinderBufferGeometry=function(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){function generateCap(top){var x,uv=new THREE.Vector2,vertex=new THREE.Vector3,groupCount=
0,radius=!0===top?radiusTop:radiusBottom,sign=!0===top?1:-1;var centerIndexStart=index;for(x=1;x<=radialSegments;x++)vertices.setXYZ(index,0,halfHeight*sign,0),normals.setXYZ(index,0,sign,0),uv.x=.5,uv.y=.5,uvs.setXY(index,uv.x,uv.y),index++;var centerIndexEnd=index;for(x=0;x<=radialSegments;x++){var theta=x/radialSegments*thetaLength+thetaStart,cosTheta=Math.cos(theta);theta=Math.sin(theta);vertex.x=radius*theta;vertex.y=halfHeight*sign;vertex.z=radius*cosTheta;vertices.setXYZ(index,vertex.x,vertex.y,
vertex.z);normals.setXYZ(index,0,sign,0);uv.x=.5*cosTheta+.5;uv.y=.5*theta*sign+.5;uvs.setXY(index,uv.x,uv.y);index++}for(x=0;x<radialSegments;x++)uv=centerIndexStart+x,vertex=centerIndexEnd+x,!0===top?(indices.setX(indexOffset,vertex),indexOffset++,indices.setX(indexOffset,vertex+1)):(indices.setX(indexOffset,vertex+1),indexOffset++,indices.setX(indexOffset,vertex)),indexOffset++,indices.setX(indexOffset,uv),indexOffset++,groupCount+=3;scope.addGroup(groupStart,groupCount,!0===top?1:2);groupStart+=
groupCount}THREE.BufferGeometry.call(this);this.type="CylinderBufferGeometry";this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};var scope=this;radiusTop=void 0!==radiusTop?radiusTop:20;radiusBottom=void 0!==radiusBottom?radiusBottom:20;height=void 0!==height?height:100;radialSegments=Math.floor(radialSegments)||8;heightSegments=Math.floor(heightSegments)||
1;openEnded=void 0!==openEnded?openEnded:!1;thetaStart=void 0!==thetaStart?thetaStart:0;thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI;var nbCap=0;!1===openEnded&&(0<radiusTop&&nbCap++,0<radiusBottom&&nbCap++);var vertexCount=function(){var count=(radialSegments+1)*(heightSegments+1);!1===openEnded&&(count+=(radialSegments+1)*nbCap+radialSegments*nbCap);return count}(),indexCount=function(){var count=radialSegments*heightSegments*6;!1===openEnded&&(count+=radialSegments*nbCap*3);return count}(),
indices=new THREE.BufferAttribute(new (65535<indexCount?Uint32Array:Uint16Array)(indexCount),1),vertices=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),normals=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),uvs=new THREE.BufferAttribute(new Float32Array(2*vertexCount),2),index=0,indexOffset=0,indexArray=[],halfHeight=height/2,groupStart=0;(function(){var x,y,normal=new THREE.Vector3,vertex=new THREE.Vector3,groupCount=0,tanTheta=(radiusBottom-radiusTop)/height;for(y=0;y<=
heightSegments;y++){var indexRow=[],v=y/heightSegments,radius=v*(radiusBottom-radiusTop)+radiusTop;for(x=0;x<=radialSegments;x++){var u=x/radialSegments;vertex.x=radius*Math.sin(u*thetaLength+thetaStart);vertex.y=-v*height+halfHeight;vertex.z=radius*Math.cos(u*thetaLength+thetaStart);vertices.setXYZ(index,vertex.x,vertex.y,vertex.z);normal.copy(vertex);if(0===radiusTop&&0===y||0===radiusBottom&&y===heightSegments)normal.x=Math.sin(u*thetaLength+thetaStart),normal.z=Math.cos(u*thetaLength+thetaStart);
normal.setY(Math.sqrt(normal.x*normal.x+normal.z*normal.z)*tanTheta).normalize();normals.setXYZ(index,normal.x,normal.y,normal.z);uvs.setXY(index,u,1-v);indexRow.push(index);index++}indexArray.push(indexRow)}for(x=0;x<radialSegments;x++)for(y=0;y<heightSegments;y++)normal=indexArray[y+1][x],vertex=indexArray[y+1][x+1],tanTheta=indexArray[y][x+1],indices.setX(indexOffset,indexArray[y][x]),indexOffset++,indices.setX(indexOffset,normal),indexOffset++,indices.setX(indexOffset,tanTheta),indexOffset++,
indices.setX(indexOffset,normal),indexOffset++,indices.setX(indexOffset,vertex),indexOffset++,indices.setX(indexOffset,tanTheta),indexOffset++,groupCount+=6;scope.addGroup(groupStart,groupCount,0);groupStart+=groupCount})();!1===openEnded&&(0<radiusTop&&generateCap(!0),0<radiusBottom&&generateCap(!1));this.setIndex(indices);this.addAttribute("position",vertices);this.addAttribute("normal",normals);this.addAttribute("uv",uvs)};THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);
THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry;THREE.CylinderGeometry=function(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){THREE.Geometry.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new THREE.CylinderBufferGeometry(radiusTop,
radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength));this.mergeVertices()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;THREE.ConeBufferGeometry=function(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){THREE.CylinderBufferGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength);this.type="ConeBufferGeometry";
this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,thetaStart:thetaStart,thetaLength:thetaLength}};THREE.ConeBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.ConeBufferGeometry.prototype.constructor=THREE.ConeBufferGeometry;THREE.ConeGeometry=function(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){THREE.CylinderGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,
thetaStart,thetaLength);this.type="ConeGeometry";this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength}};THREE.ConeGeometry.prototype=Object.create(THREE.CylinderGeometry.prototype);THREE.ConeGeometry.prototype.constructor=THREE.ConeGeometry;THREE.EdgesGeometry=function(geometry,thresholdAngle){function sortFunction(a,b){return a-b}THREE.BufferGeometry.call(this);thresholdAngle=Math.cos(THREE.Math.DEG2RAD*
(void 0!==thresholdAngle?thresholdAngle:1));var edge=[0,0],hash={},keys=["a","b","c"];if(geometry instanceof THREE.BufferGeometry){var geometry2=new THREE.Geometry;geometry2.fromBufferGeometry(geometry)}else geometry2=geometry.clone();geometry2.mergeVertices();geometry2.computeFaceNormals();geometry=geometry2.vertices;geometry2=geometry2.faces;for(var i=0,l=geometry2.length;i<l;i++)for(var face=geometry2[i],j=0;3>j;j++){edge[0]=face[keys[j]];edge[1]=face[keys[(j+1)%3]];edge.sort(sortFunction);var key=
edge.toString();void 0===hash[key]?hash[key]={vert1:edge[0],vert2:edge[1],face1:i,face2:void 0}:hash[key].face2=i}edge=[];for(key in hash)if(keys=hash[key],void 0===keys.face2||geometry2[keys.face1].normal.dot(geometry2[keys.face2].normal)<=thresholdAngle)i=geometry[keys.vert1],edge.push(i.x),edge.push(i.y),edge.push(i.z),i=geometry[keys.vert2],edge.push(i.x),edge.push(i.y),edge.push(i.z);this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(edge),3))};THREE.EdgesGeometry.prototype=
Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry;THREE.ExtrudeGeometry=function(shapes,options){"undefined"!==typeof shapes&&(THREE.Geometry.call(this),this.type="ExtrudeGeometry",shapes=Array.isArray(shapes)?shapes:[shapes],this.addShapeList(shapes,options),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList=
function(shapes,options){for(var sl=shapes.length,s=0;s<sl;s++)this.addShape(shapes[s],options)};THREE.ExtrudeGeometry.prototype.addShape=function(shape,options){function scalePt2(pt,vec,size){vec||console.error("THREE.ExtrudeGeometry: vec does not exist");return vec.clone().multiplyScalar(size).add(pt)}function getBevelVec(inPt,inPrev,inNext){var v_trans_y=inPt.x-inPrev.x;var shrink_by=inPt.y-inPrev.y;var v_trans_x=inNext.x-inPt.x;var v_next_y=inNext.y-inPt.y,v_prev_lensq=v_trans_y*v_trans_y+shrink_by*
shrink_by;if(Math.abs(v_trans_y*v_next_y-shrink_by*v_trans_x)>Number.EPSILON){var v_prev_len=Math.sqrt(v_prev_lensq),v_next_len=Math.sqrt(v_trans_x*v_trans_x+v_next_y*v_next_y);v_prev_lensq=inPrev.x-shrink_by/v_prev_len;inPrev=inPrev.y+v_trans_y/v_prev_len;v_next_y=((inNext.x-v_next_y/v_next_len-v_prev_lensq)*v_next_y-(inNext.y+v_trans_x/v_next_len-inPrev)*v_trans_x)/(v_trans_y*v_next_y-shrink_by*v_trans_x);v_trans_x=v_prev_lensq+v_trans_y*v_next_y-inPt.x;v_trans_y=inPrev+shrink_by*v_next_y-inPt.y;
shrink_by=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(2>=shrink_by)return new THREE.Vector2(v_trans_x,v_trans_y);shrink_by=Math.sqrt(shrink_by/2)}else inPt=!1,v_trans_y>Number.EPSILON?v_trans_x>Number.EPSILON&&(inPt=!0):v_trans_y<-Number.EPSILON?v_trans_x<-Number.EPSILON&&(inPt=!0):Math.sign(shrink_by)===Math.sign(v_next_y)&&(inPt=!0),inPt?(v_trans_x=-shrink_by,shrink_by=Math.sqrt(v_prev_lensq)):(v_trans_x=v_trans_y,v_trans_y=shrink_by,shrink_by=Math.sqrt(v_prev_lensq/2));return new THREE.Vector2(v_trans_x/
shrink_by,v_trans_y/shrink_by)}function sidewalls(contour,layeroffset){for(i=contour.length;0<=--i;){var j=i;var k=i-1;0>k&&(k=contour.length-1);var s,sl=steps+2*bevelSegments;for(s=0;s<sl;s++){var slen1=vlen*s,slen2=vlen*(s+1),a=layeroffset+j+slen1;slen1=layeroffset+k+slen1;var c=layeroffset+k+slen2;slen2=layeroffset+j+slen2;a+=shapesOffset;slen1+=shapesOffset;c+=shapesOffset;slen2+=shapesOffset;scope.faces.push(new THREE.Face3(a,slen1,slen2,null,null,1));scope.faces.push(new THREE.Face3(slen1,c,
slen2,null,null,1));a=uvgen.generateSideWallUV(scope,a,slen1,c,slen2);scope.faceVertexUvs[0].push([a[0],a[1],a[3]]);scope.faceVertexUvs[0].push([a[1],a[2],a[3]])}}}function v(x,y,z){scope.vertices.push(new THREE.Vector3(x,y,z))}function f3(a,b,c){a+=shapesOffset;b+=shapesOffset;c+=shapesOffset;scope.faces.push(new THREE.Face3(a,b,c,null,null,0));a=uvgen.generateTopUV(scope,a,b,c);scope.faceVertexUvs[0].push(a)}var amount=void 0!==options.amount?options.amount:100,bevelThickness=void 0!==options.bevelThickness?
options.bevelThickness:6,bevelSize=void 0!==options.bevelSize?options.bevelSize:bevelThickness-2,bevelSegments=void 0!==options.bevelSegments?options.bevelSegments:3,bevelEnabled=void 0!==options.bevelEnabled?options.bevelEnabled:!0,curveSegments=void 0!==options.curveSegments?options.curveSegments:12,steps=void 0!==options.steps?options.steps:1,extrudePath=options.extrudePath,extrudeByPath=!1,uvgen=void 0!==options.UVGenerator?options.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator;if(extrudePath){var extrudePts=
extrudePath.getSpacedPoints(steps);extrudeByPath=!0;bevelEnabled=!1;var splineTube=void 0!==options.frames?options.frames:new THREE.TubeGeometry.FrenetFrames(extrudePath,steps,!1);var binormal=new THREE.Vector3;var normal=new THREE.Vector3;var position2=new THREE.Vector3}bevelEnabled||(bevelSize=bevelThickness=bevelSegments=0);var hl,scope=this,shapesOffset=this.vertices.length;options=shape.extractPoints(curveSegments);shape=options.shape;var holes=options.holes;if(options=!THREE.ShapeUtils.isClockWise(shape)){shape=
shape.reverse();var h=0;for(hl=holes.length;h<hl;h++){var ahole=holes[h];THREE.ShapeUtils.isClockWise(ahole)&&(holes[h]=ahole.reverse())}options=!1}var faces=THREE.ShapeUtils.triangulateShape(shape,holes),contour$jscomp$0=shape;h=0;for(hl=holes.length;h<hl;h++)ahole=holes[h],shape=shape.concat(ahole);var bs,vlen=shape.length,face,flen=faces.length;options=[];var i=0;var t=contour$jscomp$0.length;var b$jscomp$0=t-1;for(bs=i+1;i<t;i++,b$jscomp$0++,bs++)b$jscomp$0===t&&(b$jscomp$0=0),bs===t&&(bs=0),
options[i]=getBevelVec(contour$jscomp$0[i],contour$jscomp$0[b$jscomp$0],contour$jscomp$0[bs]);curveSegments=[];extrudePath=options.concat();h=0;for(hl=holes.length;h<hl;h++){ahole=holes[h];var oneHoleMovements=[];i=0;t=ahole.length;b$jscomp$0=t-1;for(bs=i+1;i<t;i++,b$jscomp$0++,bs++)b$jscomp$0===t&&(b$jscomp$0=0),bs===t&&(bs=0),oneHoleMovements[i]=getBevelVec(ahole[i],ahole[b$jscomp$0],ahole[bs]);curveSegments.push(oneHoleMovements);extrudePath=extrudePath.concat(oneHoleMovements)}for(b$jscomp$0=
0;b$jscomp$0<bevelSegments;b$jscomp$0++){t=b$jscomp$0/bevelSegments;var z$jscomp$0=bevelThickness*(1-t);bs=bevelSize*Math.sin(t*Math.PI/2);i=0;for(t=contour$jscomp$0.length;i<t;i++){var vert=scalePt2(contour$jscomp$0[i],options[i],bs);v(vert.x,vert.y,-z$jscomp$0)}h=0;for(hl=holes.length;h<hl;h++)for(ahole=holes[h],oneHoleMovements=curveSegments[h],i=0,t=ahole.length;i<t;i++)vert=scalePt2(ahole[i],oneHoleMovements[i],bs),v(vert.x,vert.y,-z$jscomp$0)}bs=bevelSize;for(i=0;i<vlen;i++)vert=bevelEnabled?
scalePt2(shape[i],extrudePath[i],bs):shape[i],extrudeByPath?(normal.copy(splineTube.normals[0]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y),position2.copy(extrudePts[0]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,0);for(t=1;t<=steps;t++)for(i=0;i<vlen;i++)vert=bevelEnabled?scalePt2(shape[i],extrudePath[i],bs):shape[i],extrudeByPath?(normal.copy(splineTube.normals[t]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[t]).multiplyScalar(vert.y),
position2.copy(extrudePts[t]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,amount/steps*t);for(b$jscomp$0=bevelSegments-1;0<=b$jscomp$0;b$jscomp$0--){t=b$jscomp$0/bevelSegments;z$jscomp$0=bevelThickness*(1-t);bs=bevelSize*Math.sin(t*Math.PI/2);i=0;for(t=contour$jscomp$0.length;i<t;i++)vert=scalePt2(contour$jscomp$0[i],options[i],bs),v(vert.x,vert.y,amount+z$jscomp$0);h=0;for(hl=holes.length;h<hl;h++)for(ahole=holes[h],oneHoleMovements=curveSegments[h],i=0,t=ahole.length;i<
t;i++)vert=scalePt2(ahole[i],oneHoleMovements[i],bs),extrudeByPath?v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z$jscomp$0):v(vert.x,vert.y,amount+z$jscomp$0)}(function(){if(bevelEnabled){var offset=0*vlen;for(i=0;i<flen;i++)face=faces[i],f3(face[2]+offset,face[1]+offset,face[0]+offset);offset=vlen*(steps+2*bevelSegments);for(i=0;i<flen;i++)face=faces[i],f3(face[0]+offset,face[1]+offset,face[2]+offset)}else{for(i=0;i<flen;i++)face=faces[i],f3(face[2],face[1],face[0]);for(i=0;i<flen;i++)face=
faces[i],f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps)}})();(function(){var layeroffset=0;sidewalls(contour$jscomp$0,layeroffset);layeroffset+=contour$jscomp$0.length;h=0;for(hl=holes.length;h<hl;h++)ahole=holes[h],sidewalls(ahole,layeroffset),layeroffset+=ahole.length})()};THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(geometry,indexA,indexB,indexC){geometry=geometry.vertices;indexA=geometry[indexA];indexB=geometry[indexB];indexC=geometry[indexC];return[new THREE.Vector2(indexA.x,
indexA.y),new THREE.Vector2(indexB.x,indexB.y),new THREE.Vector2(indexC.x,indexC.y)]},generateSideWallUV:function(geometry,indexA,indexB,indexC,indexD){geometry=geometry.vertices;indexA=geometry[indexA];indexB=geometry[indexB];indexC=geometry[indexC];indexD=geometry[indexD];return.01>Math.abs(indexA.y-indexB.y)?[new THREE.Vector2(indexA.x,1-indexA.z),new THREE.Vector2(indexB.x,1-indexB.z),new THREE.Vector2(indexC.x,1-indexC.z),new THREE.Vector2(indexD.x,1-indexD.z)]:[new THREE.Vector2(indexA.y,1-
indexA.z),new THREE.Vector2(indexB.y,1-indexB.z),new THREE.Vector2(indexC.y,1-indexC.z),new THREE.Vector2(indexD.y,1-indexD.z)]}};THREE.ShapeGeometry=function(shapes,options){THREE.Geometry.call(this);this.type="ShapeGeometry";!1===Array.isArray(shapes)&&(shapes=[shapes]);this.addShapeList(shapes,options);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList=
function(shapes,options){for(var i=0,l=shapes.length;i<l;i++)this.addShape(shapes[i],options);return this};THREE.ShapeGeometry.prototype.addShape=function(shape,options){void 0===options&&(options={});var material=options.material,uvgen=void 0===options.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:options.UVGenerator,l,shapesOffset=this.vertices.length;shape=shape.extractPoints(void 0!==options.curveSegments?options.curveSegments:12);var vertices=shape.shape,holes=shape.holes;if(!THREE.ShapeUtils.isClockWise(vertices))for(vertices=
vertices.reverse(),shape=0,l=holes.length;shape<l;shape++){var hole=holes[shape];THREE.ShapeUtils.isClockWise(hole)&&(holes[shape]=hole.reverse())}options=THREE.ShapeUtils.triangulateShape(vertices,holes);shape=0;for(l=holes.length;shape<l;shape++)hole=holes[shape],vertices=vertices.concat(hole);holes=vertices.length;l=options.length;for(shape=0;shape<holes;shape++)hole=vertices[shape],this.vertices.push(new THREE.Vector3(hole.x,hole.y,0));for(shape=0;shape<l;shape++)holes=options[shape],vertices=
holes[0]+shapesOffset,hole=holes[1]+shapesOffset,holes=holes[2]+shapesOffset,this.faces.push(new THREE.Face3(vertices,hole,holes,null,null,material)),this.faceVertexUvs[0].push(uvgen.generateTopUV(this,vertices,hole,holes))};THREE.LatheBufferGeometry=function(points,segments,phiStart,phiLength){THREE.BufferGeometry.call(this);this.type="LatheBufferGeometry";this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};segments=Math.floor(segments)||12;phiStart=phiStart||
0;phiLength=phiLength||2*Math.PI;phiLength=THREE.Math.clamp(phiLength,0,2*Math.PI);var vertexCount=(segments+1)*points.length,indexCount=segments*points.length*6,indices=new THREE.BufferAttribute(new (65535<indexCount?Uint32Array:Uint16Array)(indexCount),1),vertices=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),uvs=new THREE.BufferAttribute(new Float32Array(2*vertexCount),2),index=0,indexOffset=0,inverseSegments=1/segments,vertex=new THREE.Vector3,uv=new THREE.Vector2;for(vertexCount=
0;vertexCount<=segments;vertexCount++){indexCount=phiStart+vertexCount*inverseSegments*phiLength;var sin=Math.sin(indexCount),cos=Math.cos(indexCount);for(indexCount=0;indexCount<=points.length-1;indexCount++)vertex.x=points[indexCount].x*sin,vertex.y=points[indexCount].y,vertex.z=points[indexCount].x*cos,vertices.setXYZ(index,vertex.x,vertex.y,vertex.z),uv.x=vertexCount/segments,uv.y=indexCount/(points.length-1),uvs.setXY(index,uv.x,uv.y),index++}for(vertexCount=0;vertexCount<segments;vertexCount++)for(indexCount=
0;indexCount<points.length-1;indexCount++)phiStart=indexCount+vertexCount*points.length,index=phiStart+points.length,inverseSegments=phiStart+points.length+1,vertex=phiStart+1,indices.setX(indexOffset,phiStart),indexOffset++,indices.setX(indexOffset,index),indexOffset++,indices.setX(indexOffset,vertex),indexOffset++,indices.setX(indexOffset,index),indexOffset++,indices.setX(indexOffset,inverseSegments),indexOffset++,indices.setX(indexOffset,vertex),indexOffset++;this.setIndex(indices);this.addAttribute("position",
vertices);this.addAttribute("uv",uvs);this.computeVertexNormals();if(phiLength===2*Math.PI)for(phiLength=this.attributes.normal.array,indices=new THREE.Vector3,vertices=new THREE.Vector3,uvs=new THREE.Vector3,phiStart=segments*points.length*3,indexCount=vertexCount=0;vertexCount<points.length;vertexCount++,indexCount+=3)indices.x=phiLength[indexCount+0],indices.y=phiLength[indexCount+1],indices.z=phiLength[indexCount+2],vertices.x=phiLength[phiStart+indexCount+0],vertices.y=phiLength[phiStart+indexCount+
1],vertices.z=phiLength[phiStart+indexCount+2],uvs.addVectors(indices,vertices).normalize(),phiLength[indexCount+0]=phiLength[phiStart+indexCount+0]=uvs.x,phiLength[indexCount+1]=phiLength[phiStart+indexCount+1]=uvs.y,phiLength[indexCount+2]=phiLength[phiStart+indexCount+2]=uvs.z};THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry;THREE.LatheGeometry=function(points,segments,phiStart,phiLength){THREE.Geometry.call(this);
this.type="LatheGeometry";this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength};this.fromBufferGeometry(new THREE.LatheBufferGeometry(points,segments,phiStart,phiLength));this.mergeVertices()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;THREE.PlaneGeometry=function(width,height,widthSegments,heightSegments){THREE.Geometry.call(this);this.type="PlaneGeometry";this.parameters={width:width,
height:height,widthSegments:widthSegments,heightSegments:heightSegments};this.fromBufferGeometry(new THREE.PlaneBufferGeometry(width,height,widthSegments,heightSegments))};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;THREE.PlaneBufferGeometry=function(width,height,widthSegments,heightSegments){THREE.BufferGeometry.call(this);this.type="PlaneBufferGeometry";this.parameters={width:width,height:height,widthSegments:widthSegments,
heightSegments:heightSegments};var width_half=width/2,height_half=height/2;widthSegments=Math.floor(widthSegments)||1;heightSegments=Math.floor(heightSegments)||1;var gridX1=widthSegments+1,gridY1=heightSegments+1,segment_width=width/widthSegments,segment_height=height/heightSegments;height=new Float32Array(gridX1*gridY1*3);width=new Float32Array(gridX1*gridY1*3);for(var uvs=new Float32Array(gridX1*gridY1*2),offset=0,offset2=0,iy=0;iy<gridY1;iy++)for(var y=iy*segment_height-height_half,ix=0;ix<gridX1;ix++)height[offset]=
ix*segment_width-width_half,height[offset+1]=-y,width[offset+2]=1,uvs[offset2]=ix/widthSegments,uvs[offset2+1]=1-iy/heightSegments,offset+=3,offset2+=2;offset=0;width_half=new (65535<height.length/3?Uint32Array:Uint16Array)(widthSegments*heightSegments*6);for(iy=0;iy<heightSegments;iy++)for(ix=0;ix<widthSegments;ix++)height_half=ix+gridX1*(iy+1),gridY1=ix+1+gridX1*(iy+1),segment_width=ix+1+gridX1*iy,width_half[offset]=ix+gridX1*iy,width_half[offset+1]=height_half,width_half[offset+2]=segment_width,
width_half[offset+3]=height_half,width_half[offset+4]=gridY1,width_half[offset+5]=segment_width,offset+=6;this.setIndex(new THREE.BufferAttribute(width_half,1));this.addAttribute("position",new THREE.BufferAttribute(height,3));this.addAttribute("normal",new THREE.BufferAttribute(width,3));this.addAttribute("uv",new THREE.BufferAttribute(uvs,2))};THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry;
THREE.RingBufferGeometry=function(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){THREE.BufferGeometry.call(this);this.type="RingBufferGeometry";this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};innerRadius=innerRadius||20;outerRadius=outerRadius||50;thetaStart=void 0!==thetaStart?thetaStart:0;thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI;thetaSegments=
void 0!==thetaSegments?Math.max(3,thetaSegments):8;phiSegments=void 0!==phiSegments?Math.max(1,phiSegments):1;var vertexCount=(thetaSegments+1)*(phiSegments+1),indexCount=thetaSegments*phiSegments*6;indexCount=new THREE.BufferAttribute(new (65535<indexCount?Uint32Array:Uint16Array)(indexCount),1);var vertices=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),normals=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3);vertexCount=new THREE.BufferAttribute(new Float32Array(2*vertexCount),
2);var index=0,indexOffset=0,radius=innerRadius,radiusStep=(outerRadius-innerRadius)/phiSegments,vertex=new THREE.Vector3,uv=new THREE.Vector2,i;for(innerRadius=0;innerRadius<=phiSegments;innerRadius++){for(i=0;i<=thetaSegments;i++){var segment=thetaStart+i/thetaSegments*thetaLength;vertex.x=radius*Math.cos(segment);vertex.y=radius*Math.sin(segment);vertices.setXYZ(index,vertex.x,vertex.y,vertex.z);normals.setXYZ(index,0,0,1);uv.x=(vertex.x/outerRadius+1)/2;uv.y=(vertex.y/outerRadius+1)/2;vertexCount.setXY(index,
uv.x,uv.y);index++}radius+=radiusStep}for(innerRadius=0;innerRadius<phiSegments;innerRadius++)for(outerRadius=innerRadius*(thetaSegments+1),i=0;i<thetaSegments;i++)thetaStart=segment=i+outerRadius,thetaLength=segment+thetaSegments+1,index=segment+thetaSegments+2,segment+=1,indexCount.setX(indexOffset,thetaStart),indexOffset++,indexCount.setX(indexOffset,thetaLength),indexOffset++,indexCount.setX(indexOffset,index),indexOffset++,indexCount.setX(indexOffset,thetaStart),indexOffset++,indexCount.setX(indexOffset,
index),indexOffset++,indexCount.setX(indexOffset,segment),indexOffset++;this.setIndex(indexCount);this.addAttribute("position",vertices);this.addAttribute("normal",normals);this.addAttribute("uv",vertexCount)};THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry;THREE.RingGeometry=function(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){THREE.Geometry.call(this);this.type=
"RingGeometry";this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new THREE.RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength))};THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor=THREE.RingGeometry;THREE.SphereGeometry=function(radius,widthSegments,heightSegments,
phiStart,phiLength,thetaStart,thetaLength){THREE.Geometry.call(this);this.type="SphereGeometry";this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};this.fromBufferGeometry(new THREE.SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength))};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.SphereGeometry.prototype.constructor=
THREE.SphereGeometry;THREE.SphereBufferGeometry=function(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){THREE.BufferGeometry.call(this);this.type="SphereBufferGeometry";this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength};radius=radius||50;widthSegments=Math.max(3,Math.floor(widthSegments)||8);heightSegments=Math.max(2,Math.floor(heightSegments)||
6);phiStart=void 0!==phiStart?phiStart:0;phiLength=void 0!==phiLength?phiLength:2*Math.PI;thetaStart=void 0!==thetaStart?thetaStart:0;thetaLength=void 0!==thetaLength?thetaLength:Math.PI;var thetaEnd=thetaStart+thetaLength,vertexCount=(widthSegments+1)*(heightSegments+1),positions=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),normals=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3);vertexCount=new THREE.BufferAttribute(new Float32Array(2*vertexCount),2);for(var index=0,
vertices=[],normal=new THREE.Vector3,y=0;y<=heightSegments;y++){for(var verticesRow=[],v=y/heightSegments,x=0;x<=widthSegments;x++){var u=x/widthSegments,px=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength),py=radius*Math.cos(thetaStart+v*thetaLength),pz=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength);normal.set(px,py,pz).normalize();positions.setXYZ(index,px,py,pz);normals.setXYZ(index,normal.x,normal.y,normal.z);vertexCount.setXY(index,u,1-v);verticesRow.push(index);
index++}vertices.push(verticesRow)}phiStart=[];for(y=0;y<heightSegments;y++)for(x=0;x<widthSegments;x++)phiLength=vertices[y][x+1],thetaLength=vertices[y][x],index=vertices[y+1][x],normal=vertices[y+1][x+1],(0!==y||0<thetaStart)&&phiStart.push(phiLength,thetaLength,normal),(y!==heightSegments-1||thetaEnd<Math.PI)&&phiStart.push(thetaLength,index,normal);this.setIndex(new (65535<positions.count?THREE.Uint32Attribute:THREE.Uint16Attribute)(phiStart,1));this.addAttribute("position",positions);this.addAttribute("normal",
normals);this.addAttribute("uv",vertexCount);this.boundingSphere=new THREE.Sphere(new THREE.Vector3,radius)};THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry;THREE.TextGeometry=function(text,parameters){parameters=parameters||{};var font=parameters.font;if(!1===font instanceof THREE.Font)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new THREE.Geometry;
text=font.generateShapes(text,parameters.size,parameters.curveSegments);parameters.amount=void 0!==parameters.height?parameters.height:50;void 0===parameters.bevelThickness&&(parameters.bevelThickness=10);void 0===parameters.bevelSize&&(parameters.bevelSize=8);void 0===parameters.bevelEnabled&&(parameters.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,text,parameters);this.type="TextGeometry"};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);THREE.TextGeometry.prototype.constructor=
THREE.TextGeometry;THREE.TorusBufferGeometry=function(radius,tube,radialSegments,tubularSegments,arc){THREE.BufferGeometry.call(this);this.type="TorusBufferGeometry";this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};radius=radius||100;tube=tube||40;radialSegments=Math.floor(radialSegments)||8;tubularSegments=Math.floor(tubularSegments)||6;arc=arc||2*Math.PI;var vertexCount=(radialSegments+1)*(tubularSegments+1),indexCount=radialSegments*
tubularSegments*6;indexCount=new (65535<indexCount?Uint32Array:Uint16Array)(indexCount);var vertices=new Float32Array(3*vertexCount),normals=new Float32Array(3*vertexCount);vertexCount=new Float32Array(2*vertexCount);var vertexBufferOffset=0,uvBufferOffset=0,indexBufferOffset=0,center=new THREE.Vector3,vertex=new THREE.Vector3,normal=new THREE.Vector3,j,i;for(j=0;j<=radialSegments;j++)for(i=0;i<=tubularSegments;i++){var u=i/tubularSegments*arc,v=j/radialSegments*Math.PI*2;vertex.x=(radius+tube*Math.cos(v))*
Math.cos(u);vertex.y=(radius+tube*Math.cos(v))*Math.sin(u);vertex.z=tube*Math.sin(v);vertices[vertexBufferOffset]=vertex.x;vertices[vertexBufferOffset+1]=vertex.y;vertices[vertexBufferOffset+2]=vertex.z;center.x=radius*Math.cos(u);center.y=radius*Math.sin(u);normal.subVectors(vertex,center).normalize();normals[vertexBufferOffset]=normal.x;normals[vertexBufferOffset+1]=normal.y;normals[vertexBufferOffset+2]=normal.z;vertexCount[uvBufferOffset]=i/tubularSegments;vertexCount[uvBufferOffset+1]=j/radialSegments;
vertexBufferOffset+=3;uvBufferOffset+=2}for(j=1;j<=radialSegments;j++)for(i=1;i<=tubularSegments;i++)radius=(tubularSegments+1)*(j-1)+i-1,tube=(tubularSegments+1)*(j-1)+i,arc=(tubularSegments+1)*j+i,indexCount[indexBufferOffset]=(tubularSegments+1)*j+i-1,indexCount[indexBufferOffset+1]=radius,indexCount[indexBufferOffset+2]=arc,indexCount[indexBufferOffset+3]=radius,indexCount[indexBufferOffset+4]=tube,indexCount[indexBufferOffset+5]=arc,indexBufferOffset+=6;this.setIndex(new THREE.BufferAttribute(indexCount,
1));this.addAttribute("position",new THREE.BufferAttribute(vertices,3));this.addAttribute("normal",new THREE.BufferAttribute(normals,3));this.addAttribute("uv",new THREE.BufferAttribute(vertexCount,2))};THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry;THREE.TorusGeometry=function(radius,tube,radialSegments,tubularSegments,arc){THREE.Geometry.call(this);this.type="TorusGeometry";this.parameters=
{radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc};this.fromBufferGeometry(new THREE.TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc))};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;THREE.TorusKnotBufferGeometry=function(radius$jscomp$0,tube,tubularSegments,radialSegments,p$jscomp$0,q$jscomp$0){function calculatePositionOnCurve(u,p,q,radius,position){var su=
Math.sin(u);p=q/p*u;q=Math.cos(p);position.x=radius*(2+q)*.5*Math.cos(u);position.y=radius*(2+q)*su*.5;position.z=radius*Math.sin(p)*.5}THREE.BufferGeometry.call(this);this.type="TorusKnotBufferGeometry";this.parameters={radius:radius$jscomp$0,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p$jscomp$0,q:q$jscomp$0};radius$jscomp$0=radius$jscomp$0||100;tube=tube||40;tubularSegments=Math.floor(tubularSegments)||64;radialSegments=Math.floor(radialSegments)||8;p$jscomp$0=p$jscomp$0||
2;q$jscomp$0=q$jscomp$0||3;var vertexCount=(radialSegments+1)*(tubularSegments+1),indexCount=radialSegments*tubularSegments*6;indexCount=new THREE.BufferAttribute(new (65535<indexCount?Uint32Array:Uint16Array)(indexCount),1);var vertices=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3),normals=new THREE.BufferAttribute(new Float32Array(3*vertexCount),3);vertexCount=new THREE.BufferAttribute(new Float32Array(2*vertexCount),2);var i,index=0,indexOffset=0,vertex=new THREE.Vector3,normal=
new THREE.Vector3,uv=new THREE.Vector2,P1=new THREE.Vector3,P2=new THREE.Vector3,B=new THREE.Vector3,T=new THREE.Vector3,N=new THREE.Vector3;for(i=0;i<=tubularSegments;++i){var j=i/tubularSegments*p$jscomp$0*Math.PI*2;calculatePositionOnCurve(j,p$jscomp$0,q$jscomp$0,radius$jscomp$0,P1);calculatePositionOnCurve(j+.01,p$jscomp$0,q$jscomp$0,radius$jscomp$0,P2);T.subVectors(P2,P1);N.addVectors(P2,P1);B.crossVectors(T,N);N.crossVectors(B,T);B.normalize();N.normalize();for(j=0;j<=radialSegments;++j){var v=
j/radialSegments*Math.PI*2,cx=-tube*Math.cos(v);v=tube*Math.sin(v);vertex.x=P1.x+(cx*N.x+v*B.x);vertex.y=P1.y+(cx*N.y+v*B.y);vertex.z=P1.z+(cx*N.z+v*B.z);vertices.setXYZ(index,vertex.x,vertex.y,vertex.z);normal.subVectors(vertex,P1).normalize();normals.setXYZ(index,normal.x,normal.y,normal.z);uv.x=i/tubularSegments;uv.y=j/radialSegments;vertexCount.setXY(index,uv.x,uv.y);index++}}for(j=1;j<=tubularSegments;j++)for(i=1;i<=radialSegments;i++)radius$jscomp$0=(radialSegments+1)*j+(i-1),tube=(radialSegments+
1)*j+i,p$jscomp$0=(radialSegments+1)*(j-1)+i,indexCount.setX(indexOffset,(radialSegments+1)*(j-1)+(i-1)),indexOffset++,indexCount.setX(indexOffset,radius$jscomp$0),indexOffset++,indexCount.setX(indexOffset,p$jscomp$0),indexOffset++,indexCount.setX(indexOffset,radius$jscomp$0),indexOffset++,indexCount.setX(indexOffset,tube),indexOffset++,indexCount.setX(indexOffset,p$jscomp$0),indexOffset++;this.setIndex(indexCount);this.addAttribute("position",vertices);this.addAttribute("normal",normals);this.addAttribute("uv",
vertexCount)};THREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry;THREE.TorusKnotGeometry=function(radius,tube,tubularSegments,radialSegments,p,q,heightScale){THREE.Geometry.call(this);this.type="TorusKnotGeometry";this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q};void 0!==heightScale&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q));this.mergeVertices()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;THREE.TubeGeometry=function(path,segments,radius,radialSegments,closed,taper){THREE.Geometry.call(this);this.type="TubeGeometry";this.parameters={path:path,segments:segments,radius:radius,radialSegments:radialSegments,closed:closed,
taper:taper};segments=segments||64;radius=radius||1;radialSegments=radialSegments||8;closed=closed||!1;taper=taper||THREE.TubeGeometry.NoTaper;var grid=[],numpoints=segments+1,pos2=new THREE.Vector3;var i=new THREE.TubeGeometry.FrenetFrames(path,segments,closed);var uvb=i.normals;var uvc=i.binormals;this.tangents=i.tangents;this.normals=uvb;this.binormals=uvc;for(i=0;i<numpoints;i++){grid[i]=[];var u=i/(numpoints-1);var pos=path.getPointAt(u);var normal=uvb[i];var binormal=uvc[i];var r=radius*taper(u);
for(u=0;u<radialSegments;u++){var v=u/radialSegments*2*Math.PI;var cx=-r*Math.cos(v);v=r*Math.sin(v);pos2.copy(pos);pos2.x+=cx*normal.x+v*binormal.x;pos2.y+=cx*normal.y+v*binormal.y;pos2.z+=cx*normal.z+v*binormal.z;grid[i][u]=this.vertices.push(new THREE.Vector3(pos2.x,pos2.y,pos2.z))-1}}for(i=0;i<segments;i++)for(u=0;u<radialSegments;u++)taper=closed?(i+1)%segments:i+1,numpoints=(u+1)%radialSegments,path=grid[i][u],radius=grid[taper][u],taper=grid[taper][numpoints],numpoints=grid[i][numpoints],pos2=
new THREE.Vector2(i/segments,u/radialSegments),uvb=new THREE.Vector2((i+1)/segments,u/radialSegments),uvc=new THREE.Vector2((i+1)/segments,(u+1)/radialSegments),normal=new THREE.Vector2(i/segments,(u+1)/radialSegments),this.faces.push(new THREE.Face3(path,radius,numpoints)),this.faceVertexUvs[0].push([pos2,uvb,normal]),this.faces.push(new THREE.Face3(radius,taper,numpoints)),this.faceVertexUvs[0].push([uvb.clone(),uvc,normal.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=
Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry;THREE.TubeGeometry.NoTaper=function(u){return 1};THREE.TubeGeometry.SinusoidalTaper=function(u){return Math.sin(Math.PI*u)};THREE.TubeGeometry.FrenetFrames=function(path,segments,closed){var normal=new THREE.Vector3,tangents=[],normals=[],binormals=[],vec=new THREE.Vector3,mat=new THREE.Matrix4;segments+=1;var tx;this.tangents=tangents;this.normals=normals;this.binormals=binormals;for(tx=0;tx<segments;tx++){var ty=
tx/(segments-1);tangents[tx]=path.getTangentAt(ty);tangents[tx].normalize()}normals[0]=new THREE.Vector3;binormals[0]=new THREE.Vector3;path=Number.MAX_VALUE;tx=Math.abs(tangents[0].x);ty=Math.abs(tangents[0].y);var tz=Math.abs(tangents[0].z);tx<=path&&(path=tx,normal.set(1,0,0));ty<=path&&(path=ty,normal.set(0,1,0));tz<=path&&normal.set(0,0,1);vec.crossVectors(tangents[0],normal).normalize();normals[0].crossVectors(tangents[0],vec);binormals[0].crossVectors(tangents[0],normals[0]);for(tx=1;tx<segments;tx++)normals[tx]=
normals[tx-1].clone(),binormals[tx]=binormals[tx-1].clone(),vec.crossVectors(tangents[tx-1],tangents[tx]),vec.length()>Number.EPSILON&&(vec.normalize(),normal=Math.acos(THREE.Math.clamp(tangents[tx-1].dot(tangents[tx]),-1,1)),normals[tx].applyMatrix4(mat.makeRotationAxis(vec,normal))),binormals[tx].crossVectors(tangents[tx],normals[tx]);if(closed)for(normal=Math.acos(THREE.Math.clamp(normals[0].dot(normals[segments-1]),-1,1)),normal/=segments-1,0<tangents[0].dot(vec.crossVectors(normals[0],normals[segments-
1]))&&(normal=-normal),tx=1;tx<segments;tx++)normals[tx].applyMatrix4(mat.makeRotationAxis(tangents[tx],normal*tx)),binormals[tx].crossVectors(tangents[tx],normals[tx])};THREE.PolyhedronGeometry=function(vertices,indices,radius,detail$jscomp$0){function prepare(vector){var vertex=vector.normalize().clone();vertex.index=that.vertices.push(vertex)-1;vertex.uv=new THREE.Vector2(Math.atan2(vector.z,-vector.x)/2/Math.PI+.5,1-(Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z))/Math.PI+
.5));return vertex}function make(v1,v2,v3,materialIndex){materialIndex=new THREE.Face3(v1.index,v2.index,v3.index,[v1.clone(),v2.clone(),v3.clone()],void 0,materialIndex);that.faces.push(materialIndex);centroid.copy(v1).add(v2).add(v3).divideScalar(3);materialIndex=Math.atan2(centroid.z,-centroid.x);that.faceVertexUvs[0].push([correctUV(v1.uv,v1,materialIndex),correctUV(v2.uv,v2,materialIndex),correctUV(v3.uv,v3,materialIndex)])}function subdivide(face,detail){detail=Math.pow(2,detail);var a=prepare(that.vertices[face.a]),
b=prepare(that.vertices[face.b]),c=prepare(that.vertices[face.c]),v=[];face=face.materialIndex;for(var i=0;i<=detail;i++){v[i]=[];for(var aj=prepare(a.clone().lerp(c,i/detail)),bj=prepare(b.clone().lerp(c,i/detail)),rows=detail-i,j=0;j<=rows;j++)v[i][j]=0===j&&i===detail?aj:prepare(aj.clone().lerp(bj,j/rows))}for(i=0;i<detail;i++)for(j=0;j<2*(detail-i)-1;j++)a=Math.floor(j/2),0===j%2?make(v[i][a+1],v[i+1][a],v[i][a],face):make(v[i][a+1],v[i+1][a+1],v[i+1][a],face)}function correctUV(uv,vector,azimuth){0>
azimuth&&1===uv.x&&(uv=new THREE.Vector2(uv.x-1,uv.y));0===vector.x&&0===vector.z&&(uv=new THREE.Vector2(azimuth/2/Math.PI+.5,uv.y));return uv.clone()}THREE.Geometry.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail$jscomp$0};radius=radius||1;detail$jscomp$0=detail$jscomp$0||0;for(var that=this,i$jscomp$0=0,l=vertices.length;i$jscomp$0<l;i$jscomp$0+=3)prepare(new THREE.Vector3(vertices[i$jscomp$0],vertices[i$jscomp$0+1],vertices[i$jscomp$0+
2]));vertices=this.vertices;var faces=[],j$jscomp$0=i$jscomp$0=0;for(l=indices.length;i$jscomp$0<l;i$jscomp$0+=3,j$jscomp$0++){var v1$jscomp$0=vertices[indices[i$jscomp$0]],v2$jscomp$0=vertices[indices[i$jscomp$0+1]],v3$jscomp$0=vertices[indices[i$jscomp$0+2]];faces[j$jscomp$0]=new THREE.Face3(v1$jscomp$0.index,v2$jscomp$0.index,v3$jscomp$0.index,[v1$jscomp$0.clone(),v2$jscomp$0.clone(),v3$jscomp$0.clone()],void 0,j$jscomp$0)}var centroid=new THREE.Vector3;i$jscomp$0=0;for(l=faces.length;i$jscomp$0<
l;i$jscomp$0++)subdivide(faces[i$jscomp$0],detail$jscomp$0);i$jscomp$0=0;for(l=this.faceVertexUvs[0].length;i$jscomp$0<l;i$jscomp$0++)indices=this.faceVertexUvs[0][i$jscomp$0],detail$jscomp$0=indices[0].x,vertices=indices[1].x,faces=indices[2].x,j$jscomp$0=Math.min(detail$jscomp$0,vertices,faces),.9<Math.max(detail$jscomp$0,vertices,faces)&&.1>j$jscomp$0&&(.2>detail$jscomp$0&&(indices[0].x+=1),.2>vertices&&(indices[1].x+=1),.2>faces&&(indices[2].x+=1));i$jscomp$0=0;for(l=this.vertices.length;i$jscomp$0<
l;i$jscomp$0++)this.vertices[i$jscomp$0].multiplyScalar(radius);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,radius)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;THREE.DodecahedronGeometry=function(radius,detail){var t=(1+Math.sqrt(5))/2,r=1/t;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,
-r,-t,0,-r,t,0,r,-t,0,r,t,-r,-t,0,-r,t,0,r,-t,0,r,t,0,-t,0,-r,t,0,-r,-t,0,r,t,0,r],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],radius,detail);this.type="DodecahedronGeometry";this.parameters={radius:radius,detail:detail}};THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);
THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry;THREE.IcosahedronGeometry=function(radius,detail){var t=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],radius,detail);this.type="IcosahedronGeometry";this.parameters={radius:radius,detail:detail}};THREE.IcosahedronGeometry.prototype=
Object.create(THREE.PolyhedronGeometry.prototype);THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;THREE.OctahedronGeometry=function(radius,detail){THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],radius,detail);this.type="OctahedronGeometry";this.parameters={radius:radius,detail:detail}};THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.OctahedronGeometry.prototype.constructor=
THREE.OctahedronGeometry;THREE.TetrahedronGeometry=function(radius,detail){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],radius,detail);this.type="TetrahedronGeometry";this.parameters={radius:radius,detail:detail}};THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype);THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry;THREE.ParametricGeometry=function(func,slices,stacks){THREE.Geometry.call(this);
this.type="ParametricGeometry";this.parameters={func:func,slices:slices,stacks:stacks};var verts=this.vertices,faces=this.faces,uvs=this.faceVertexUvs[0],i,j,sliceCount=slices+1;for(i=0;i<=stacks;i++){var v=i/stacks;for(j=0;j<=slices;j++){var p=j/slices;p=func(p,v);verts.push(p)}}for(i=0;i<stacks;i++)for(j=0;j<slices;j++){func=i*sliceCount+j;verts=i*sliceCount+j+1;v=(i+1)*sliceCount+j+1;p=(i+1)*sliceCount+j;var uva=new THREE.Vector2(j/slices,i/stacks);var uvb=new THREE.Vector2((j+1)/slices,i/stacks);
var uvc=new THREE.Vector2((j+1)/slices,(i+1)/stacks);var uvd=new THREE.Vector2(j/slices,(i+1)/stacks);faces.push(new THREE.Face3(func,verts,p));uvs.push([uva,uvb,uvd]);faces.push(new THREE.Face3(verts,v,p));uvs.push([uvb.clone(),uvc,uvd.clone()])}this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry;THREE.WireframeGeometry=function(geometry){function sortFunction(a,
b){return a-b}THREE.BufferGeometry.call(this);var edge=[0,0],hash={},keys=["a","b","c"];if(geometry instanceof THREE.Geometry){var vertices=geometry.vertices,faces=geometry.faces,numEdges=0,edges=new Uint32Array(6*faces.length);geometry=0;for(var l=faces.length;geometry<l;geometry++)for(var face=faces[geometry],j=0;3>j;j++){edge[0]=face[keys[j]];edge[1]=face[keys[(j+1)%3]];edge.sort(sortFunction);var key=edge.toString();void 0===hash[key]&&(edges[2*numEdges]=edge[0],edges[2*numEdges+1]=edge[1],hash[key]=
!0,numEdges++)}edge=new Float32Array(6*numEdges);geometry=0;for(l=numEdges;geometry<l;geometry++)for(j=0;2>j;j++)hash=vertices[edges[2*geometry+j]],numEdges=6*geometry+3*j,edge[numEdges+0]=hash.x,edge[numEdges+1]=hash.y,edge[numEdges+2]=hash.z;this.addAttribute("position",new THREE.BufferAttribute(edge,3))}else if(geometry instanceof THREE.BufferGeometry){if(null!==geometry.index){l=geometry.index.array;vertices=geometry.attributes.position;keys=geometry.groups;numEdges=0;0===keys.length&&geometry.addGroup(0,
l.length);edges=new Uint32Array(2*l.length);faces=0;for(face=keys.length;faces<face;++faces){geometry=keys[faces];j=geometry.start;key=geometry.count;geometry=j;for(var il=j+key;geometry<il;geometry+=3)for(j=0;3>j;j++)edge[0]=l[geometry+j],edge[1]=l[geometry+(j+1)%3],edge.sort(sortFunction),key=edge.toString(),void 0===hash[key]&&(edges[2*numEdges]=edge[0],edges[2*numEdges+1]=edge[1],hash[key]=!0,numEdges++)}edge=new Float32Array(6*numEdges);geometry=0;for(l=numEdges;geometry<l;geometry++)for(j=0;2>
j;j++)numEdges=6*geometry+3*j,hash=edges[2*geometry+j],edge[numEdges+0]=vertices.getX(hash),edge[numEdges+1]=vertices.getY(hash),edge[numEdges+2]=vertices.getZ(hash)}else for(vertices=geometry.attributes.position.array,numEdges=vertices.length/3,edges=numEdges/3,edge=new Float32Array(6*numEdges),geometry=0,l=edges;geometry<l;geometry++)for(j=0;3>j;j++)numEdges=18*geometry+6*j,edges=9*geometry+3*j,edge[numEdges+0]=vertices[edges],edge[numEdges+1]=vertices[edges+1],edge[numEdges+2]=vertices[edges+2],
hash=9*geometry+(j+1)%3*3,edge[numEdges+3]=vertices[hash],edge[numEdges+4]=vertices[hash+1],edge[numEdges+5]=vertices[hash+2];this.addAttribute("position",new THREE.BufferAttribute(edge,3))}};THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry;THREE.AxisHelper=function(size){size=size||1;var vertices=new Float32Array([0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size]),colors=new Float32Array([1,0,0,1,.6,
0,0,1,0,.6,1,0,0,0,1,0,.6,1]);size=new THREE.BufferGeometry;size.addAttribute("position",new THREE.BufferAttribute(vertices,3));size.addAttribute("color",new THREE.BufferAttribute(colors,3));vertices=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,size,vertices)};THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.AxisHelper.prototype.constructor=THREE.AxisHelper;THREE.ArrowHelper=function(){var lineGeometry=new THREE.BufferGeometry;
lineGeometry.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,1,0],3));var coneGeometry=new THREE.CylinderBufferGeometry(0,.5,1,5,1);coneGeometry.translate(0,-.5,0);return function(dir,origin,length,color,headLength,headWidth){THREE.Object3D.call(this);void 0===color&&(color=16776960);void 0===length&&(length=1);void 0===headLength&&(headLength=.2*length);void 0===headWidth&&(headWidth=.2*headLength);this.position.copy(origin);this.line=new THREE.Line(lineGeometry,new THREE.LineBasicMaterial({color:color}));
this.line.matrixAutoUpdate=!1;this.add(this.line);this.cone=new THREE.Mesh(coneGeometry,new THREE.MeshBasicMaterial({color:color}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(dir);this.setLength(length,headLength,headWidth)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper;THREE.ArrowHelper.prototype.setDirection=function(){var axis=new THREE.Vector3,radians;return function(dir){.99999<dir.y?this.quaternion.set(0,
0,0,1):-.99999>dir.y?this.quaternion.set(1,0,0,0):(axis.set(dir.z,0,-dir.x).normalize(),radians=Math.acos(dir.y),this.quaternion.setFromAxisAngle(axis,radians))}}();THREE.ArrowHelper.prototype.setLength=function(length,headLength,headWidth){void 0===headLength&&(headLength=.2*length);void 0===headWidth&&(headWidth=.2*headLength);this.line.scale.set(1,Math.max(0,length-headLength),1);this.line.updateMatrix();this.cone.scale.set(headWidth,headLength,headWidth);this.cone.position.y=length;this.cone.updateMatrix()};
THREE.ArrowHelper.prototype.setColor=function(color){this.line.material.color.copy(color);this.cone.material.color.copy(color)};THREE.BoxHelper=function(object){var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),positions=new Float32Array(24),geometry=new THREE.BufferGeometry;geometry.setIndex(new THREE.BufferAttribute(indices,1));geometry.addAttribute("position",new THREE.BufferAttribute(positions,3));THREE.LineSegments.call(this,geometry,new THREE.LineBasicMaterial({color:16776960}));
void 0!==object&&this.update(object)};THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.BoxHelper.prototype.constructor=THREE.BoxHelper;THREE.BoxHelper.prototype.update=function(){var box=new THREE.Box3;return function(object){object instanceof THREE.Box3?box.copy(object):box.setFromObject(object);if(!box.isEmpty()){object=box.min;var max=box.max,position=this.geometry.attributes.position,array=position.array;array[0]=max.x;array[1]=max.y;array[2]=max.z;array[3]=object.x;
array[4]=max.y;array[5]=max.z;array[6]=object.x;array[7]=object.y;array[8]=max.z;array[9]=max.x;array[10]=object.y;array[11]=max.z;array[12]=max.x;array[13]=max.y;array[14]=object.z;array[15]=object.x;array[16]=max.y;array[17]=object.z;array[18]=object.x;array[19]=object.y;array[20]=object.z;array[21]=max.x;array[22]=object.y;array[23]=object.z;position.needsUpdate=!0;this.geometry.computeBoundingSphere()}}}();THREE.BoundingBoxHelper=function(object,hex){hex=void 0!==hex?hex:8947848;this.object=object;
this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:hex,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};THREE.CameraHelper=function(camera){function addLine(a,b,hex){addPoint(a,hex);addPoint(b,
hex)}function addPoint(id,hex){geometry.vertices.push(new THREE.Vector3);geometry.colors.push(new THREE.Color(hex));void 0===pointMap[id]&&(pointMap[id]=[]);pointMap[id].push(geometry.vertices.length-1)}var geometry=new THREE.Geometry,material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),pointMap={};addLine("n1","n2",16755200);addLine("n2","n4",16755200);addLine("n4","n3",16755200);addLine("n3","n1",16755200);addLine("f1","f2",16755200);addLine("f2","f4",16755200);addLine("f4",
"f3",16755200);addLine("f3","f1",16755200);addLine("n1","f1",16755200);addLine("n2","f2",16755200);addLine("n3","f3",16755200);addLine("n4","f4",16755200);addLine("p","n1",16711680);addLine("p","n2",16711680);addLine("p","n3",16711680);addLine("p","n4",16711680);addLine("u1","u2",43775);addLine("u2","u3",43775);addLine("u3","u1",43775);addLine("c","t",16777215);addLine("p","c",3355443);addLine("cn1","cn2",3355443);addLine("cn3","cn4",3355443);addLine("cf1","cf2",3355443);addLine("cf3","cf4",3355443);
THREE.LineSegments.call(this,geometry,material);this.camera=camera;this.camera.updateProjectionMatrix();this.matrix=camera.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=pointMap;this.update()};THREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;THREE.CameraHelper.prototype.update=function(){function setPoint(point,x,y,z){vector.set(x,y,z).unproject(camera);point=pointMap[point];if(void 0!==point)for(x=0,y=point.length;x<
y;x++)geometry.vertices[point[x]].copy(vector)}var geometry,pointMap,vector=new THREE.Vector3,camera=new THREE.Camera;return function(){geometry=this.geometry;pointMap=this.pointMap;camera.projectionMatrix.copy(this.camera.projectionMatrix);setPoint("c",0,0,-1);setPoint("t",0,0,1);setPoint("n1",-1,-1,-1);setPoint("n2",1,-1,-1);setPoint("n3",-1,1,-1);setPoint("n4",1,1,-1);setPoint("f1",-1,-1,1);setPoint("f2",1,-1,1);setPoint("f3",-1,1,1);setPoint("f4",1,1,1);setPoint("u1",.7,1.1,-1);setPoint("u2",
-.7,1.1,-1);setPoint("u3",0,2,-1);setPoint("cf1",-1,0,1);setPoint("cf2",1,0,1);setPoint("cf3",0,-1,1);setPoint("cf4",0,1,1);setPoint("cn1",-1,0,-1);setPoint("cn2",1,0,-1);setPoint("cn3",0,-1,-1);setPoint("cn4",0,1,-1);geometry.verticesNeedUpdate=!0}}();THREE.DirectionalLightHelper=function(light,size){THREE.Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=!1;void 0===size&&(size=1);light=new THREE.BufferGeometry;light.addAttribute("position",
new THREE.Float32Attribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));size=new THREE.LineBasicMaterial({fog:!1});this.add(new THREE.Line(light,size));light=new THREE.BufferGeometry;light.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,0,1],3));this.add(new THREE.Line(light,size));this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper;THREE.DirectionalLightHelper.prototype.dispose=
function(){var lightPlane=this.children[0],targetLine=this.children[1];lightPlane.geometry.dispose();lightPlane.material.dispose();targetLine.geometry.dispose();targetLine.material.dispose()};THREE.DirectionalLightHelper.prototype.update=function(){var v1=new THREE.Vector3,v2=new THREE.Vector3,v3=new THREE.Vector3;return function(){v1.setFromMatrixPosition(this.light.matrixWorld);v2.setFromMatrixPosition(this.light.target.matrixWorld);v3.subVectors(v2,v1);var lightPlane=this.children[0],targetLine=
this.children[1];lightPlane.lookAt(v3);lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);targetLine.lookAt(v3);targetLine.scale.z=v3.length()}}();THREE.EdgesHelper=function(object,hex,thresholdAngle){hex=void 0!==hex?hex:16777215;THREE.LineSegments.call(this,new THREE.EdgesGeometry(object.geometry,thresholdAngle),new THREE.LineBasicMaterial({color:hex}));this.matrix=object.matrixWorld;this.matrixAutoUpdate=!1};THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype);
THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper;THREE.FaceNormalsHelper=function(object,size,hex,linewidth){this.object=object;this.size=void 0!==size?size:1;object=void 0!==hex?hex:16776960;linewidth=void 0!==linewidth?linewidth:1;size=0;hex=this.object.geometry;hex instanceof THREE.Geometry?size=hex.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");hex=new THREE.BufferGeometry;size=new THREE.Float32Attribute(6*
size,3);hex.addAttribute("position",size);THREE.LineSegments.call(this,hex,new THREE.LineBasicMaterial({color:object,linewidth:linewidth}));this.matrixAutoUpdate=!1;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper;THREE.FaceNormalsHelper.prototype.update=function(){var v1=new THREE.Vector3,v2=new THREE.Vector3,normalMatrix=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0);
normalMatrix.getNormalMatrix(this.object.matrixWorld);var matrixWorld=this.object.matrixWorld,position=this.geometry.attributes.position,objGeometry=this.object.geometry,vertices=objGeometry.vertices;objGeometry=objGeometry.faces;for(var idx=0,i=0,l=objGeometry.length;i<l;i++){var face=objGeometry[i],normal=face.normal;v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
position.setXYZ(idx,v1.x,v1.y,v1.z);idx+=1;position.setXYZ(idx,v2.x,v2.y,v2.z);idx+=1}position.needsUpdate=!0;return this}}();THREE.GridHelper=function(size,step,color1,color2){color1=new THREE.Color(void 0!==color1?color1:4473924);color2=new THREE.Color(void 0!==color2?color2:8947848);for(var vertices=[],colors=[],i=-size,j=0;i<=size;i+=step){vertices.push(-size,0,i,size,0,i);vertices.push(i,0,-size,i,0,size);var color=0===i?color1:color2;color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3;
color.toArray(colors,j);j+=3;color.toArray(colors,j);j+=3}size=new THREE.BufferGeometry;size.addAttribute("position",new THREE.Float32Attribute(vertices,3));size.addAttribute("color",new THREE.Float32Attribute(colors,3));vertices=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,size,vertices)};THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.GridHelper.prototype.constructor=THREE.GridHelper;THREE.GridHelper.prototype.setColors=
function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};THREE.HemisphereLightHelper=function(light,sphereSize){THREE.Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];light=new THREE.SphereGeometry(sphereSize,4,2);light.rotateX(-Math.PI/2);for(sphereSize=0;8>sphereSize;sphereSize++)light.faces[sphereSize].color=this.colors[4>
sphereSize?0:1];sphereSize=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(light,sphereSize);this.add(this.lightSphere);this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};THREE.HemisphereLightHelper.prototype.update=
function(){var vector=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();THREE.PointLightHelper=function(light,sphereSize){this.light=light;this.light.updateMatrixWorld();light=new THREE.SphereBufferGeometry(sphereSize,4,2);
sphereSize=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});sphereSize.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,light,sphereSize);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper;THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};THREE.PointLightHelper.prototype.update=
function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};THREE.SkeletonHelper=function(object){this.bones=this.getBoneList(object);for(var geometry=new THREE.Geometry,i=0;i<this.bones.length;i++)this.bones[i].parent instanceof THREE.Bone&&(geometry.vertices.push(new THREE.Vector3),geometry.vertices.push(new THREE.Vector3),geometry.colors.push(new THREE.Color(0,0,1)),geometry.colors.push(new THREE.Color(0,1,0)));geometry.dynamic=!0;i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,
depthTest:!1,depthWrite:!1,transparent:!0});THREE.LineSegments.call(this,geometry,i);this.root=object;this.matrix=object.matrixWorld;this.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList=function(object){var boneList=[];object instanceof THREE.Bone&&boneList.push(object);for(var i=0;i<object.children.length;i++)boneList.push.apply(boneList,
this.getBoneList(object.children[i]));return boneList};THREE.SkeletonHelper.prototype.update=function(){for(var geometry=this.geometry,matrixWorldInv=(new THREE.Matrix4).getInverse(this.root.matrixWorld),boneMatrix=new THREE.Matrix4,j=0,i=0;i<this.bones.length;i++){var bone=this.bones[i];bone.parent instanceof THREE.Bone&&(boneMatrix.multiplyMatrices(matrixWorldInv,bone.matrixWorld),geometry.vertices[j].setFromMatrixPosition(boneMatrix),boneMatrix.multiplyMatrices(matrixWorldInv,bone.parent.matrixWorld),
geometry.vertices[j+1].setFromMatrixPosition(boneMatrix),j+=2)}geometry.verticesNeedUpdate=!0;geometry.computeBoundingSphere()};THREE.SpotLightHelper=function(light){THREE.Object3D.call(this);this.light=light;this.light.updateMatrixWorld();this.matrix=light.matrixWorld;this.matrixAutoUpdate=!1;light=new THREE.BufferGeometry;for(var positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,j=1;32>i;i++,j++){var p1=i/32*Math.PI*2,p2=j/32*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),
1,Math.cos(p2),Math.sin(p2),1)}light.addAttribute("position",new THREE.Float32Attribute(positions,3));positions=new THREE.LineBasicMaterial({fog:!1});this.cone=new THREE.LineSegments(light,positions);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper;THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};THREE.SpotLightHelper.prototype.update=
function(){var vector=new THREE.Vector3,vector2=new THREE.Vector3;return function(){var coneLength=this.light.distance?this.light.distance:1E3,coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength);vector.setFromMatrixPosition(this.light.matrixWorld);vector2.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(vector2.sub(vector));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();THREE.VertexNormalsHelper=
function(object,size,hex,linewidth){this.object=object;this.size=void 0!==size?size:1;object=void 0!==hex?hex:16711680;linewidth=void 0!==linewidth?linewidth:1;size=0;hex=this.object.geometry;hex instanceof THREE.Geometry?size=3*hex.faces.length:hex instanceof THREE.BufferGeometry&&(size=hex.attributes.normal.count);hex=new THREE.BufferGeometry;size=new THREE.Float32Attribute(6*size,3);hex.addAttribute("position",size);THREE.LineSegments.call(this,hex,new THREE.LineBasicMaterial({color:object,linewidth:linewidth}));
this.matrixAutoUpdate=!1;this.update()};THREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper;THREE.VertexNormalsHelper.prototype.update=function(){var v1=new THREE.Vector3,v2=new THREE.Vector3,normalMatrix=new THREE.Matrix3;return function(){var keys=["a","b","c"];this.object.updateMatrixWorld(!0);normalMatrix.getNormalMatrix(this.object.matrixWorld);var matrixWorld=this.object.matrixWorld,position=
this.geometry.attributes.position,objGeometry=this.object.geometry;if(objGeometry instanceof THREE.Geometry)for(var vertices=objGeometry.vertices,faces=objGeometry.faces,i=objGeometry=0,l=faces.length;i<l;i++)for(var face=faces[i],j=0,jl=face.vertexNormals.length;j<jl;j++){var normal=face.vertexNormals[j];v1.copy(vertices[face[keys[j]]]).applyMatrix4(matrixWorld);v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);position.setXYZ(objGeometry,v1.x,v1.y,v1.z);objGeometry+=
1;position.setXYZ(objGeometry,v2.x,v2.y,v2.z);objGeometry+=1}else if(objGeometry instanceof THREE.BufferGeometry)for(keys=objGeometry.attributes.position,vertices=objGeometry.attributes.normal,j=objGeometry=0,jl=keys.count;j<jl;j++)v1.set(keys.getX(j),keys.getY(j),keys.getZ(j)).applyMatrix4(matrixWorld),v2.set(vertices.getX(j),vertices.getY(j),vertices.getZ(j)),v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1),position.setXYZ(objGeometry,v1.x,v1.y,v1.z),objGeometry+=1,position.setXYZ(objGeometry,
v2.x,v2.y,v2.z),objGeometry+=1;position.needsUpdate=!0;return this}}();THREE.WireframeHelper=function(object,hex){hex=void 0!==hex?hex:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(object.geometry),new THREE.LineBasicMaterial({color:hex}));this.matrix=object.matrixWorld;this.matrixAutoUpdate=!1};THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype);THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper;THREE.ImmediateRenderObject=function(material){THREE.Object3D.call(this);
this.material=material;this.render=function(renderCallback){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject;THREE.MorphBlendMesh=function(geometry,material){THREE.Mesh.call(this,geometry,material);this.animationsMap={};this.animationsList=[];geometry=this.geometry.morphTargets.length;this.createAnimation("__default",0,geometry-1,geometry/1);this.setAnimationWeight("__default",1)};THREE.MorphBlendMesh.prototype=
Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh;THREE.MorphBlendMesh.prototype.createAnimation=function(name,start,end,fps){start={start:start,end:end,length:end-start+1,fps:fps,duration:(end-start)/fps,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[name]=start;this.animationsList.push(start)};THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(fps){for(var pattern=
/([a-z]+)_?(\d+)/i,firstAnimation,frameRanges={},geometry=this.geometry,i=0,il=geometry.morphTargets.length;i<il;i++){var chunks=geometry.morphTargets[i].name.match(pattern);if(chunks&&1<chunks.length){var name=chunks[1];frameRanges[name]||(frameRanges[name]={start:Infinity,end:-Infinity});chunks=frameRanges[name];i<chunks.start&&(chunks.start=i);i>chunks.end&&(chunks.end=i);firstAnimation||(firstAnimation=name)}}for(name in frameRanges)chunks=frameRanges[name],this.createAnimation(name,chunks.start,
chunks.end,fps);this.firstAnimation=firstAnimation};THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(name){if(name=this.animationsMap[name])name.direction=1,name.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(name){if(name=this.animationsMap[name])name.direction=-1,name.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(name,fps){if(name=this.animationsMap[name])name.fps=fps,name.duration=(name.end-name.start)/
name.fps};THREE.MorphBlendMesh.prototype.setAnimationDuration=function(name,duration){if(name=this.animationsMap[name])name.duration=duration,name.fps=(name.end-name.start)/name.duration};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(name,weight){if(name=this.animationsMap[name])name.weight=weight};THREE.MorphBlendMesh.prototype.setAnimationTime=function(name,time){if(name=this.animationsMap[name])name.time=time};THREE.MorphBlendMesh.prototype.getAnimationTime=function(name){var time=
0;if(name=this.animationsMap[name])time=name.time;return time};THREE.MorphBlendMesh.prototype.getAnimationDuration=function(name){var duration=-1;if(name=this.animationsMap[name])duration=name.duration;return duration};THREE.MorphBlendMesh.prototype.playAnimation=function(name){var animation=this.animationsMap[name];animation?(animation.time=0,animation.active=!0):console.warn("THREE.MorphBlendMesh: animation["+name+"] undefined in .playAnimation()")};THREE.MorphBlendMesh.prototype.stopAnimation=
function(name){if(name=this.animationsMap[name])name.active=!1};THREE.MorphBlendMesh.prototype.update=function(delta){for(var i=0,il=this.animationsList.length;i<il;i++){var animation=this.animationsList[i];if(animation.active){var frameTime=animation.duration/animation.length;animation.time+=animation.direction*delta;if(animation.mirroredLoop){if(animation.time>animation.duration||0>animation.time)animation.direction*=-1,animation.time>animation.duration&&(animation.time=animation.duration,animation.directionBackwards=
!0),0>animation.time&&(animation.time=0,animation.directionBackwards=!1)}else animation.time%=animation.duration,0>animation.time&&(animation.time+=animation.duration);var keyframe=animation.start+THREE.Math.clamp(Math.floor(animation.time/frameTime),0,animation.length-1),weight=animation.weight;keyframe!==animation.currentFrame&&(this.morphTargetInfluences[animation.lastFrame]=0,this.morphTargetInfluences[animation.currentFrame]=1*weight,this.morphTargetInfluences[keyframe]=0,animation.lastFrame=
animation.currentFrame,animation.currentFrame=keyframe);frameTime=animation.time%frameTime/frameTime;animation.directionBackwards&&(frameTime=1-frameTime);animation.currentFrame!==animation.lastFrame?(this.morphTargetInfluences[animation.currentFrame]=frameTime*weight,this.morphTargetInfluences[animation.lastFrame]=(1-frameTime)*weight):this.morphTargetInfluences[animation.currentFrame]=weight}}};"undefined"!==typeof exports?("undefined"!==typeof module&&module.exports&&(exports=module.exports=THREE),
exports.THREE=THREE):this.THREE=THREE}
//# sourceMappingURL=module$node_modules$three$three.js.map
